///////////////////////////////////////////////////////////
//  Towers.as
//  Macromedia ActionScript Implementation of the Class Towers
//  Generated by Enterprise Architect
//  Created on:      16-六月-2011 17:53:21
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element
{
	import com.raytoon.cannonfodder.puremvc.view.mediator.optionMainLayerMediator.OptionMainLayerMediator;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletLineFour;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletLineOne;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletLineThree;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletLineTwo;
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.OptionMainLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.Bullet;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletLink;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletRound;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.bullet.BulletStab;
	import com.raytoon.cannonfodder.puremvc.view.ui.toolsLayer.ToolsLayer;
	import com.raytoon.cannonfodder.tools.ArticleBlood;
	import com.raytoon.cannonfodder.tools.effects.ShockBeam;
	import com.raytoon.cannonfodder.tools.load.DynamicLoadOriginal;
	import com.raytoon.cannonfodder.tools.load.ElementDead;
	import com.raytoon.cannonfodder.tools.load.ShowLoadOriginal;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	import flash.filters.ColorMatrixFilter;
	
	import flash.display.CapsStyle;
	import flash.display.JointStyle;
	import flash.display.LineScaleMode;
	import flash.display.MovieClip;
	import flash.display.Shape;
	import flash.display.SimpleButton;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.system.ApplicationDomain;
	import flash.utils.Timer;
	import flash.utils.clearInterval;
	import flash.utils.getTimer;
	import flash.utils.setInterval;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 16-六月-2011 17:53:21
	 */
	public class Towers extends Element
	{
		public static const DEFENCE_TOWER:String = "defenceTower";//防御塔
		public static const ORGAN_TOWER:String = "organTower"//机关塔
		public static const ENERGY_TOWER:String = "energyTower"//能量塔
		public static const DAMAGE_TOWER:String = "damageTower"//破坏塔
		public static const OBSTACLE_TOWER:String = "obstacle"//障碍物
		//箭塔类型
		private var _towersType:String;
		public function set towersType(value:String):void {
			_towersType = value;
			elementType = value;
		}
		public function get towersType():String {
			return _towersType;
		}
		//建造地形
		private var _buildPlace:int = 0;
		public function set buildPlace(value:int):void {
			_buildPlace = value;
		}
		public function get buildPlace():int {
			return _buildPlace;
		}
		//是否能组合
		private var _portfolio:int = 0;
		public function set portfolio(value:int):void {
			_portfolio = value;
		}
		public function get portfolio():int {
			return _portfolio;
		}
		//攻击目标单位的属性
		private var _targetType:int = 0;
		public function set targetType(value:int):void {
			_targetType = value;
		}
		public function get targetType():int {
			return _targetType;
		}
		//攻击目标单位属性百分比
		private var _targetPercent:Number = 0;
		public function set targetPercent(value:Number):void {
			_targetPercent = value;
		}
		public function get targetPercent():Number {
			return _targetPercent;
		}
		//攻击目标单位属性持续时间
		private var _targetTime:int = 0;
		public function set  targetTime(value:int):void {
			_targetTime = value;
		}
		public function get  targetTime():int {
			return _targetTime;
		}
		//转角速度
		private var _angle:int = 0;
		public function set angle(value:int):void {
			_angle = value;
		}
		public function get angle():int {
			return _angle;
		}
		//攻击 弹道
		private var _trajectory:int = 0;
		public function set trajectory(value:int):void {
			_trajectory = value;
		}
		public function get trajectory():int {
			return _trajectory;
		}
		//攻击点数组
		private var _angleArray:Array = [];
		public function get angleArray():Array {
			return _angleArray;
		}
		//攻击类型
		private var _attackType:int = 0;
		private var _shadowMovie:MovieClip;
		public function set attackType(value:int):void {
			_attackType = value;
			if (value == 1) {
				minAttackRange = 0;
				maxAttackRange = 1;
			}else if (value == 4) {
				//var tArr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
				//for each(var element:Element in tArr) {
					//
					//if ((element as Towers).attackType == 4 && element.unitId != unitId) {
						//
						//if (Point.distance(position, element.position) <= maxAttackRange) {
							//
							//_angleArray.push(Math.atan2(element.position.y - position.y, element.position.x - position.x) / Math.PI * 180);
							//(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).showTowerLine(element, this);
							//if (_angleArray.length >= 2)
								//return;
						//}
					//}
				//}
				
			}
		}
		public function get attackType():int {
			return _attackType;
		}
		//箭塔技能
		private var _skills:int = 0;
		private var _skillsRange:Number;
		private var _skillsNum:int;
		private var _skillsValue:int;
		private var _skillsTime:int;
		private var _skillsPercent:Number;
		public function set skills(value:int):void {
			_skills = value;
			elementSkills = value;
			var _skillsXmlList:XMLList = XMLSource.getXMLSource("TowerSkillsInfo.xml").towerSkills.(@id == value);
			_skillsRange = Number(_skillsXmlList.skillsRange);
			_skillsNum = int(_skillsXmlList.skillsNum);
			_skillsValue = int(_skillsXmlList.skillsValue);
			_skillsTime = int(_skillsXmlList.skillsTime);
			_skillsPercent = Number(_skillsXmlList.skillsPercent);
			_skillsXmlList = null;
			startSkills();
		}
		public function get skills():int {
			return _skills;
		}
		
		public function get skillsRange():Number {
			return _skillsRange;
		}
		public function get skillsNum():int {
			return _skillsNum;
		}
		public function get skillsValue():int {
			return _skillsValue;
		}
		public function get skillsTime():int {
			return _skillsTime;
		}
		public function get skillsPercent():Number {
			return _skillsPercent;
		}
		
		private var _qiangTa:MovieClip;
		public function showQianTa():void {
			
			if (!_qiangTa) {
				if (viewFlag == 1)
					viewUnit.visible = false;
				var _num1:int = Math.random() * 2 + 1;
				var _mClass1:Class = ApplicationDomain.currentDomain.getDefinition("QiangTa" + String(_num1)) as Class;
				_qiangTa = new _mClass1() as MovieClip;
				_qiangTa.addFrameScript(_qiangTa.totalFrames - 1, qingTaComplete);
				addChild(_qiangTa);
				_mClass1 = null;
				_qiangTa.y = GlobalVariable.RECT_HEIGHT / 2;
				
			}else {
				
				if (viewFlag == 1)
					viewUnit.visible = false;
				removeChild(_qiangTa);
				_qiangTa = null;
				var _num2:int = Math.random() * 2 + 1;
				var _mClass2:Class = ApplicationDomain.currentDomain.getDefinition("QiangTa" + String(_num2)) as Class;
				_qiangTa = new _mClass2() as MovieClip;
				_qiangTa.addFrameScript(_qiangTa.totalFrames - 1, qingTaComplete);
				addChild(_qiangTa);
				_mClass2 = null;
				_qiangTa.y = GlobalVariable.RECT_HEIGHT / 2;
				
			}
		}
		
		private function qingTaComplete():void {
			
			_qiangTa.stop();
			_qiangTa.visible = false;
			if (viewFlag == 1)
				viewUnit.visible = true;
		}
		
		public function Towers(towerName:String,showFlag:Boolean,towerHP:int,towerArmor:int,level:int = 1){
			
			super();
			elementLevel = level;
			elementDownLayer = new Sprite();
			addChild(elementDownLayer);
			elementLayer = new Sprite();
			addChild(elementLayer);
			elementUpLayer = new Sprite();
			addChild(elementUpLayer);
			adType = Element.TOWER;
			elementName = towerName;
			viewUnit = new DynamicLoadOriginal(towerName, showFlag, "", towerHP, towerArmor, towerHP, towerArmor,showArticleBlood,GlobalVariable.RECT_HEIGHT / 2); 
			elementLayer.addChild(viewUnit);
			
			viewUnit.y = GlobalVariable.RECT_HEIGHT / 2;
			viewFlag = 1;
			//viewUnit.showFrame(2);
			
		}
		private var _sleepMovie:MovieClip;
		/**
		 * 防塔休眠 
		 * @param	isSleep
		 */
		override public function elementSleep(isSleep:Boolean):void 
		{
			if (isSleep) {
				if (viewFlag == 1) {
					
					if (!_sleepMovie) {
						
						var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("HeroSkillsLockMovie") as Class;
						_sleepMovie = new _mClass() as MovieClip;
						elementUpLayer.addChild(_sleepMovie);
						_sleepMovie.addFrameScript(_sleepMovie.totalFrames - 1, towerSleep);
						_sleepMovie.y = GlobalVariable.RECT_HEIGHT / 2;
						_mClass = null;
					}
					
				}
			}else {
				if (viewFlag == 1) {
					viewFlag = 0;
					elementLayer.removeChild(viewUnit);
					viewUnit = null
					viewUnit = new DynamicLoadOriginal(elementName, true, "", lifeHP, armor, mirrorHP, mirrorArmor); 
					elementLayer.addChild(viewUnit);
					viewUnit.y = GlobalVariable.RECT_HEIGHT / 2;
					viewFlag = 1;
					if (_sleepMovie) {
						
						elementUpLayer.removeChild(_sleepMovie);
						_sleepMovie = null;
					}
					
				}
			}
		}
		/**
		 * 箭塔休眠
		 */
		private function towerSleep():void {
			
			_sleepMovie.stop();
			_sleepMovie.visible = false;
			if (viewFlag == 1) {
				viewFlag = 0;
				elementLayer.removeChild(viewUnit);
				viewUnit = null
				viewUnit = new DynamicLoadOriginal("QiangTa", true, "", lifeHP, armor, mirrorHP, mirrorArmor); 
				elementLayer.addChild(viewUnit);
				viewUnit.y = GlobalVariable.RECT_HEIGHT / 2;
				viewFlag = 1;
			}
			
		}
		
		private var _deathArr:Array = ["ObSixteen", "ObSeventeen", "ObEighteen", "ObNinteen"];
		/**
		 * 箭塔死亡时调用
		 */
		override public function elementDeath():void {
			isReady = false;
			isAlive = false;
			removeLockTowerMovie();
			removeDownDefenceMovie();
			removeArticleBlood();
			if (_shadowMovie) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).effectLayer.removeChild(_shadowMovie);
				_shadowMovie = null;
			}
			if (!deathFlag)
				return;
			deathFlag = false;
			
			if (_attackType == 4)
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).removeTowerLine(this);
			removeDefenceIcon();
			removeAttackIcon();
			removeVenomIcon();
			if (viewFlag == 1) {
				
				elementLayer.removeChild(viewUnit);
				viewUnit = null;
				viewFlag = 0;
			}
			var deathUnit:ShowLoadOriginal = new ShowLoadOriginal(_deathArr[int(Math.random()*4)] as String);
			elementLayer.addChild(deathUnit);
			deathUnit.y = GlobalVariable.RECT_HEIGHT / 2;
			showDeathMovie();
			
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(deathSound);
			clear();
		}
		private var _deathMovie:ShowLoadOriginal;
		private var _deathClass:Class;
		
		override public function showDeathMovie():void {
			
			(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).deathTowerSum( { "dataType":elementType, "dataID":id, "dataSum":1 }, paper );
			
			isReady = false;
			isAlive = false;
			if (elementType != ORGAN_TOWER) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).swapTowerArr(this);
				//_deathClass = ApplicationDomain.currentDomain.getDefinition("TowerDeadMovie") as Class;
				_deathMovie = new ShowLoadOriginal(elementDeadName, true);
				elementLayer.addChild(_deathMovie);
				_deathMovie.y = -GlobalVariable.RECT_HEIGHT / 2;
			}else {
				elmentDead = new ElementDead(elementDeadName, removeNowElement, removeThis);
				elementLayer.addChild(elmentDead);
				elmentDead.y = GlobalVariable.RECT_HEIGHT / 2;
			}
			
			
		}
		
		private function killSkills():void {
			
			switch(_skills) {
				
				case 207:
					killAuthority();
				break;
				
				case 208:
					killInspire();
				break;
				
				case 209:
					killBarrier();
				break;
				
				case 210:
					killRepair();
				break;
				
				case 211:
					killOre();
				break;
				
				case 212:
					killPlusBlood();
				break;
				
				case 213:
					killFireSkills();
				break;
				
				case 214:
					killIntensiveCare();
				break;
			}
			
		}
		
		private var path:int = 1;
		private var _shootFlag:Boolean = true;
		/**
		 * 攻击
		 * 发射子弹
		 */
		override public function shoot():void {
			
			if (!attackAble) return;
			if (_shootFlag) {
				_shootFlag = false;
				lastShoot = getTimer();
			}else {
				return;
			}
			
			if (!target)
				return;
			
			if (!target.isReady || target.lifeHP <= 0) {
				target = null;
				return;
			}
			
			shootSum ++;
			if (_skills == 203 && shootSum == _skillsNum) {
				attack += _skillsValue;
				showXuanDaoMovie();
			}
			//if (_skills == 205)
				//attack += _skillsValue;
			switch(_attackType) {
				
				case 1://肉搏
					
					if (target.attackAble) {
						angleTower();
						if (viewFlag == 1)
							viewUnit.shootBullet();
						if (bulletEffectName == mirrorBulletEffectName){
							(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new Bullet(this, target, bulletEffectName, attack, _skills));
						}else {
							(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new Bullet(this, target, bulletEffectName, attack));
							bulletEffectName = mirrorBulletEffectName;
						}
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
					
				break;
				
				case 2://普通
					
					if (target.attackAble) {
						angleTower();
						if (viewFlag == 1)
							viewUnit.shootBullet();
						if (bulletEffectName == mirrorBulletEffectName){
							(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new Bullet(this, target, bulletEffectName, attack, _skills));
						}else {
							(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new Bullet(this, target, bulletEffectName, attack));
							bulletEffectName = mirrorBulletEffectName;
						}
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
					
				break;
				
				case 3://地刺
					angleTower();
					(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletStab(this));
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
				break;
				
				case 4://链路
					
					//if (target.attackAble) {
						//
						//if (viewFlag == 1)
							//viewUnit.shootBullet();
						//(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletLink(this, _angleArray));
					//}
					//else {
						//
						//target = null;
					//}
				break;
				
				case 5://直线
					if (target.moveType == 404) {
						target = null;
						return;
					}
					if (target.num == num && target.row < row) {
						path = 1;
						if (viewFlag == 1) {
							viewUnit.showFrame(4);
							viewUnit.shootBullet();
						}
						(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletLineOne(this, path,"LineBulletOne"));
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
					else if (target.row == row && target.num > num) {
						path = 2;
						if (viewFlag == 1) {
							viewUnit.showFrame(3);
							viewUnit.shootBullet();
						}
						(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletLineTwo(this, path,"LineBulletTwo"));
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
					else if (target.num == num && target.row > row) {
						path = 3;
						if (viewFlag == 1) {
							viewUnit.showFrame(2);
							viewUnit.shootBullet();
						}
						(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletLineThree(this, path,"LineBulletThree"));
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
					else if (target.row == row && target.num < num) {
						path = 4;
						if (viewFlag == 1) {
							viewUnit.showFrame(1);
							viewUnit.shootBullet();
						}
						(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletLineFour(this, path,"LineBulletFour"));
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
					
				break;
				
				case 6://连射
					
					if (_burstsFlag && target.attackAble) {
						angleTower();
						if (viewFlag == 1)
							viewUnit.shootBullet();
						_burstsFlag = false;
						_burstsTimer = new Timer(80, 3);
						_burstsTimer.addEventListener(TimerEvent.TIMER, bursts);
						_burstsTimer.start();
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
				break;
				
				case 7://散射
					angleTower();
					if (target.moveType == 404) {
						target = null;
						return;
					}
					if (viewFlag == 1)
						viewUnit.shootBullet();
					(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new BulletRound(this,bulletEffectName));
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
				break;
				
				case 8://连锁
					
				break;
				
				case 9:
					if (target.moveType != 404 && target.attackAble) {
						
						if (viewFlag == 1)
							viewUnit.shootBullet();
						var _attackArr:Array =  (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).attackArr;
						for each(var element:Element in _attackArr) {
							if (element.moveType == 404) continue;
							if (Point.distance(position, element.position) <= maxAttackRange && Point.distance(position, element.position) >= minAttackRange && element.attackAble) {
								element.showXuanDaoHurtMovie();
								element.downHp(attack);
							}
							element = null;
						}
						_attackArr = null;
						(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(shootSound);
					}
				break;
			}
			
			if (_skills == 203) {
				if (shootSum == _skillsNum) {
					attack = mirrorAttack;
					shootSum = 0;
				}
			}
			
		}
		private var _xuanDaoMovie:MovieClip;
		private var _xuanDaoClass:Class;
		private function showXuanDaoMovie():void {
			
			if (_xuanDaoMovie) {
				_xuanDaoMovie.visible = true;
				_xuanDaoMovie.gotoAndPlay(1);
			}else {
				_xuanDaoClass = ApplicationDomain.currentDomain.getDefinition("XuanDaoMovie") as Class;
				_xuanDaoMovie = new _xuanDaoClass() as MovieClip;
				_xuanDaoMovie.addFrameScript(_xuanDaoMovie.totalFrames - 1, function():void { _xuanDaoClass = null; _xuanDaoMovie.stop(); _xuanDaoMovie.visible = false; } );
				elementUpLayer.addChild(_xuanDaoMovie);
				_xuanDaoMovie.y = -GlobalVariable.RECT_HEIGHT / 2;
			}
		}
		private var _angleSum:Number = 0;
		private var _lenX:Number;
		private var _lenY:Number;
		/**
		 * 改变箭塔射击方向
		 */
		private function angleTower():void {
			
			if (target) {
				
				_lenX = target.position.x - position.x;
				_lenY = target.position.y - position.y;
				
				if ((_lenX < 0 && _lenY < 0 && _lenX < _lenY) || (_lenX < 0 && _lenY > 0 && _lenX < -_lenY)) {
					if (viewFlag == 1)
						viewUnit.showFrame(1);
				}
				else if ((_lenX < 0 && _lenY < 0 && _lenX > _lenY) || (_lenX > 0 && _lenY < 0 && _lenX < -_lenY)) {
					if (viewFlag == 1)
						viewUnit.showFrame(4);
				}
				else if ((_lenX > 0 && _lenY < 0 && _lenX > -_lenY) || (_lenX > 0 && _lenY > 0 && _lenX > _lenY)) {
					if (viewFlag == 1)
						viewUnit.showFrame(3);
				}
				else if ((_lenX < 0 && _lenY > 0 && -_lenX < _lenY) || (_lenX > 0 && _lenY > 0 && _lenX < _lenY)) {
					if (viewFlag == 1)
						viewUnit.showFrame(2);
				}
				
			}
		}
		private var _burstsInt:uint = 0;
		private var _burstsTimer:Timer;
		private var _burstsFlag:Boolean = true;
		/**
		 * 连续射击
		 */
		private function bursts(event:TimerEvent):void {
			
			_burstsInt ++;
			if (_burstsInt < 3) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new Bullet(this, target,bulletEffectName,attack));
			}else {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addElement(new Bullet(this, target,bulletEffectName,attack));
				_burstsTimer.reset();
				_burstsTimer.removeEventListener(TimerEvent.TIMER, bursts);
				_burstsTimer = null;
				_burstsInt = 0;
				_burstsFlag = true;
			}
		}
		
		private var lastShoot:Number = -1;
		private var _timerSum:int = 0;
		private var _alphNum:Number = 1;
		/**
		 * 重写渲染
		 */
		override public function rendering():void 
		{
			if (isHurting)
				elementFlashing();
				
			if (target == null && _skills == 215) {
				if (_shadowMovie) {
					if (isReady) {
						_shadowMovie.visible = true;
						_alphNum = _alphNum <= 1 ? _alphNum + 0.1 : 1;
						_shadowMovie.alpha = _alphNum;
					}else {
						_shadowMovie.visible = false;
					}
				}
				return;
			}else if (target && _skills == 215) {
				if (_shadowMovie) {
					if (isReady) {
						_shadowMovie.visible = true;
						_alphNum = _alphNum >= 0 ? _alphNum - 0.1 : 0;
						_shadowMovie.alpha = _alphNum;
					}else {
						_shadowMovie.visible = false;
					}
				}
				
			}else if (target == null) {
				return;
			}
			
			if (!isReady || !attackAble)
				return;
			
			if ((UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).getTargetIndex(target) == -1 || Point.distance(this.position,target.position) > this.maxAttackRange) {
				
				target = null;
				return;
			}
			
			attackShoot();
			
		}
		
		private var _lineTarget:Shape;
		private function lineTarget():void {
			if (elementType != DEFENCE_TOWER)
				return;
			if (!target) {
				if (_lineTarget) {
					
					removeChild(_lineTarget);
					_lineTarget = null;
					
				}
				return;
				
			}
			
			if (!_lineTarget) {
				_lineTarget = new Shape();
				_lineTarget.graphics.lineStyle(2, 0xFFD700, 1, false, LineScaleMode.VERTICAL,CapsStyle.NONE, JointStyle.MITER, 2);
				_lineTarget.graphics.lineTo(target.position.x - position.x, target.position.y - position.y);
				_lineTarget.graphics.endFill();
				addChild(_lineTarget);
			}else {
				
				removeChild(_lineTarget);
				_lineTarget = null;
				_lineTarget = new Shape();
				_lineTarget.graphics.lineStyle(2, 0xFFD700, 1, false, LineScaleMode.VERTICAL,CapsStyle.NONE, JointStyle.MITER, 2);
				_lineTarget.graphics.lineTo(target.position.x - position.x, target.position.y - position.y);
				_lineTarget.graphics.endFill();
				addChild(_lineTarget);
			}
		}
		
		private function startSkills():void {
			
			switch(_skills) {
				
				case 207:
					authority();
				break;
				
				case 208:
					inspire();
				break;
				
				case 209:
					barrier();
				break;
				
				case 210:
					repair();
				break;
				
				case 212:
					plusBlood();
				break;
				
				case 214:
					intensiveCare();
				break;
				
				case 215:
					maskPart();
				break;
			}
		}
		
		override public function clear():void 
		{
			super.clear();
			killSkills();
			killStopWork();
			if (_shadowMovie) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).effectLayer.removeChild(_shadowMovie);
				_shadowMovie = null;
			}
			
		}
		
		override public function elementWork(value:Boolean):void 
		{
			if (!isReady && id != "602") return;
			super.elementWork(value);
			
			if (_inspireTimer)
				value ? _inspireTimer.start() : _inspireTimer.stop();
			
			if (_barrierTimer)
				value ? _barrierTimer.start() : _barrierTimer.stop();
			
			if (_repairTimer)
				value ? _repairTimer.start() : _repairTimer.stop();
			
			if (_makeGlodTimer)
				value ? _makeGlodTimer.start() : _makeGlodTimer.stop();
			
			if (_plusBloodTimer)
				value ? _plusBloodTimer.start() : _plusBloodTimer.stop();
			
			if (_burstsTimer)
				value ? _burstsTimer.start() : _burstsTimer.stop();
				
			if (_authorityTimer)
				value ? _authorityTimer.start() : _authorityTimer.stop();
			
			if (viewFlag == 1) {
				if (viewUnit._kuangTimer)
					value ? viewUnit._kuangTimer.start() : viewUnit._kuangTimer.stop();
			}
		}
		/**
		 * 箭塔发射子弹攻击
		 */
		private function attackShoot():void {
			
			if (lastShoot < 0 || getTimer() - lastShoot > attackHZ) {
				_shootFlag = true;
				if (elementType == DEFENCE_TOWER) shoot();
			}
		}
		
		private var stopWorkTime:Timer;
		private var stopWorkFlag:Boolean = false;
		/**
		 * 箭塔停止工作
		 * @param	value  停止工作时间 秒数
		 */
		public function stopWork(value:Number = 3):void {
			
			if (!stopWorkFlag) {
				
				isReady = false;
				stopWorkTime = new Timer(int(value * 1000), 1);
				stopWorkTime.addEventListener(TimerEvent.TIMER, stopWorkTimeHandler);
				stopWorkTime.start();
				stopWorkFlag = true;
				
			}
		}
		
		private function stopWorkTimeHandler(event:TimerEvent):void {
			
			if (stopWorkFlag) {
				
				isReady = true;
				stopWorkTime.stop();
				stopWorkTime.removeEventListener(TimerEvent.TIMER, stopWorkTimeHandler);
				stopWorkTime = null;
				stopWorkFlag = false;
				removeFogMovie();
			}
			elementSleep(false);
		}
		
		private function killStopWork():void {
			
			if (stopWorkTime) {
				stopWorkTime.reset();
				stopWorkTime.removeEventListener(TimerEvent.TIMER, stopWorkTimeHandler);
				stopWorkTime = null;
			}
		}
		//技能 机关塔 207 =======================================================
		private var _authorityTimer:Timer;
		private function authority():void {
			
			_authorityTimer = new Timer(1000);
			_authorityTimer.addEventListener(TimerEvent.TIMER, authorityTimerHandler);
			_authorityTimer.start();
		}
		
		private function authorityTimerHandler(event:TimerEvent):void {
			if (!isReady) {
				killAuthority();
				return;
			}
			var _attackArr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).attackArr;
			var _len:int = GlobalVariable.RECT_WIDTH / 2;
			for each (var element:Element in _attackArr) {
				
				if (element.moveType == 404 || !element.isReady) continue;
				
				if (Point.distance(position, element.position) < _len) {
					if (viewFlag == 1)
						viewUnit.shootBullet();
					element.organDownLife(attack);
				}
				
			}
			_attackArr = null;
		}
		
		private function killAuthority():void {
			
			if (_authorityTimer) {
				_authorityTimer.reset();
				_authorityTimer.removeEventListener(TimerEvent.TIMER, authorityTimerHandler);
				_authorityTimer = null;
			}
		}
		//技能 鼓舞 208 =========================================================
		
		private var _inspireTimer:Timer;
		private function inspire():void {
			
			_inspireTimer = new Timer(5000);
			_inspireTimer.addEventListener(TimerEvent.TIMER, inspireTimerhandler);
			_inspireTimer.start();
			//if (_timerSum % 120 == 0)
				//inspireTimerhandler();
		}
		private var _inspireMovie:MovieClip;
		private var _inspireClass:Class;
		private var _inspireFlag:Boolean = true;
		private function inspireTimerhandler(event:TimerEvent = null):void {
			
			if (!isReady) return;
			if (_inspireFlag) {
				
				_inspireFlag = false;
				_inspireClass = ApplicationDomain.currentDomain.getDefinition("UpAttackMovie") as Class;
				_inspireMovie = new _inspireClass() as MovieClip;
				_inspireMovie.addFrameScript(_inspireMovie.totalFrames - 1, stopInspireMovie);
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).zeroLayer.addChild(_inspireMovie);
				_inspireMovie.x = position.x;
				_inspireMovie.y = position.y;
			}else {
				
				_inspireMovie.play();
			}
			
			var _inspireLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange * 1.42;
			var _towerArray:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			
			for each(var element:Element in _towerArray) {
				if (element.elementType == Towers.ORGAN_TOWER) continue;
				if (element != this && element.isReady && Point.distance(element.position, position) <= _inspireLen) {
					
					element.attack = element.mirrorAttack * (1 + _skillsPercent);
					element.showAttackIcon();
				}
			}
			
			_towerArray = null;
		}
		
		private function stopInspireMovie():void {
			
			if (!_inspireFlag)
				_inspireMovie.gotoAndStop(1);
		}
		
		private function killInspire():void {
			
			if (_inspireTimer) {
				
				_inspireTimer.reset();
				_inspireTimer.removeEventListener(TimerEvent.TIMER, inspireTimerhandler);
				_inspireTimer = null;
			}
			
			if (_inspireMovie) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).zeroLayer.removeChild(_inspireMovie);
				_inspireMovie = null;
				_inspireClass = null;
				_inspireFlag = true;
			}
			
			var _towerArray:Array =  (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			var _inspireLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange;
			
			for each(var element:Element in _towerArray) {
				
				if (element.isReady && element != this && Point.distance(position, element.position) <= _inspireLen) {
					
					element.attack = element.mirrorAttack;
					element.removeAttackIcon();
				}
			}
			
			_towerArray = null;
		}
		
		//技能 屏障 209============================================================
		
		private var _barrierTimer:Timer;
		private function barrier():void {
			
			_barrierTimer = new Timer(5000);
			_barrierTimer.addEventListener(TimerEvent.TIMER, barrierTimerhandler);
			_barrierTimer.start();
			//if (_timerSum % 120 == 0)
				//barrierTimerhandler();
		}
		private var _barrierMovie:MovieClip;
		private var _barrierClass:Class;
		private var _barrierFlag:Boolean = true;
		private function barrierTimerhandler(event:TimerEvent = null):void {
			
			if (!isReady) return;
			if (_barrierFlag) {
				_barrierFlag = false;
				_barrierClass = ApplicationDomain.currentDomain.getDefinition("UpDefenceMovie") as Class;
				_barrierMovie = new _barrierClass() as MovieClip;
				_barrierMovie.addFrameScript(_barrierMovie.totalFrames - 1, stopBarrierMovie);
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).zeroLayer.addChild(_barrierMovie);
				_barrierMovie.x = position.x;
				_barrierMovie.y = position.y;
			}else {
				_barrierMovie.play();
			}
			var barrierLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange * 1.42;
			var towerArray:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			
			for each(var element:Element in towerArray) {
				if (element.elementType == Towers.ORGAN_TOWER) continue;
				if (element.isReady &&element != this && Point.distance(element.position, position) <= barrierLen) {
					
					element.defense = element.mirrorDefence * (1 + _skillsPercent);
					element.showDefenceIcon();
				}
			}
			
			towerArray = null;
		}
		
		private function stopBarrierMovie():void {
			
			if (!_barrierFlag)
				_barrierMovie.gotoAndStop(1);
		}
		
		private function killBarrier():void {
			
			if (_barrierTimer) {
				
				_barrierTimer.reset();
				_barrierTimer.removeEventListener(TimerEvent.TIMER, barrierTimerhandler);
				_barrierTimer = null;
			}
			
			if (_barrierMovie) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).zeroLayer.removeChild(_barrierMovie);
				_barrierMovie = null;
				_barrierClass = null;
				_barrierFlag = true;
			}
			var _towerArray:Array =  (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			var _barrierLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange;
			
			for each(var element:Element in _towerArray) {
				
				if (element.isReady && element != this && Point.distance(position, element.position) <= _barrierLen) {
					
					element.defense = element.mirrorDefence;
					element.removeDefenceIcon();
				}
			}
			
			_towerArray = null;
		}
		
		//技能 修复 210==========================================================
		
		private var _repairTimer:Timer;
		
		private function repair():void {
			
			_repairTimer = new Timer(5000);
			_repairTimer.addEventListener(TimerEvent.TIMER, repairTimerhandler);
			_repairTimer.start();
			//if (_timerSum % 120 == 0)
				//repairTimerhandler();
		}
		
		private function repairTimerhandler(event:TimerEvent = null):void {
			
			var _repairLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange;
			var towerArray:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			
			for each(var element:Element in towerArray) {
				
				if ((element as Towers) != this && Point.distance(element.position, position) <= _repairLen && element.isReady == true) {
					
					backHP = mirrorBackHP + _skillsValue;
				}
			}
			
			towerArray = null;
		}
		
		private function killRepair():void {
			
			if (_repairTimer) {
				
				_repairTimer.removeEventListener(TimerEvent.TIMER, repairTimerhandler);
				_repairTimer.stop();
				_repairTimer = null;
				
			}
			
			var _repairLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange;
			var towerArray:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			
			for each(var element:Element in towerArray) {
				
				if ((element as Towers) != this && Point.distance(element.position, position) <= _repairLen && element.isReady == true) {
					
					backHP = mirrorBackHP;
				}
			}
			
			towerArray = null;
		}
		
		//技能 矿  211 =============================================================
		
		private var _makeGlodTimer:Timer;
		private var _makeGlodNum:int = 0;
		private var _makeGlodTime:int = 120;
		private var _makePaperNum:int = 1;
		override public function makeGlod():void 
		{
			makeGlodFlag = false;
			
			if (!_makeGlodTimer) {
				
				if (viewFlag == 1) {
					viewUnit.addEventListener(DynamicLoadOriginal.KAIKUANG_COMPLETE, makeGlodTimerComplete);
					viewUnit.createKuangGlod();
				}
				
				_makeGlodNum ++;
				_makePaperNum = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).orePlusPaperTime;
				_makeGlodTimer = new Timer(1000);
				_makeGlodTimer.addEventListener(TimerEvent.TIMER, makeGlodTimerHandler);
				_makeGlodTimer.start();
			}
			
		}
		
		private function makeGlodTimerHandler(event:TimerEvent = null):void {
			
			if (_makeGlodTimer.currentCount % _makePaperNum == 0) {
				
				if (viewFlag == 1) {
					viewUnit.filters = [];
				}
				if(OptionMainLayer._skillsButtonFlag)(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).addOrePaper(new OrePaper((UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).orePlusPaperSum, (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).oreCutPaperTime), position.x, position.y + GlobalVariable.RECT_HEIGHT / 2);
			}
			else if (_makeGlodTimer.currentCount % _makePaperNum == _makePaperNum - 2) {
				
				if (viewFlag == 1) {
					viewUnit.filters = [new ColorMatrixFilter([1, 0, 0, 0, 50, 0, 1, 0, 0, 50, 0, 0, 1, 0, 50, 0, 0, 0, 1, 0])];
				}
			}
			
			
		}
		
		private function makeGlodTimerComplete(event:Event):void {
			
			if (_makeGlodTimer) {
				
				_makeGlodTimer.reset();
				_makeGlodTimer.removeEventListener(TimerEvent.TIMER, makeGlodTimerHandler);
				_makeGlodTimer = null;
			}
			if (viewFlag == 1)
				viewUnit.removeEventListener(DynamicLoadOriginal.KAIKUANG_COMPLETE, makeGlodTimerComplete);
			makeGlodFlag = true;
			
			if (_makeGlodNum >= 5) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).removeElement(this);
			}
		}
		
		private function killOre():void{
			if(_makeGlodTimer){
				_makeGlodTimer.reset();
				_makeGlodTimer.removeEventListener(TimerEvent.TIMER, makeGlodTimerHandler);
				_makeGlodTimer = null;
			}
			
		}
		// 技能 加血 212 ===============================================
		
		private var _plusBloodTimer:Timer;
		
		private function plusBlood():void {
			
			_plusBloodTimer = new Timer(_skillsTime*1000);
			_plusBloodTimer.addEventListener(TimerEvent.TIMER, plusBloodTImerHandler);
			_plusBloodTimer.start();
		}
		private var _upBloodMovie:MovieClip;
		private var _upBloodMovieClass:Class;
		private var _upBloodMovieFlag:Boolean = true;
		private function plusBloodTImerHandler(event:TimerEvent = null):void {
			
			if (!isReady) return;
			if (_upBloodMovieFlag) {
				_upBloodMovieFlag = false;
				_upBloodMovieClass = ApplicationDomain.currentDomain.getDefinition("UpHpMovie") as Class;
				_upBloodMovie = new _upBloodMovieClass() as MovieClip;
				_upBloodMovie.addFrameScript(_upBloodMovie.totalFrames - 1, stopUpBloodMovie);
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).zeroLayer.addChild(_upBloodMovie);
				_upBloodMovie.x = position.x;
				_upBloodMovie.y = position.y;
				
			}else {
				
				if(_upBloodMovie)_upBloodMovie.play();
			}
			
			var _towerArray:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			var _towerLen:Number = GlobalVariable.RECT_WIDTH * _skillsRange * 1.42;
			for each(var element:Element in _towerArray) {
				if (element.elementType == Towers.ORGAN_TOWER) continue;
				if (element.isReady && element != this && Point.distance(position, element.position) <= _towerLen)
					element.latePlusHP(_skillsValue);
			}
			
			_towerArray = null;
		}
		
		private function stopUpBloodMovie():void {
			
			if(_upBloodMovie)_upBloodMovie.gotoAndStop(1);
		}
		
		private function killPlusBlood():void {
			
			if (_plusBloodTimer) {
				
				_plusBloodTimer.reset();
				_plusBloodTimer.removeEventListener(TimerEvent.TIMER, plusBloodTImerHandler);
				_plusBloodTimer = null;
				
			}
			
			if (_upBloodMovie) {
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).zeroLayer.removeChild(_upBloodMovie);
				_upBloodMovie = null;
				_upBloodMovieClass = null;
			}
		}
		//技能 213 新灼烧===========================================================
		
		private var _fireTimer:Timer;
		private var _fireTime:int;
		private var _fireFlag:Boolean = true;
		
		private function fireSkills():void {
			
			_fireTimer = new Timer(5000);
			_fireTimer.addEventListener(TimerEvent.TIMER, fireTimerHandler);
			_fireTimer.start();
		}
		
		private function fireTimerHandler(event:TimerEvent):void {
			
			var _attackArr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).attackArr;
			
			for each(var element:Element in _attackArr) {
				if (element.moveType == 404 || !element.isReady) continue;
				if (Point.distance(element.position, position) <= maxAttackRange) {
					element.hurtHp(skillsTime, skillsValue);
				}
			}
			
			_attackArr = null;
		}
		
		private function killFireSkills():void {
			
			if (_fireTimer) {
				
				_fireTimer.reset();
				_fireTimer.removeEventListener(TimerEvent.TIMER, fireTimerHandler);
				_fireTimer = null;
			}
		}
		
		//技能  214  加护甲 一次性加==========================================================
		private var _intensiveCareTimer:Timer;
		private function intensiveCare():void {
			
			_intensiveCareTimer = new Timer(5000, 1);
			_intensiveCareTimer.addEventListener(TimerEvent.TIMER_COMPLETE, intensiveCareTimerComplete);
			_intensiveCareTimer.start();
		}
		
		private function intensiveCareTimerComplete(event:TimerEvent):void {
			
			_intensiveCareTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, intensiveCareTimerComplete);
			_intensiveCareTimer.reset();
			_intensiveCareTimer = null;
			
			var _len:int = GlobalVariable.RECT_WIDTH * _skillsRange;
			var _towerArr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			
			for each(var element:Element in _towerArr) {
				
				if (Point.distance(element.position, position) <= _len) {
					element.plusArmor(_skillsValue);
				}
			}
			_towerArr = null;
		}
		
		private function killIntensiveCare():void {
			
			if (_intensiveCareTimer) {
				_intensiveCareTimer.reset();
				_intensiveCareTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, intensiveCareTimerComplete);
				_intensiveCareTimer = null;
			}
			
			var _len:int = GlobalVariable.RECT_WIDTH * _skillsRange;
			var _towerArr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).towerArr;
			
			for each(var element:Element in _towerArr) {
				
				if (Point.distance(element.position, position) <= _len) {
					element.armor = element.armor > _skillsValue ? element.armor - _skillsValue : 0;
				}
			}
			_towerArr = null;
		}
		
		// 技能 215 遮罩部分区域======================================================
		
		private function maskPart():void {
			
			var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("ShadowMovie") as Class;
			_shadowMovie = new _mClass() as MovieClip;
			(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).effectLayer.addChild(_shadowMovie);
			_shadowMovie.x = position.x - _shadowMovie.width / 2;
			_shadowMovie.y = position.y - _shadowMovie.height / 2;
			_mClass = null;
			//var _scaleNum:Number = maxAttackRange * 2 / _shadowMovie.width;
			//_shadowMovie.scaleX = _scaleNum;
			//_shadowMovie.scaleY = _scaleNum;
		}
		
		//付费技能 锁闭 效果=====================================================
		private var _lockTowerMovie:MovieClip;
		public function showLockTowerMovie():void {
			
			if (_lockTowerMovie == null) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("RingLockMovie") as Class;
				_lockTowerMovie = new _mClass() as MovieClip;
				_mClass = null;
				elementUpLayer.addChild(_lockTowerMovie);
				_lockTowerMovie.y = GlobalVariable.RECT_HEIGHT / 2;
			}
		}
		
		public function removeLockTowerMovie():void {
			
			if (_lockTowerMovie) {
				
				elementUpLayer.removeChild(_lockTowerMovie);
				_lockTowerMovie = null;
			}
		}
		
		//付费技能 桶盖  效果===========================================
		
		private var _tongGaiMovie:MovieClip;
		public function showTongGaiMovie():void {
			
			if (!_tongGaiMovie) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("HeroSkillsLockMovie") as Class;
				_tongGaiMovie = new _mClass() as MovieClip;
				_mClass = null;
				elementUpLayer.addChild(_tongGaiMovie);
				_tongGaiMovie.addFrameScript(_tongGaiMovie.totalFrames - 1, function():void { _tongGaiMovie.stop(); } );
				_tongGaiMovie.y = GlobalVariable.RECT_HEIGHT / 2;
			}
		}
		
		public function removeTongGaiMovie():void {
			
			if (_tongGaiMovie) {
				
				elementUpLayer.removeChild(_tongGaiMovie);
				_tongGaiMovie = null;
			}
		}
		
		
	}//end Towers

}