// // // // // // // // // // // // // // // // // // ///////////////////////
// XMLProxy.as
// Macromedia ActionScript Implementation of the Class XMLProxy
// Generated by Enterprise Architect
// Created on:      02-六月-2011 11:36:12
// Original author: LuXianli
// // // // // // // // // // // // // // // // // // ///////////////////////
package com.raytoon.cannonfodder.puremvc.model {
	import com.raytoon.cannonfodder.puremvc.controller.LoadOtherXmlCommand;
	import com.raytoon.cannonfodder.tools.json.JSON;
	import com.raytoon.cannonfodder.tools.net.ClientSocket;
	import com.raytoon.cannonfodder.tools.net.ClientSocketEvent;
	import com.raytoon.cannonfodder.tools.utils.ProxyNotificationNameList;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	
	import org.puremvc.as3.interfaces.IProxy;
	import org.puremvc.as3.patterns.proxy.Proxy;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 02-六月-2011 11:36:12
	 */
	public class XMLProxy extends Proxy implements IProxy
	{
		private var _server:ClientSocket;
		private var _xmlType:Boolean = true;
		private var _firstXML:Boolean = true;
		public static const NAME:String = "XMLProxy";

		// 配置文件引用存储 mapobj
		public function XMLProxy()
		{
			super(NAME);
			_server = ClientSocket.getInstance();
			_server.addEventListener(ClientSocketEvent.CONNECTED, _socketHandler);
			_server.addEventListener(ClientSocketEvent.DISCONNECTED, _socketHandler);
			_server.addEventListener(ClientSocketEvent.XML_DATA_OK, _socketHandler);
		}

		private function _socketHandler(event:ClientSocketEvent):void
		{
			switch (event.type)
			{
				case ClientSocketEvent.CONNECTED :
					if(_xmlType && _firstXML)
					{
						requestMainXml("TDMain.xml");
						facade.registerCommand(ProxyNotificationNameList.MAIN_XML_RECEIVED, LoadOtherXmlCommand);
					}
					break;
				case ClientSocketEvent.XML_DATA_OK :
					_resultsData(event.data);
					break;
			}
		}

		private function _resultsData(data:Object):void
		{
			try
			{
				if(_xmlType)
				{
					var xmlFile:XML = new XML(data);
					/*trace(xml.toXMLString());*/
					if(_firstXML)
					{
						recivedXmlHandler(xmlFile);
						_firstXML = false;
					}
					else
					{
						recivedXmlArrHandler(xmlFile);
					}
				}
			}
			catch (err:Error)
			{
				trace(err.toString());
			}
		}

		public function requestMainXml(xmlName:String):void
		{
			var serverJSON:Object = {"m":"getXML", "a":[xmlName]};
			var data:String = JSON.encode(serverJSON);
			_server.writeSend(data, ClientSocketEvent.XML_DATA_OK);
		}

		private function recivedXmlHandler(xmlFile:XML):void
		{
			XMLSource.setXMLSource("TDMain.xml", xmlFile);
			sendNotification(ProxyNotificationNameList.MAIN_XML_RECEIVED);
		}

		private var xmlNameArr:Array = new Array();
		private var xmlName:String;

		public function requestOtherXml(xmlArrName:Array):void
		{
			xmlName = xmlArrName.pop() as String;
			var serverJSON:Object = {"m":"getXML", "a":[xmlName]};
			var data:String = JSON.encode(serverJSON);
			_server.writeSend(data, ClientSocketEvent.XML_DATA_OK);
			xmlNameArr = xmlArrName;
		}

		private function recivedXmlArrHandler(xmlFile:XML):void
		{
			XMLSource.setXMLSource(xmlName, xmlFile);
			if(xmlName && xmlNameArr.length <= 0)
			{
				sendNotification(ProxyNotificationNameList.OTHER_XML_RECEIVED);
				_xmlType = false;
				_server.removeEventListener(ClientSocketEvent.XML_DATA_OK, _socketHandler);
				facade.removeProxy(XMLProxy.NAME);
			}
			else
			{
				requestOtherXml(xmlNameArr);
			}
		}
	}
	// end XMLProxy
}