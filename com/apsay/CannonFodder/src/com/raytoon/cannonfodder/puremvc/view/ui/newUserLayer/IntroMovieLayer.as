///////////////////////////////////////////////////////////
//  IntroMovieLayer.as
//  Macromedia ActionScript Implementation of the Class IntroMovieLayer
//  Generated by Enterprise Architect
//  Created on:      07-十二月-2011 17:20:13
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.newUserLayer
{
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	import com.raytoon.cannonfodder.tools.utils.UIClass;
	import flash.display.Loader;
	import flash.display.LoaderInfo;
	import flash.display.MovieClip;
	import flash.display.SimpleButton;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.MouseEvent;
	import flash.events.SecurityErrorEvent;
	import flash.events.TimerEvent;
	import flash.net.URLRequest;
	import flash.system.ApplicationDomain;
	import flash.system.LoaderContext;
	import flash.utils.Timer;
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 07-十二月-2011 17:20:13
	 */
	public class IntroMovieLayer extends Sprite
	{
		public function IntroMovieLayer(){

		}
		private var _introMovie:MovieClip;
		private var _introMovieClass:Class;
		private var load:Loader;
		private var _className:String = "IntroMovie";
		private var _loadMovie:MovieClip;
		/**
		 * 显示 开场动画
		 */
		public function showIntroMovie():void {
			
			if (ApplicationDomain.currentDomain.hasDefinition(_className)) {
				
				_introMovieClass = ApplicationDomain.currentDomain.getDefinition(_className) as Class;
				_introMovie = new _introMovieClass() as MovieClip;
				addChild(_introMovie);
				_introMovieClass = null;
				(_introMovie["moviePrev"] as SimpleButton).addEventListener(MouseEvent.CLICK, moviePrevClick);
				(_introMovie["movieNext"] as SimpleButton).addEventListener(MouseEvent.CLICK, movieNextClick);
				//_introMovie.addEventListener(MouseEvent.CLICK, movieNextClick);
				(_introMovie["movieOff"] as SimpleButton).addEventListener(MouseEvent.CLICK, movieOffClick);
				addEventListener(Event.ENTER_FRAME, introMovieHandler);
				changeBackgroundSound();
			}else {
				
				var _mClass:Class  = ApplicationDomain.currentDomain.getDefinition(UIClass.ANIMATION_INSIDE_LOADING) as Class;
				_loadMovie = new _mClass() as MovieClip;
				addChild(_loadMovie);
				_mClass = null;
				
				load = new Loader();
				load.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete);
				load.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadIoError);
				load.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
				
//				var loadUrl:String = ConstPath.SERVER_ROOT + ConstPath.SWF_PATH + className + ConstPath.SWF_SUFFIX;
				var loadUrl:String = ConstPath.MATERIAL_PATH +  ConstPath.SWF_PATH + _className + ConstPath.SWF_SUFFIX;
				
				var context:LoaderContext = new LoaderContext(); //加载到指定共享域
				context.applicationDomain = ApplicationDomain.currentDomain;
//				context.securityDomain = SecurityDomain.currentDomain;
				
				load.load(new URLRequest(loadUrl),context);
			}
		}
		
		
		
		private function loadComplete(event:Event):void {
			
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
			removeChild(_loadMovie);
			_loadMovie = null;
			_introMovieClass = ApplicationDomain.currentDomain.getDefinition(_className) as Class;
			_introMovie = new _introMovieClass() as MovieClip;
			addChild(_introMovie);
			(_introMovie["moviePrev"] as SimpleButton).addEventListener(MouseEvent.CLICK, moviePrevClick);
			(_introMovie["movieNext"] as SimpleButton).addEventListener(MouseEvent.CLICK, movieNextClick);
			(_introMovie["movieOff"] as SimpleButton).addEventListener(MouseEvent.CLICK, movieOffClick);
			addEventListener(Event.ENTER_FRAME, introMovieHandler);
			changeBackgroundSound();
		}
		
		private function loadIoError(event:IOErrorEvent):void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
		}
		
		private function loadSecurityError(event:SecurityErrorEvent):void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
		}
		
		private var _labelNum:int = 0;
		private var _labelArr:Array = ["label0","label1", "label2", "label3", "label4", "label5", "label6", "label7", "label8", "label9", "label10", "label11", "label12", "label13", "label14", "label15", "label16", "label17", "label18", "label19"];
		private function introMovieHandler(event:Event):void {
			
			if (!_introMovie) {
				removeEventListener(Event.ENTER_FRAME, introMovieHandler);
				return;
			}
			if (_introMovie.currentLabel == "label1" || _introMovie.currentLabel == "label3" || _introMovie.currentLabel == "label5" || _introMovie.currentLabel == "label7" || _introMovie.currentLabel == "label9" || _introMovie.currentLabel == "label11" || _introMovie.currentLabel == "label13" || _introMovie.currentLabel == "label15" || _introMovie.currentLabel == "label17" || _introMovie.currentLabel == "label19") {
				
				_labelNum = _labelArr.indexOf(_introMovie.currentLabel);
				removeEventListener(Event.ENTER_FRAME, introMovieHandler);
				_introMovie.stop();
				
				if (_playTimer) {
					_playTimer.reset();
					_playTimer.start();
				}else {
					_playTimer = new Timer(5000, 1);
					_playTimer.addEventListener(TimerEvent.TIMER_COMPLETE, movieNextClick);
					_playTimer.start();
				}
				
				if (_introMovie.currentLabel == "label19") introMovieOff();
			}
		}
		/**
		 * 播放上一段影片
		 * @param	event
		 */
		private function moviePrevClick(...args):void {
			
			
			
			if (_labelNum % 2 == 1) {
				
				if (_labelNum - 3 >= 0) {
					_labelNum -= 3;
					if(_introMovie)_introMovie.gotoAndPlay(_labelArr[_labelNum] as String);
					if (!hasEventListener(Event.ENTER_FRAME))
						addEventListener(Event.ENTER_FRAME, introMovieHandler);
				}
			}else {
				
				if (_labelNum - 2 >= 0) {
					_labelNum -= 2;
					if(_introMovie)_introMovie.gotoAndPlay(_labelArr[_labelNum] as String);
					if (!hasEventListener(Event.ENTER_FRAME))
						addEventListener(Event.ENTER_FRAME, introMovieHandler);
				}
			}
			
			changeBackgroundSound();
		}
		private var _playTimer:Timer;
		/**
		 * 播放下一段影片
		 * @param	event
		 */
		private function movieNextClick(...args):void {
			
			if (_labelNum % 2 == 1) {
				
				if (_labelNum + 1 <= 19) {
					_labelNum += 1;
					if(_introMovie)_introMovie.gotoAndPlay(_labelArr[_labelNum] as String);
					if (!hasEventListener(Event.ENTER_FRAME))
						addEventListener(Event.ENTER_FRAME, introMovieHandler);
				}else {
					dispatchEvent(new Event(EventNameList.INTRO_MOVIE_PLAY_COMPLETE));
				}
			}else {
				
				if (_labelNum + 2 <= 18) {
					_labelNum += 2;
					if(_introMovie)_introMovie.gotoAndPlay(_labelArr[_labelNum] as String);
					if (!hasEventListener(Event.ENTER_FRAME))
						addEventListener(Event.ENTER_FRAME, introMovieHandler);
				}else {
					dispatchEvent(new Event(EventNameList.INTRO_MOVIE_PLAY_COMPLETE));
				}
				
			}
			changeBackgroundSound();
			if (_playTimer) {
				_playTimer.reset();
				_playTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, movieNextClick);
				_playTimer = null;
			}
		}
		/**
		 * 停止并跳过影片播放
		 * @param	event
		 */
		private function movieOffClick(... args):void {
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).clearMusic();
			(UIMain.getInstance(UIMain.NAME) as UIMain).removeIntroMovie();
			
		}
		/**
		 * 计时关闭开场动画
		 */
		private function introMovieOff():void {
			
			if (_playTimer) {
				_playTimer.reset();
				_playTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, movieNextClick);
				_playTimer.delay = 5000;
				_playTimer.addEventListener(TimerEvent.TIMER_COMPLETE, movieOffClick);
				_playTimer.start();
			}
			else {
				
				_playTimer = new Timer(5000, 1);
				_playTimer.addEventListener(TimerEvent.TIMER_COMPLETE, movieOffClick);
				_playTimer.start();
			}
		}
		private var _bgSoundName:String = "";
		/**
		 * 改变背景音乐
		 */
		private function changeBackgroundSound():void {
			
			if (_labelNum >= 0 && _labelNum <= 7) {
				
				if (_bgSoundName != "Demo1") {
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playMusic("Demo1");
				}
			}
			else if (_labelNum >= 8 && _labelNum <= 15) {
				
				if (_bgSoundName != "Demo2") {
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playMusic("Demo2");
				}
			}
			else if (_labelNum >= 16 && _labelNum <= 17) {
				
				if (_bgSoundName != "Demo3") {
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playMusic("Demo3");
				}
			}
			else {
				
				if (_bgSoundName != "Demo4") {
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playMusic("Demo4",1,0);
				}
			}
			
			if (_labelNum == 4) {
				(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound("DiQiuSound");
			}
			else if (_labelNum == 6) {
				(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound("CangYingSound",1,3);
			}
			else if (_labelNum == 8) {
				(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).clearSoundAll();
			}
		}
		
		/**
		 * 清理显示元件
		 */
		public function clear():void {
			
			if (hasEventListener(Event.ENTER_FRAME))
				removeEventListener(Event.ENTER_FRAME, introMovieHandler);
			if (_introMovie) {
				(_introMovie["moviePrev"] as SimpleButton).removeEventListener(MouseEvent.CLICK, moviePrevClick);
				(_introMovie["movieNext"] as SimpleButton).removeEventListener(MouseEvent.CLICK, movieNextClick);
				(_introMovie["movieOff"] as SimpleButton).removeEventListener(MouseEvent.CLICK, movieOffClick);
				
				removeChild(_introMovie);
				_introMovie.gotoAndStop(1);
				_introMovie = null;
			}
			if (_playTimer) {
				
				_playTimer.reset();
				_playTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, movieNextClick);
				_playTimer = null;
			}
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).clear();
			if (load) {
				
				if (load.content) {
					try {
						load.unload();
					}catch(e:*){}
				}else {
					try {
						load.unloadAndStop();
					}catch(e:*){}
				}
			}
		}
	}//end IntroMovieLayer

}