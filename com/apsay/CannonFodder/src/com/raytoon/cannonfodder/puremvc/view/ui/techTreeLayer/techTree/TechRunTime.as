// // ///////////////////////////////////////////////////////
// TechRunTime.as
// Macromedia ActionScript Implementation of the Class TechRunTime
// Generated by Enterprise Architect
// Created on:      15-九月-2011 15:31:33
// Original author: LuXianli
// // ///////////////////////////////////////////////////////
package com.raytoon.cannonfodder.puremvc.view.ui.techTreeLayer.techTree {
	import com.raytoon.cannonfodder.puremvc.model.vo.CannonFodderVO;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.puremvc.view.ui.techTreeLayer.TechTreeLayer;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.utils.UICommand;
	import com.raytoon.cannonfodder.tools.utils.UICreate;
	import com.raytoon.cannonfodder.tools.utils.UIName;
	import com.raytoon.cannonfodder.tools.utils.UITransition;
	import com.raytoon.cannonfodder.tools.utils.UIXML;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;

	import flash.display.MovieClip;
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.utils.Timer;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 15-九月-2011 15:31:33
	 */
	public dynamic class TechRunTime extends MovieClip {
		private var _techTimer : Timer;
		private var _techType : String;
		private var _type : String;
		private var _id : int;
		private var _flag : int;
		private var _startTime : Number;
		private var _level : int;
		private var _techTime : Number;
		private var _partTime : Number;
		private var _techClass : Class;
		private var _techMc : MovieClip;
		private var _nowFrame : int;
		private var _techMaskClass : Class;
		private var _techMaskMc : MovieClip;
		private var _techTimeRunClass : Class;
		private var _techTimeRunMc : MovieClip;
		private var _nextTechArray : Array = [];
		private var _position : Point;

		public function TechRunTime(techType : String, type : String, id : int, flag : int, startTime : Number, level : int) {
			_techType = techType;
			_type = type;
			_id = id;
			_flag = flag;
			_startTime = startTime;
			_level = level;
			var _techXmlList : XMLList = XMLSource.getXMLSource(techType).tech.techTree.(@id == id);
			var _techIconName : String = String(_techXmlList.iconName);
			var _tID : int = int(_techXmlList.enableTech);
			if (techType == "SoldierTechTree.xml") {
				_techTime = Number(XMLSource.getXMLSource("SoldierLevelInfo.xml").soldierLevel.(@id == _tID).level.(@grade == level + 1).techTime) * 60000;
			} else {
				_techTime = Number(XMLSource.getXMLSource("TowerLevelInfo.xml").towerType.towerLevel.(@id == _tID).level.(@grade == level + 1).techTime) * 60000;
			}
			_partTime = TechTreeLayer.SERVER_NOW_TIME - startTime - _techTime;

			if (_partTime < 0) {
				_techClass = UICommand.getClass(_techIconName);
				_techMc = new _techClass() as MovieClip;
				addChild(_techMc);
				_techClass = null;
				_techTimeRunClass = UICommand.getClass("TechTreeTimeMovieClip");
				_techTimeRunMc = new _techTimeRunClass() as MovieClip;
				addChild(_techTimeRunMc);
				_techTimeRunClass = null;
				_techTimeRunMc.x = GlobalVariable.RECT_WIDTH / 2;
				_techTimeRunMc.y = GlobalVariable.RECT_HEIGHT / 2;
				_nowFrame = Number((_techTime - _partTime) / _techTime) * 60;
				_techTimeRunMc.gotoAndStop(_nowFrame);
				_techTimeRunMc.addFrameScript(59, techTImeRunComplete);
				_techTimeRunMc.addFrameScript(_techTimeRunMc.totalFrames - 1, techTImeRunComplete);
				_techMaskClass = UICommand.getClass("TechTreeTimeMask");
				_techMaskMc = new _techMaskClass() as MovieClip;
				addChild(_techMaskMc);
				_techMaskClass = null;
				_techTimeRunMc.mask = _techMaskMc;

				_partTime *= -1;
				_techTimer = new Timer(1000, int(Math.floor(_partTime / 1000)));
				_techTimer.addEventListener(TimerEvent.TIMER, techTimerHandler);
				_techTimer.addEventListener(TimerEvent.TIMER_COMPLETE, techTimerComplete);
				_techTimer.start();
				techTimerHandler();
			} else {
				studyTechComplete();
			}
		}

		public function get position() : Point {
			return _position;
		}

		public function set position(value : Point) : void {
			_position = value;
		}

		public function get nextTechArray() : Array {
			return _nextTechArray;
		}

		public function set nextTechArray(value : Array) : void {
			_nextTechArray = value;
		}

		private function techTImeRunComplete() : void {
			if (_techTimeRunMc) _techTimeRunMc.gotoAndPlay(61);
			if (_techTimer) {
				_techTimer.reset();
				_techTimer.removeEventListener(TimerEvent.TIMER, techTimerHandler);
				_techTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, techTimerComplete);
				_techTimer = null;
			}

			if (_techTimeRunMc) {
				_techTimeRunMc.gotoAndStop(1);
				removeChild(_techTimeRunMc);
				_techTimeRunMc = null;
			}
			studyTechComplete();
		}

		private var _timeTxtFlag : Boolean = false;

		public function set timeTxtFlag(value : Boolean) : void {
			_timeTxtFlag = value;
		}

		public function get timeTxtFlag() : Boolean {
			return _timeTxtFlag;
		}

		// 格式化
		private function ConvertTime(_timeNum : int) : String {
			return ( pad(Math.abs(int(_timeNum / 1000 / 3600 % 24)).toString(), 2) + ":" + pad(Math.abs(int(_timeNum / 1000 / 60 % 60)).toString(), 2) + ":" + pad(Math.abs(int(_timeNum / 1000 % 60)).toString(), 2) + "");
		}

		// 补0
		private function pad(num : String, n : int) : String {
			if ((num + "").length >= n) {
				return num;
			}
			return pad("0" + num, n);
		}

		/**
		 * 控制CD动画
		 * @param	event
		 */
		private function techTimerHandler(event : TimerEvent = null) : void {
			_partTime = _partTime - 1000 > 0 ? _partTime - 1000 : 0;
			_nowFrame = Number((_techTime - _partTime) / _techTime) * 60;
			_techTimeRunMc.gotoAndStop(_nowFrame);

			if (_timeTxtFlag) {
				(UICommand.t.ui[UIName.UI_TECH] as Object).info.upgrading.langInfo.text = String(UIXML.uiXML.tech.info4[0]) + "[" + ConvertTime(_partTime) + "]";
			}
		}

		private function techTimerComplete(event : TimerEvent) : void {
			_techTimer.reset();
			_techTimer.removeEventListener(TimerEvent.TIMER, techTimerHandler);
			_techTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, techTimerComplete);
			_techTimer = null;
			studyTechComplete();
		}

		private var _studyFlag : Boolean = true;

		/**
		 * 科技研发完毕
		 * @param	techType
		 * @param	type
		 * @param	id
		 * @param	flag
		 * @param	startTime
		 */
		private function studyTechComplete() : void {
			if (_studyFlag) {
				_studyFlag = false;
				UITransition.techInfoSwitch();
				if (_techType == "SoldierTechTree.xml") {
					(UIMain.getInstance(TechTreeLayer.NAME) as TechTreeLayer)._soldierTechTree.addTech({"type":_type, "id":_id, "flag":3, "startTime":_startTime, "level":_level + 1});
					UICreate.getTechInfo(TechTreeLayer.SOLDIER_TECH_TREE, {id:_id, flag:3, level:(_level + 1), type:_type});
				} else {
					(UIMain.getInstance(TechTreeLayer.NAME) as TechTreeLayer)._towerTechTree.addTech({"type":_type, "id":_id, "flag":3, "startTime":_startTime, "level":_level + 1});
					UICreate.getTechInfo(TechTreeLayer.TOWER_TECH_TREE, {id:_id, flag:3, level:(_level + 1), type:_type});
				}

				updateTechInfo({"type":_type, "id":_id, "flag":3, "startTime":_startTime, "level":_level + 1});
			}
		}

		/**
		 * 更新科技树数据
		 * @param	obj
		 */
		private function updateTechInfo(obj : Object) : void {
			if (_techType == "SoldierTechTree.xml") {
				var _soldier : Array = CannonFodderVO.techTreeInfo.soldierTech as Array;

				for (var i : int = 0; i < _soldier.length; i++ ) {
					if (_soldier[i].id == obj.id) _soldier[i] = obj;
				}

				CannonFodderVO.techTreeInfo.soldierTech = _soldier;
			} else {
				var _tower : Array = CannonFodderVO.techTreeInfo.towerTech as Array;

				for (var j : int = 0; j < _tower.length; j++ ) {
					if (_tower[j].id == obj.id) _tower[j] = obj;
				}

				CannonFodderVO.techTreeInfo.towerTech = _tower;
			}
		}

		public function clear() : void {
			if (_techTimer) {
				_techTimer.reset();
				_techTimer.removeEventListener(TimerEvent.TIMER, techTimerHandler);
				_techTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, techTimerComplete);
				_techTimer = null;
			}

			if (_techMaskMc) {
				removeChild(_techMaskMc);
				_techMaskMc = null;
			}
			if (_techTimeRunMc) {
				removeChild(_techTimeRunMc);
				_techTimeRunMc = null;
			}
			if (_techMc) {
				removeChild(_techMc);
				_techMc = null;
			}
		}
	}
	// end TechRunTime
}