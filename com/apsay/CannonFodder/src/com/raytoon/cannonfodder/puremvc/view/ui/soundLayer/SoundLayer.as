///////////////////////////////////////////////////////////
//  SoundLayer.as
//  Macromedia ActionScript Implementation of the Class SoundLayer
//  Generated by Enterprise Architect
//  Created on:      10-十月-2011 16:41:42
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.soundLayer
{
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.tools.utils.SoundName;
	import flash.events.Event;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.media.SoundTransform;
	import flash.system.ApplicationDomain;
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 10-十月-2011 16:41:42
	 */
	public class SoundLayer
	{
		public static const NAME:String = "SoundLayer";
		private static var _instance:SoundLayer;
		public static function getInstance():SoundLayer {
			
			if (!_instance) {
				_instance = new SoundLayer();
				
			}
			return _instance;
		}
		
		public static var SOUND_VOL:Number = 1;
		private var _soundTransForm:SoundTransform;
		private var _soundAll:Array;
		public function SoundLayer(){
			UIMain.setInstance(NAME, this);
			_instance = this;
			_soundTransForm = new SoundTransform();
			_soundAll = new Array();
		}
		/**
		 * 改变音效、音乐音量大小
		 * @param	vol  (0 ---- 1)
		 */
		public function changeVol(vol:Number = 1):void {
			
			if (_soundTransForm)
				_soundTransForm.volume = vol;
			
			for each (var element:ElementSound in _soundAll) {
				element.changeVol(vol);
			}
		}
		
		private var _soundName:String;
		private var _soundVol:Number = 1;
		//private var _soundChannel:SoundChannel;
		private var _elementSoundNum:int = 0;
		/**
		 * 播放指定音效
		 * @param	soundName
		 * @param	soundVol
		 */
		public function playSound(soundName:String,soundVol:Number = 1,playSum:int = 0):void {
			
			if (!_soundOnAndOff)
				return;
			_elementSoundNum ++;
			var _element:ElementSound = new ElementSound(soundName, soundVol,playSum);
			_element.id = _elementSoundNum;
			_soundAll.push(_element);
			_element = null;
		}
		/**
		 * 清理指定音效
		 * @param	element
		 */
		public function clearSound(element:ElementSound):void {
			
			element.clear();
			for (var i:int = 0; i < _soundAll.length; i ++ ) {
				if (element.id == (_soundAll[i] as ElementSound).id) {
					_soundAll.splice(i, 1);
					element = null;
					return;
				}
				
			}
			
		}
		/**
		 * 清楚所有音效
		 */
		public function clearSoundAll():void {
			
			for each(var element:ElementSound in _soundAll) {
				
				element.clear();
				element = null;
			}
			_soundAll = [];
		}
		
		private var _musicName:String;
		private var _musicVol:Number = 1;
		private var _musicChannel:SoundChannel;
		private var _music:Sound;
		private var _musiClass:Class;
		private var _musicPosition:Number = 0;
		private var _nowMusicName:String;
		/**
		 * 播放指定音乐
		 * @param	musicName
		 * @param	musicVol
		 * @param	playSum
		 */
		public function playMusic(musicName:String, musicVol:Number = 1,playSum:int = 100):void {
			
			if (_musicName != musicName)_musicName = musicName;
			
			if (!_musicOnAndOff)
				return;
			
			if (_musicChannel == null) {
				
				_musiClass = ApplicationDomain.currentDomain.getDefinition(musicName) as Class;
				_music = new _musiClass() as Sound;
				_musicChannel = _music.play(0, playSum);
				_musicChannel.soundTransform = _soundTransForm;
				_musiClass = null;
				_music = null;
			}else {
				
				if (musicName == _nowMusicName)return;
				
				_musicChannel.stop();
				_musicChannel = null;
				_musiClass = ApplicationDomain.currentDomain.getDefinition(musicName) as Class;
				_music = new _musiClass() as Sound;
				_musicChannel = _music.play(0, playSum);
				_musicChannel.soundTransform = _soundTransForm;
				_musiClass = null;
				_music = null;
				
			}
			_nowMusicName = musicName;
		}
		/**
		 * 清楚背景音乐
		 */
		public function clearMusic():void {
			
			if (_musicChannel) {
				_musicChannel.stop();
				_musicChannel = null;
				_nowMusicName = "";
			}
		}
		/**
		 * 清空所有声音
		 */
		public function clear():void {
			
			clearMusic();
			clearSoundAll();
		}
		/**
		 * 暂停开始音效音乐
		 * @param	flag
		 */
		public function pasueAndStart(flag:Boolean = true):void {
			
			if (flag) {
				if (_musicChannel == null && _musicName != null && _musicOnAndOff) {
					_musiClass = ApplicationDomain.currentDomain.getDefinition(_musicName) as Class;
					if(_musiClass){
						_music = new _musiClass() as Sound;
						if(_music)_musicChannel = _music.play(_musicPosition);
						_music = null;
						_musiClass = null;
					}
						
				}
			}else {
				if (_musicChannel) {
					
					_musicPosition = _musicChannel.position;
					_musicChannel.stop();
					_musicChannel = null;
				}else {
					_musicPosition = 0;
				}
				
			}
			if (!_soundOnAndOff) return;
			for each(var element:ElementSound in _soundAll) {
				element.pasueAndStart(flag);
			}
		}
		
		private var _soundOnAndOff:Boolean = true;
		/**
		 * 开关音效
		 */
		public function set soundOnAndOff(value:Boolean):void {
			
			if (_soundOnAndOff == value)
				return;
			else
				_soundOnAndOff = value;
			if (!value)
				clearSoundAll();
		}
		private var _musicOnAndOff:Boolean = true;
		/**
		 * 开关音乐
		 */
		public function set musicOnAndOff(value:Boolean):void {
			
			if (_musicOnAndOff == value)
				return;
			else
				_musicOnAndOff = value;
			if (!value) {
				clearMusic();
			}else {
				if (_musicName)
					playMusic(_musicName);
			}
		}
	}//end SoundLayer

}