///////////////////////////////////////////////////////////
//  Element.as
//  Macromedia ActionScript Implementation of the Class Element
//  Generated by Enterprise Architect
//  Created on:      22-六月-2011 14:23:44
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element
{
	import com.greensock.plugins.ColorMatrixFilterPlugin;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.OptionMainLayer;
	import com.raytoon.cannonfodder.tools.ArticleBlood;
	import com.raytoon.cannonfodder.tools.BaseSprite;
	import com.raytoon.cannonfodder.tools.load.DynamicLoadOriginal;
	import com.raytoon.cannonfodder.tools.load.ElementDead;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.utils.UICommand;
	import com.raytoon.cannonfodder.tools.utils.UICreate;
	import flash.display.DisplayObject;
	import flash.display.MovieClip;
	import flash.filters.ColorMatrixFilter;
	import flash.geom.ColorTransform;
	import flash.system.ApplicationDomain;
	
	import flash.display.Sprite;
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.utils.Timer;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 22-六月-2011 14:23:44
	 */
	public class Element extends BaseSprite
	{
		//开始时间
		private var _startTime:int;
		public function set startTime(value:int):void {
			_startTime = value;
		}
		public function get startTime():int {
			return _startTime;
		}
		//单位射击音效
		private var _shootSound:String = "";
		public function set shootSound(value:String):void {
			_shootSound = value;
		}
		public function get shootSound():String {
			return _shootSound;
		}
		//单位被攻击音效
		private var _attackedSound:String = "";
		public function set attackedSound(value:String):void {
			_attackedSound = value;
		}
		public function get attackedSound():String {
			return _attackedSound;
		}
		//单位死亡音效
		private var _deathSound:String = "";
		public function set deathSound(value:String):void {
			_deathSound = value;
		}
		public function get deathSound():String {
			return _deathSound;
		}
		//单位技能音效
		private var _skillSound:String = "";
		public function set skillSound(value:String):void {
			_skillSound = value;
		}
		public function get skillSound():String {
			return _skillSound;
		}
		//单位进场音效
		private var _goInSound:String = "";
		public function set goInSound(value:String):void {
			_goInSound = value;
		}
		public function get goInSound():String {
			return _goInSound;
		}
		//配置文件编号
		private var _id:String;
		public function set id(value:String):void {
			_id = value;
		}
		public function get id():String {
			return _id;
		}
		//单位存储编号
		private var _unitId:String;
		public function set unitId(value:String):void {
			_unitId = value;
		}
		public function get unitId():String {
			return _unitId;
		}
		//单位名字
		private var _unitName:String;
		public function set unitName(value:String):void {
			_unitName = value;
		}
		public function get unitName():String {
			return _unitName;
		}
		//单位所占手纸数
		private var _paper:int = 0;
		public function set paper(value:int):void {
			_paper = value;
		}
		public function get paper():int {
			return _paper;
		}
		//单位所在层
		private var _row:int = 0;
		public function set row(value:int):void {
			_row = value;
		}
		public function get row():int {
			return _row;
		}
		//单位横向位置
		private var _num:int = 0;
		public function set num(value:int):void {
			_num = value;
		}
		public function get num():int {
			return _num;
		}
		//单位类型属性
		private var _elementType:String;
		public function set elementType(value:String):void {
			_elementType = value;
		}
		public function get elementType():String {
			return _elementType;
		}
		//单位等级
		private var _elementLevel:int = 1;
		public function set elementLevel(value:int):void {
			_elementLevel = value;
		}
		public function get elementLevel():int {
			return _elementLevel;
		}
		//单位移动速度
		private var _elementSpeed:Number = 0;
		public function elementSpeed(value:Number):void {
			_elementSpeed = value;
		}
		//单位占用人口
		private var _peopleSum:int = 1;
		public function set peopleSum(value:int):void {
			_peopleSum = value;
		}
		public function get peopleSum():int {
			return _peopleSum;
		}
		//单位行走数组
		private var _runArray:Array = [];
		public function set runArray(value:Array):void {
			_runArray = value;
		}
		public function get runArray():Array {
			return _runArray;
		}
		//单位步进数组
		private var _runSiteArray:Array = [];
		public function set runSiteArray(value:Array):void {
			
			_runSiteArray = value;
		}
		
		public function get runSiteArray():Array {
			return _runSiteArray;
		}
		//刷新单位行进点
		public function refreshRunSite(value:int):void{}
		//英雄、士兵移动类型 
		private var _moveType:int = 0;
		public function set moveType(value:int):void {
			_moveType = value;
		}
		public function get moveType():int {
			return _moveType;
		}
		//单位总血量
		private var _lifeHP:int = 100;
		private var lifeHpFlag:int = 0;
		public function set lifeHP(value:int):void {
			_lifeHP = value;
			
			if (lifeHpFlag == 0) {
				_mirrorHP = value;
				lifeHpFlag = 1;
			}
		}
		public function get lifeHP():int {
			return _lifeHP;
		}
		//单位备用总血量存储
		private var _mirrorHP:int = 100;
		public function set mirrorHP(value:int):void {
			_mirrorHP = value;
		}
		public function get mirrorHP():int {
			return _mirrorHP;
		}
		//单位剩余血量百分比
		public function get percentHp():Number {
			
			return Number(_lifeHP / _mirrorHP);
		}
		//单位回血值
		private var _backHP:int = 10;
		private var mirrorBackHPFlag:int = 0;
		public function set backHP(value:int):void {
			_backHP = value;
			if (mirrorBackHPFlag == 0) {
				_mirrorBackHP = value;
				mirrorBackHPFlag = 1;
			}
		}
		public function get backHP():int {
			return _backHP;
		}
		//单位回血值备用存储
		private var _mirrorBackHP:int = 10;
		public function set mirrorBackHP(value:int):void {
			_mirrorBackHP = value;
		}
		public function get mirrorBackHP():int {
			return _mirrorBackHP;
		}
		//单位回血间隔时间
		private var _backHPTime:int = 1000;
		private var backHpTimeFlag:int = 0;
		public function set backHPTime(value:int):void {
			_backHPTime = value * 1000;
			
			if (backHpTimeFlag == 0) {
				_mirrorBackHpTime = value;
				backHpTimeFlag = 1;
			}
		}
		public function get backHPTime():int {
			return _backHPTime;
		}
		//单位备用回血速度存储值
		private var _mirrorBackHpTime:int = 10000;
		public function set mirrorBackHpTime(value:int):void {
			_mirrorBackHpTime = value;
		}
		public function get mirrorBackHpTime():int {
			return _mirrorBackHpTime;
		}
		// 护甲
		private var _armor:int = 10;
		private var armorFlag:int = 0;
		public function set armor(value:int):void {
			_armor = value;
			
			if (armorFlag == 0) {
				_mirrorArmor = value;
				armorFlag = 1;
			}
		}
		public function get armor():int {
			return _armor;
		}
		//单位备用护甲值存储
		private var _mirrorArmor:int = 10;
		public function set mirrorArmor(value:int):void {
			_mirrorArmor = value;
		}
		public function get mirrorArmor():int {
			return _mirrorArmor;
		}
		//防御
		private var _defense:int = 10;
		private var defenceFlag:int = 0;
		public function set defense(value:int):void {
			_defense = value;
			
			if (defenceFlag == 0) {
				_mirrorDefence = value;
				defenceFlag = 1;
			}
			
		}
		public function get defense():int {
			return _defense;
		}
		//单位备用防御值存储
		private var _mirrorDefence:int = 10;
		public function set mirrorDefence(value:int):void {
			_mirrorDefence = value;
		}
		public function get mirrorDefence():int {
			return _mirrorDefence;
		}
		//攻击力
		public var shootSum:int = 0;//攻击计数
		private var _attack:int = 10;
		private var attackFlag:int = 0;
		public function set attack(value:int):void {
			_attack = value;
			
			if (attackFlag == 0) {
				_mirrorAttack = value;
				attackFlag = 1;
			}
		}
		public function get attack():int {
			return _attack;
		}
		//单位备用攻击力值存储
		private var _mirrorAttack:int = 10;
		public function set mirrorAttack(value:int):void {
			_mirrorAttack = value;
		}
		public function get mirrorAttack():int {
			return _mirrorAttack;
		}
		//最短攻击距离
		private var _minAttackRange:Number = 0;
		public function set minAttackRange(value:Number):void {
			_minAttackRange = value * GlobalVariable.RECT_WIDTH;
		}
		public function get minAttackRange():Number {
			return _minAttackRange;
		}
		//最长攻击距离
		private var _maxAttackRange:Number = 20;
		public function set maxAttackRange(value:Number):void {
			_maxAttackRange = value * GlobalVariable.RECT_WIDTH;
		}
		public function get maxAttackRange():Number {
			return _maxAttackRange;
		}
		//攻击范围
		private var _attackRange:int = 200;
		public function set attackRange(value:int):void {
			_attackRange = value;
		}
		public function get attackRange():int {
			return _attackRange;
		}
		//被攻击优先级
		private var _attackPriority:int = 0;
		private var _attackPriorityFlag:Boolean = true;
		public function set attackPriority(value:int):void {
			_attackPriority = value;
			if (_attackPriorityFlag) {
				_attackPriorityFlag = false;
				_mirrorAttackPriorty = value;
			}
		}
		public function get attackPriority():int {
			return _attackPriority;
		}
		//被攻击优先级镜像
		private var _mirrorAttackPriorty:int = 0;
		public function set mirrorAttackPriorty(value:int):void {
			_mirrorAttackPriorty = value;
		}
		public function get mirrorAttackPriorty():int {
			return _mirrorAttackPriorty;
		}
		//攻击频率
		private var _attackHZ:int = 8000;
		private var attackHzFlag:int = 0;
		public function set attackHZ(value:int):void {
			if (value == 0) return;
			_attackHZ = 8000 / value;
			
			if (attackHzFlag == 0) {
				_mirrorAttackHZ = value;
				attackHzFlag = 1;
			}
		}
		public function get attackHZ():int {
			return _attackHZ;
		}
		//单位备用攻击频率存储值
		private var _mirrorAttackHZ:int = 8000;
		public function set mirrorAttackHZ(value:int):void {
			_mirrorAttackHZ = value;
		}
		public function get mirrorAttackHZ():int {
			return _mirrorAttackHZ;
		}
		//单位横坐标
		private var _unitX:Number = 0;
		public function set unitX(value:Number):void {
			_unitX = value;
		}
		public function get unitX():Number {
			return _unitX;
		}
		//单位纵坐标
		private var _unitY:Number = 0;
		public function set unitY(value:Number):void {
			_unitY = value;
		}
		public function get unitY():Number {
			return _unitY;
		}
		//控制单位是否工作
		public function elementWork(value:Boolean):void {
			if (intervalId) 
				value ? intervalId.start() : intervalId.stop();
			
			if (_percentAttackTimer) 
				value ? _percentAttackTimer.start() : _percentAttackTimer.stop();
			
			if (_percentDefenceTimer) 
				value ? _percentDefenceTimer.start() : _percentDefenceTimer.stop();
			
			if (_percentArmorTimer) 
				value ? _percentArmorTimer.start() : _percentArmorTimer.stop();
			
			if (_percentAttackHzTimer) 
				value ? _percentAttackHzTimer.start() : _percentAttackHzTimer.stop();
			
			if (_percentBackHpTimeTimer) 
				value ? _percentBackHpTimeTimer.start() : _percentBackHpTimeTimer.stop();
			
			if (_hurtBackTimer) 
				value ? _hurtBackTimer.start() : _hurtBackTimer.stop();
			
			if (_hurtHpTimer) 
				value ? _hurtHpTimer.start() : _hurtHpTimer.stop();
			
		}
		//变换单位样子
		public function elementSleep(isSleep:Boolean):void {
			
		}
		public var _articlBlood:ArticleBlood;
		/**
		 * 显示血条
		 * @param	nowHP
		 * @param	allHP
		 * @param	nowArmor
		 * @param	allArmor
		 * @param	articleY
		 */
		public function showArticleBlood(nowHP:int,allHP:int,nowArmor:int,allArmor:int,articleY:int):void {
			
			if (!_articlBlood) {
				
				_articlBlood = new ArticleBlood();
				addChild(_articlBlood);
				_articlBlood.y = -40;
				_articlBlood.showArticle(nowHP,allHP,nowArmor,allArmor,_elementLevel);
			}
		}
		public function set viewArticleBlood(value:Boolean):void {
			
			if (_articlBlood) {
				
				_articlBlood.visible = value;
			}
			else {
				if (value) {
					
					var _aby:Number = viewFlag == 1 ? -viewUnit.height + viewUnit.y : -60;
					showArticleBlood(_lifeHP, _mirrorHP, _armor, _mirrorArmor, _aby);
				}
			}
		}
		
		public function removeArticleBlood():void {
			
			if (_articlBlood) {
				
				removeChild(_articlBlood);
				_articlBlood = null;
			}
		}
		//被攻击时减血
		public function downHp(value:int):void {
			isHurting = true;
			if (value <= _defense) {
				
				if (_armor > 0) 
					_armor = _armor - value >= 0?_armor - value:0;
				else 
					_lifeHP -= 1; 
			}else {
				
				if (_armor > 0) 
					_armor = _armor - value >= 0?_armor - value:0;
				else 
					_lifeHP -= value - _defense;
			}
			
			if (_lifeHP <= 0) {
				
				elementDeath();
				return;
			}
			
			if (_articlBlood)
				_articlBlood.showArticle(_lifeHP, _mirrorHP,_armor,_mirrorArmor,_elementLevel);
			
			if (backHpFlag == 0) {
				backHpFlag = 1;
				intervalId = new Timer(_backHPTime); //setInterval(upHp,_backHPTime);
				intervalId.addEventListener(TimerEvent.TIMER, upHp);
				intervalId.start();
			}
		}
		//被攻击时直接伤血
		public function downLife(value:int):void {
			
			isHurting = true;
			_lifeHP = _lifeHP - value > 0 ? _lifeHP - value : 0;
			
			if (_lifeHP <= 0) 
				elementDeath();
			
			if (_articlBlood)
				_articlBlood.showArticle(_lifeHP, _mirrorHP,_armor,_mirrorArmor,_elementLevel);
			
			if (backHpFlag == 0) {
				backHpFlag = 1;
				intervalId = new Timer(_backHPTime); //setInterval(upHp,_backHPTime);
				intervalId.addEventListener(TimerEvent.TIMER, upHp);
				intervalId.start();
			}
		}
		//被机关攻击时直接伤血
		public function organDownLife(value:int):void {
			
			isHurting = true;
			_lifeHP = _lifeHP - value > 0 ? _lifeHP - value : 0;
			
			if (_lifeHP <= 0) 
				elementDeath();
			else
				showJiGuanHitMovie();
			if (_articlBlood)
				_articlBlood.showArticle(_lifeHP, _mirrorHP,_armor,_mirrorArmor,_elementLevel);
			
			if (backHpFlag == 0) {
				backHpFlag = 1;
				intervalId = new Timer(_backHPTime); //setInterval(upHp,_backHPTime);
				intervalId.addEventListener(TimerEvent.TIMER, upHp);
				intervalId.start();
			}
		}
		private var _jiGuanHitMovie:MovieClip;
		/**
		 * 显示被机关击中动画
		 */
		private function showJiGuanHitMovie():void {
			
			if (!_jiGuanHitMovie) {
				
				var _mClass:Class = UICommand.getClass("JiGuanHitMovie");
				_jiGuanHitMovie = new _mClass() as MovieClip;
				elementUpLayer.addChild(_jiGuanHitMovie);
				_jiGuanHitMovie.addFrameScript(_jiGuanHitMovie.totalFrames - 1, function():void { _jiGuanHitMovie.stop(); } );
				_jiGuanHitMovie.y = - 20;
				_mClass = null;
			}else {
				_jiGuanHitMovie.gotoAndPlay(1);
			}
		}
		//单位遭受攻击时闪动
		private var _isFlashing:Boolean = false;
		public var isHurting:Boolean = false;
		private var _flashingSum:int = 0;
		public function elementFlashing():void {
			
			_flashingSum ++;
			if (_flashingSum == 1) {
				this.filters = [new ColorMatrixFilter([ 
										1,0,0,0,50,  
										0,1,0,0,50,  
										0,0,1,0,50,  
										0,0,0,1,0  
									])];//提高亮度
			}else if (_flashingSum == 4) {
				isHurting = false;
				_flashingSum = 0;
				this.filters = [];
			}
			
		}
		//单位遭受攻击后自动回血
		private var intervalId:Timer;
		private var backHpFlag:int = 0;
		public var backHPEnable:Boolean = true;
		private function upHp(... args):void {
			
			backHpFlag ++;
			if (backHpFlag > 0 && OptionMainLayer.UP_HP_FLAG == 1 && backHPEnable) {
				
				if (_lifeHP + _backHP < _mirrorHP) {
					_lifeHP += _backHP;
					if (_articlBlood)
						_articlBlood.showArticle(_lifeHP, _mirrorHP,_armor,_mirrorArmor,_elementLevel);
					if (_lifeHP <= 0)
						elementDeath();
				}else {
					_lifeHP = _mirrorHP;
					if (_articlBlood)
						_articlBlood.showArticle(1, 1,_armor,_mirrorArmor,_elementLevel);
					intervalId.reset();
					intervalId.removeEventListener(TimerEvent.TIMER, upHp);
					intervalId = null;
					backHpFlag = 0;
				}
				if (showPlusHPFlag)
					showHpIcon();
			}
		}
		//加血技能调用，为单位加血
		public function plusHp(value:int):void {
			
			_lifeHP = _lifeHP + value < _mirrorHP?_lifeHP + value:_mirrorHP;
			if (_articlBlood)
				_articlBlood.showArticle(_lifeHP, _mirrorHP,_armor,_mirrorArmor,_elementLevel);
			//加血效果function
			if (value > 0)
				showHpIcon();
			//单位当前位置坐标 position.x ;position.y
		}
		//被攻击时减护甲
		public function downArmor(value:int):void {
			
			_armor = _armor - value > 0?_armor - value:0;
		}
		//加防技能时调用
		public function plusDefence(value:int):void {
			_defense += value;
			if (value < 0) showDownDefenceMovie();
		}
		//加攻技能时调用
		public function plusAttack(value:int):void {
			_attack += value;
		}
		//加攻速技能时调用
		public function plusAttackHz(value:int):void {
			if (value == 0) return;
			_attackHZ -= 8000 / value;
		}
		//加回血速度技能时调用
		public function plusBackHpTime(value:int):void {
			_backHPTime -= value * 1000;
		}
		//加护甲技能时调用
		public function plusArmor(value:int):void {
			_armor = _armor + value > _mirrorArmor ? _mirrorArmor : _armor + value;
			if (_articlBlood)
				_articlBlood.showArticle(_lifeHP, _mirrorHP, _armor, _mirrorArmor,_elementLevel);
			if (value > 0)
				showArmorIcon();
		}
		//技能影响攻击属性
		private var _percentAttackTimer:Timer;
		private var _percentAttackFlag:Boolean = true;
		public function percentAttack(value:Number,valueTime:int = 0):void {
			_attack *= (1 + value);
			if (_percentAttackFlag && valueTime > 0) {
				
				_percentAttackFlag = false;
				_percentAttackTimer = new Timer(valueTime * 1000, 1);
				_percentAttackTimer.addEventListener(TimerEvent.TIMER, percentAttackTimerHandler);
				_percentAttackTimer.start();
			}
		}
		
		private function percentAttackTimerHandler(event:TimerEvent):void {
			
			_attack = _mirrorAttack;
			_percentAttackTimer.reset();
			_percentAttackTimer.removeEventListener(TimerEvent.TIMER, percentAttackTimerHandler);
			_percentAttackTimer = null;
			_percentAttackFlag = true;
		}
		//技能影响防御属性
		private var _percentDefenceTimer:Timer;
		private var _percentDefenceFlag:Boolean = true;
		public function percentDefence(value:Number,valueTime:int = 0):void {
			_defense *= (1 + value);
			if (_percentDefenceFlag && valueTime > 0) {
				
				_percentDefenceFlag = false;
				_percentDefenceTimer = new Timer(valueTime * 1000, 1);
				_percentDefenceTimer.addEventListener(TimerEvent.TIMER, percentDefenceTimerHandler);
				_percentDefenceTimer.start();
			}
		}
		
		private function percentDefenceTimerHandler(event:TimerEvent):void {
			
			_defense = _mirrorDefence;
			_percentDefenceTimer.reset();
			_percentDefenceTimer.removeEventListener(TimerEvent.TIMER, percentDefenceTimerHandler);
			_percentDefenceTimer = null;
			_percentDefenceFlag = true;
		}
		//技能影响护甲属性
		private var _percentArmorTimer:Timer;
		private var _percentArmorFlag:Boolean = true;
		public function percentArmor(value:Number,valueTime:int = 0):void {
			_armor *= (1 + value);
			if (_percentArmorFlag && valueTime > 0) {
				
				_percentArmorFlag = false;
				_percentArmorTimer = new Timer(valueTime * 1000, 1);
				_percentArmorTimer.addEventListener(TimerEvent.TIMER, percentArmorTimerHandler);
				_percentArmorTimer.start();
			}
		}
		
		private function percentArmorTimerHandler(event:TimerEvent):void {
			
			_armor = _mirrorArmor;
			_percentArmorTimer.reset();
			_percentArmorTimer.removeEventListener(TimerEvent.TIMER, percentArmorTimerHandler);
			_percentArmorTimer = null;
			_percentArmorFlag = true;
		}
		//技能影响攻击速度属性
		private var _percentAttackHzTimer:Timer;
		private var _percentAttackHzFlag:Boolean = true;
		public function percentAttackHz(value:Number,valueTimer:int = 0):void {
			_attackHZ *= (1 + value);
			if (_percentAttackHzFlag && valueTimer > 0) {
				
				_percentAttackHzFlag = false;
				_percentAttackHzTimer = new Timer(valueTimer * 1000, 1);
				_percentAttackHzTimer.addEventListener(TimerEvent.TIMER, percentAttackHzTimerHandler);
				_percentAttackHzTimer.start();
			}
		}
		
		private function percentAttackHzTimerHandler(event:TimerEvent):void {
			
			_attackHZ = _mirrorAttackHZ;
			_percentAttackHzTimer.reset();
			_percentAttackHzTimer.removeEventListener(TimerEvent.TIMER, percentAttackHzTimerHandler);
			_percentAttackHzTimer = null;
			_percentAttackHzFlag = true;
		}
		//技能影响回血速度属性
		private var _percentBackHpTimeTimer:Timer;
		private var _percentBackHpTimeFlag:Boolean = true;
		public function percentBackHpTime(value:Number, valueTime:int = 0):void {
			_backHPTime = (1 - value) * _mirrorBackHpTime;
			if (_percentBackHpTimeFlag && valueTime > 0) {
				
				_percentBackHpTimeFlag = false;
				if (backHpFlag == 1)
					intervalId.delay = _backHPTime;
				_percentBackHpTimeTimer = new Timer(valueTime * 1000, 1);
				_percentBackHpTimeTimer.addEventListener(TimerEvent.TIMER, percentBackHpTimeTimerHandler);
				_percentBackHpTimeTimer.start();
			}
		}
		
		private function percentBackHpTimeTimerHandler(event:TimerEvent):void {
			
			if (backHpFlag == 1)
				intervalId.delay = _backHPTime;
			_backHPTime = _mirrorBackHpTime;
			_percentBackHpTimeTimer.reset();
			_percentBackHpTimeTimer.removeEventListener(TimerEvent.TIMER, percentBackHpTimeTimerHandler);
			_percentBackHpTimeTimer = null;
			_percentBackHpTimeFlag = true;
		}
		private var _position:Point;
		//获取当前单位的坐标
		public function get position():Point {
			
			if (_position) {
				
				_position.x = x;
				_position.y = y;
				return _position;
			}else {
				
				_position = new Point(x, y);
				return _position;
			}
			
		}
		//重设单位行进位置
		public function resetWalkPosition():void{}
		//技能函数
		public var skillsFunction:Function;
		//技能伤害其他单位血量
		public var hurtSum:int = 0;
		public var hurtRange:Number = 1.5;
		//单位之间距离
		public var elementDistance:Number;
		//攻击开关
		public var attackAble:Boolean = true;
		//状态开关
		public var isReady:Boolean = false;
		//是否活着
		public var isAlive:Boolean = true;
		//实例化单位攻守类型  tower：防守；soldier：士兵;hero:英雄;attack:攻击
		public var adType:String;
		public static const TOWER:String = "tower";
		public static const ATTACK:String = "attack";
		public static const SOLDIER:String = "soldier";
		public static const HERO:String = "hero";
		public var attackElementType:String;
		//单位攻击炮弹类型
		private var _bulletEffectName:String = "CommonBullet";
		private var _bulletEffectNameFlag:Boolean = true;
		public function set bulletEffectName(value:String):void {
			_bulletEffectName = value;
			if (_bulletEffectNameFlag) {
				_bulletEffectNameFlag = false;
				_mirrorBulletEffectName = value;
			}
		}
		public function get bulletEffectName():String {
			return _bulletEffectName;
		}
		private var _mirrorBulletEffectName:String = "CommonBullet";
		public function set mirrorBulletEffectName(value:String):void {
			_mirrorBulletEffectName = value;
		}
		public function get mirrorBulletEffectName():String {
			return _mirrorBulletEffectName;
		} 
		//单位 底层显示元件 动画
		public var elementDownLayer:Sprite;
		public var elementLayer:Sprite;
		public var elementUpLayer:Sprite;
		//单位死亡动画名称
		public var elementDeadName:String = "";
		public function set pngName(value:String):void {
			
			if (value)
				elementDeadName = value;
		}
		//单位显示开关
		public var viewFlag:int = 0;
		//单位显示
		public var viewUnit:DynamicLoadOriginal;
		//单位行动 状态
		public var running:Boolean = true;
		//攻击目标
		private var _target:Element;
		public function set target(value:Element):void {
			_target = value;
		}
		public function get target():Element {
			return _target;
		}
		//复仇目标
		private var _revengeTarget:Element;
		public function set revengeTarget(value:Element):void {
			_revengeTarget = value;
		}
		public function get revengeTarget():Element {
			return _revengeTarget;
		}
		//单位技能
		private var _elementSkills:int =  0;
		public function set elementSkills(value:int):void {
			_elementSkills = value;
		}
		public function get elementSkills():int {
			return _elementSkills;
		}
		//渲染判断方法
		public function rendering():void {
			
			if (x < 0 || x > GlobalVariable.STAGE_WIDTH || y < 0 || y > GlobalVariable.STAGE_HEIGHT) 
				(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).removeElement(this);
			
		}
		//清空函数
		public function clear():void {
			
			removeArticleBlood();
			removeFireHurtMovie();
			if (viewFlag == 1) {
				viewFlag = 0;
				
				viewUnit.clear();
				elementLayer.removeChild(viewUnit);
				viewUnit = null;
			}
			
			if (intervalId) {
				
				intervalId.reset();
				intervalId.removeEventListener(TimerEvent.TIMER, upHp);
				intervalId = null;
			}
			if (_percentAttackTimer) {
				
				_percentAttackTimer.reset();
				_percentAttackTimer.removeEventListener(TimerEvent.TIMER, percentAttackTimerHandler);
				_percentAttackTimer = null;
			}
			if (_percentDefenceTimer) {
				
				_percentDefenceTimer.reset();
				_percentDefenceTimer.removeEventListener(TimerEvent.TIMER, percentDefenceTimerHandler);
				_percentDefenceTimer = null;
			}
			if (_percentArmorTimer) {
				
				_percentArmorTimer.reset();
				_percentArmorTimer.removeEventListener(TimerEvent.TIMER, percentArmorTimerHandler);
				_percentArmorTimer = null;
			}
			if (_percentAttackHzTimer) {
				
				_percentAttackHzTimer.reset();
				_percentAttackHzTimer.removeEventListener(TimerEvent.TIMER, percentAttackHzTimerHandler);
				_percentAttackHzTimer = null;
			}
			if (_percentBackHpTimeTimer) {
				
				_percentBackHpTimeTimer.reset();
				_percentBackHpTimeTimer.removeEventListener(TimerEvent.TIMER, percentBackHpTimeTimerHandler);
				_percentBackHpTimeTimer = null;
			}
			if (_hurtBackTimer) {
				
				_hurtBackTimer.removeEventListener(TimerEvent.TIMER, hurtBackTimerHandler);
				_hurtBackTimer.reset();
				_hurtBackTimer = null;
			}
			if (_hurtHpTimer) {
				
				_hurtHpTimer.removeEventListener(TimerEvent.TIMER, hurtHpTimerHandler);
				_hurtHpTimer.reset();
				_hurtHpTimer = null;
			}
			
		}
		public var elementName:String;
		/**
		 * 
		 * @param	_selfEnabled  是否支持鼠标事件
		 * @param	_childEnabled  子对象 是否支持鼠标事件
		 * @param	_buttonMode    是否为按钮模式
		 * @param	_cacheAsBitmap  是否打开位图缓存
		 */
		public function Element(_selfEnabled:Boolean = false, _childEnabled:Boolean = false, _buttonMode:Boolean = false, _cacheAsBitmap:Boolean = true) {
			super(_selfEnabled, _childEnabled, _buttonMode, _cacheAsBitmap);
		}
		public function shoot():void { }
		public function offerings(value:int = 100):void { }
		public function showDeathMovie():void { }
		public var runState:int = 0;//0、正常行走；1、减速行走；2、加速行走
		public var runSite:int = 0;//步进数组 现在索引位置
		public var _scalxNum:int = 1;
		//吞噬标志位
		public var swallowShootFlag:Boolean = true;
		//恩赐技能应用
		public var giftFlag:Boolean = true;
		//单位死亡
		public var elmentDead:ElementDead;
		public var deathFlag:Boolean = true;
		public function elementDeath():void {
			
			if (!deathFlag)
				return;	
			deathFlag = false;
			isAlive = false;
			isReady = false;
			running = false;
			elmentDead = new ElementDead(elementDeadName, removeNowElement, removeThis);
			elementLayer.addChild(elmentDead);
			elmentDead.scaleX = _scalxNum;
			elmentDead.y = 10;
			removeVenomIcon();
			removeDownDefenceMovie();
		}
		public function removeNowElement():void {
			
			if (viewFlag == 1) {
				viewFlag = 0;
				elementLayer.removeChild(viewUnit)
				viewUnit = null;
				
			}
		}
		
		public function removeThis(... args):void {
			
			(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).removeElement(this);
		}
		//单位复活
		public function elementReturnLife():void {
			
		}
		
		//技能伤害回血值时调用===========================================
		
		private var _hurtBackTimer:Timer;
		private var _hurtBackHpFlag:Boolean = false;
		private var _hurtBackHp:int = 10;
		public function hurtBackHp( hurtBackHp:int = 10,_hurtBackTime:int = 3):void {
			
			if (!_hurtBackHpFlag) {
				_hurtBackHp = hurtBackHp;
				if (adType == ATTACK) {
					showVenomIcon();
				}
				else {
					showFireHurtMovie();
				}
				_hurtBackHpFlag = true;
				_backHP -= _hurtBackHp;
				_hurtBackTimer = new Timer(_hurtBackTime * 1000, 1);
				_hurtBackTimer.addEventListener(TimerEvent.TIMER, hurtBackTimerHandler);
				_hurtBackTimer.start();
			}else {
				if (_hurtBackTimer) {
					_hurtBackTimer.reset();
					_hurtBackTimer.start();
				}
				
			}
		}
		
		private function hurtBackTimerHandler(event:TimerEvent):void {
			
			if (_hurtBackHpFlag) {
				if (adType == ATTACK) {
					removeVenomIcon();
				}
				else {
					removeFireHurtMovie();
				}
				_backHP += _hurtBackHp;
				_hurtBackTimer.removeEventListener(TimerEvent.TIMER, hurtBackTimerHandler);
				_hurtBackTimer.reset();
				_hurtBackTimer = null;
				_hurtBackHpFlag = false;
			}
		}
		
		
		//技能伤害血时调用==========================================================================
		
		private var _hurtHpTimer:Timer;
		private var _hurtHpFlag:Boolean = true;
		private var _hurtHP:int;
		private var _hurtHpTime:int;
		public function hurtHp(hurtHpTime:int = 1,hurtHp:int = 10):void {
			_hurtHP = hurtHp;
			_hurtHpTime = hurtHpTime;
			if (_hurtHpFlag) {
				
				_hurtHpFlag = false;
				downHp(_hurtHP);
				_hurtHpTimer = new Timer(1000, _hurtHpTime);
				_hurtHpTimer.addEventListener(TimerEvent.TIMER, hurtHpTimerHandler);
				_hurtHpTimer.start();
			}
		}
		
		private function hurtHpTimerHandler(event:TimerEvent):void {
			
			downHp(_hurtHP);
			if (!_hurtHpTimer) return;
			if (_hurtHpTimer.currentCount == _hurtHpTime) {
				removeFireHurtMovie();
				_hurtHpTimer.removeEventListener(TimerEvent.TIMER, hurtHpTimerHandler);
				_hurtHpTimer.reset();
				_hurtHpTimer = null;
				_hurtHpFlag = true;
			}
		}
		
		private var _fireHurtClass:Class;
		private var _fireHurtMovie:MovieClip;
		private var _fireHurtFlag:Boolean = true;
		/**
		 * 显示灼烧效果
		 */
		public function showFireHurtMovie():void {
			
			if (!_fireHurtMovie) {
				
				_fireHurtClass = ApplicationDomain.currentDomain.getDefinition("FireHurtMovie") as Class;
				_fireHurtMovie = new _fireHurtClass() as MovieClip;
				elementUpLayer.addChild(_fireHurtMovie);
				_fireHurtMovie.y = -20;
				_fireHurtClass = null;
			}else{
				_fireHurtMovie.play();
			}
		}
		
		public function removeFireHurtMovie():void {
			
			if (_fireHurtMovie) {
				
				elementUpLayer.removeChild(_fireHurtMovie);
				_fireHurtMovie = null;
			}
		}
		private var _fireBulletHitMovie:MovieClip;
		/**
		 * 显示火焰攻击击中效果
		 */
		public function showFireBulletHitMovie():void {
			
			if (!_fireBulletHitMovie) {
				
				var _mClass:Class = UICommand.getClass("FireBulletHitMovie");
				_fireBulletHitMovie = new _mClass() as MovieClip;
				elementUpLayer.addChild(_fireBulletHitMovie);
				_fireBulletHitMovie.addFrameScript(_fireBulletHitMovie.totalFrames - 1, function():void { _fireBulletHitMovie.stop(); } );
				_fireBulletHitMovie.y = -20;
				_mClass = null;
			}
			else {
				_fireBulletHitMovie.gotoAndPlay(1);
			}
		}
		//技能伤害速度时调用======================================================================
		
		public function hurtSpeed(_hurtSpeed:Number = 0.2, _hurtSpeedTime:int = 3):void { }
		
		//技能开矿时调用==========================================================================
		public var makeGlodFlag:Boolean = true;
		public function makeGlod():void { }
		
		//加攻技能时调用 显示 加攻 图标==============================================================
		private var _attackIcon:MovieClip;
		private var _attackIconClass:Class;
		private var _attackIconFlag:Boolean = true;
		
		public function showAttackIcon():void {
			
			if (_attackIconFlag) {
				_attackIconFlag = false;
				_attackIconClass = ApplicationDomain.currentDomain.getDefinition("UpAttackIcon") as Class;
				_attackIcon = new _attackIconClass() as MovieClip;
				elementDownLayer.addChild(_attackIcon);
				_attackIcon.x = -_attackIcon.width / 2;
				_attackIcon.y = -10;
				
			}
		}
		/**
		 * 移除加攻 图标
		 */
		public function removeAttackIcon():void {
			
			if (!_attackIconFlag) {
				
				elementDownLayer.removeChild(_attackIcon);
				_attackIcon = null;
				_attackIconClass = null;
				_attackIconFlag = true;
			}
		}
		
		// 加防 技能时 调用 显示 加防 图标 =======================================
		
		private var _defenceIcon:MovieClip;
		private var _defenceIconClass:Class;
		private var _defenceIconFlag:Boolean = true;
		
		public function showDefenceIcon():void {
			
			if (_defenceIconFlag) {
				
				_defenceIconFlag = false;
				_defenceIconClass = ApplicationDomain.currentDomain.getDefinition("UpDefenceIcon") as Class;
				_defenceIcon = new _defenceIconClass() as MovieClip;
				elementDownLayer.addChild(_defenceIcon);
				_defenceIcon.x = -_defenceIcon.width / 2;
				_defenceIcon.y = -10;
				
			}
		}
		
		/**
		 * 移除 加防 图标
		 */
		public function removeDefenceIcon():void {
			
			if (!_defenceIconFlag) {
				
				elementDownLayer.removeChild(_defenceIcon);
				_defenceIcon = null;
				_defenceIconClass = null;
				_defenceIconFlag = true;
			}
		}
		//  减防 技能时  调用   动画=============================================
		private var _defenceMovie:MovieClip;
		public function showDownDefenceMovie():void {
			
			if (!_defenceMovie) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("HeroSkillsBombEffect") as Class;
				_defenceMovie = new _mClass() as MovieClip;
				elementUpLayer.addChild(_defenceMovie);
				_mClass = null;
			}
		}
		/**
		 * 移除 减防 动画
		 */
		public function removeDownDefenceMovie():void {
			
			if (_defenceMovie) {
				elementUpLayer.removeChild(_defenceMovie);
				_defenceMovie = null;
			}
		}
		/**
		 * 变更图标位置
		 */
		private function optionIconSite():void {
			
			if (!_attackIconFlag && !_defenceIconFlag) {
				
				_attackIcon.x = -_attackIcon.width / 2;
				_defenceIcon.x = _defenceIcon.width / 2;
			}else {
				
				if (!_attackIconFlag)
					_attackIcon.x = 0;
				if (!_defenceIconFlag)
					_defenceIcon.x = 0;
			}
		}
		
		// 加血 技能 调用时  显示 加血 图标============================================
		
		private var _hpIcon:MovieClip;
		private var _hpIconClass:Class;
		private var _hpIconFlag:Boolean = true;
		public var showPlusHPFlag:Boolean = false;
		private var _playHPIconTimer:Timer;
		private var _playHPIconFlag:Boolean = true;
		public function showHpIcon():void {
			
			if (_hpIconFlag) {
				_hpIconFlag = false;
				_hpIconClass = ApplicationDomain.currentDomain.getDefinition("UpHpIcon") as Class;
				_hpIcon = new _hpIconClass() as MovieClip;
				_hpIcon.addFrameScript(_hpIcon.totalFrames - 1, function():void { _hpIcon.gotoAndStop(1); } );
				addChild(_hpIcon);
				_hpIcon.y = viewFlag == 1?viewUnit.y - viewUnit.height - 10: -GlobalVariable.RECT_HEIGHT * 1.5;
			}else {
				addChild(_hpIcon);
				_hpIcon.play();
			}
		}
		
		private function removeHpIcon():void {
			
			if (!_hpIconFlag) {
				
				removeChild(_hpIcon);
				_hpIcon = null;
				_hpIconClass = null;
				_hpIconFlag = true;
			}
		}
		private var _lateHPValue:int;
		private var _latePlusHPTimer:Timer;
		private var _latePlusHPFlag:Boolean = true;
		public function latePlusHP(value:int):void {
			_lateHPValue = value;
			var _lateTime:int  = Math.random() * 5;
			if (_lateTime == 0) {
				plusHp(value);
			}
			else if (_latePlusHPFlag) {
				_latePlusHPFlag = false;
				_latePlusHPTimer = new Timer(_lateTime * 100, 1);
				_latePlusHPTimer.addEventListener(TimerEvent.TIMER_COMPLETE, latePlusHPTimerHandler);
				_latePlusHPTimer.start();
			}
			else {
				plusHp(_lateHPValue);
			}
		}
		
		private function latePlusHPTimerHandler(event:TimerEvent):void {
			
			plusHp(_lateHPValue);
			_latePlusHPTimer.reset();
			_latePlusHPTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, latePlusHPTimerHandler);
			_latePlusHPTimer = null;
			_latePlusHPFlag = true;
		}
		
		// 毒液 技能 调用时 显示 中毒 图标==============================================
		
		private var _venomIcon:MovieClip;
		private var _venomIconClass:Class;
		private var _venomIconFlag:Boolean = true;
		
		public function showVenomIcon():void {
			
			if (_venomIconFlag) {
				
				_venomIconFlag = false;
				_venomIconClass = ApplicationDomain.currentDomain.getDefinition("VenomIcon") as Class;
				_venomIcon = new _venomIconClass() as MovieClip;
				elementUpLayer.addChild(_venomIcon);
				_venomIcon.y = viewFlag == 1?viewUnit.y - viewUnit.height: -GlobalVariable.RECT_HEIGHT;
			}
		}
		
		public function removeVenomIcon():void {
			
			if (!_venomIconFlag) {
				
				if (_venomIcon) {
					
					elementUpLayer.removeChild(_venomIcon);
					_venomIcon = null;
					_venomIconClass = null;
				}
				_venomIconFlag = true;
			}
		}
		//加成 防御 值
		public function additionDefence(value:Number):void {
			
			_defense = (1 + value) * _mirrorDefence;
		}
		
		//加成 回血速度 
		
		public function additionBackHpTime(value:Number):void {
			
			_backHPTime = (1 - value) * _mirrorBackHpTime;
			if (backHpFlag == 1) {
				if (intervalId)
					intervalId.delay = _backHPTime;
			}
		}
		
		//加成 攻击力
		
		public function additionAttack(value:Number):void {
			
			_attack = (1 + value) * _mirrorAttack;
		}
		
		//加成 荣誉值
		private var _honor:Number = 1;
		public function additionHonor(value:Number):void {
			_honor *= (value + 1);
		}
		public function set honor(value:Number):void {
			_honor = value;
		}
		public function get honor():Number {
			return _honor;
		}
		//装备 加成 属性  =====================================================================
		
		//加成 攻击力
		
		public function equipAdditionAttack(value:int):void {
			
			_attack += value;
			_mirrorAttack = _attack;
		}
		
		//加成 生命值 
		
		public function equipAdditionHp(value:int):void {
			
			_lifeHP += value;
			_mirrorHP = _lifeHP;
		}
		
		//加成 护甲
		
		public function equipAdditionArmor(value:int):void {
			
			_armor += value;
			_mirrorArmor = _armor;
		}
		
		//加成 防御
		
		public function equipAdditionDefence(value:int):void {
			
			_defense += value;
			_mirrorDefence = _defense;
		}
		//被直线攻击时 调用=======================================================================
		private var _lineMovie:MovieClip;
		private var _lineClass:Class;
		private var _lineFlag:Boolean = false;
		public function showAttackLineMovie(reduceHP:int):void {
			downHp(reduceHP);
			if (!_lineFlag) {
				_lineFlag = true;
				_lineClass = ApplicationDomain.currentDomain.getDefinition("LineHitBullet") as Class;
				_lineMovie = new _lineClass() as MovieClip;
				elementUpLayer.addChild(_lineMovie);
			}else {
				_lineMovie.gotoAndPlay(1);
			}
		}
		
		//被旋刀攻击时调用==================================================================
		
		private var _xuanDaoHurtClass:Class;
		private var _xuanDaoHurtMovie:MovieClip;
		private var _xuanDaoHurtFlag:Boolean = true;
		/**
		 * 被旋刀攻击时调用
		 */
		public function showXuanDaoHurtMovie():void {
			
			if (_xuanDaoHurtFlag) {
				_xuanDaoHurtFlag = false;
				_xuanDaoHurtClass = ApplicationDomain.currentDomain.getDefinition("XuanDaoHurtMovie") as Class;
				_xuanDaoHurtMovie = new _xuanDaoHurtClass() as MovieClip;
				_xuanDaoHurtMovie.addFrameScript(_xuanDaoHurtMovie.totalFrames - 1, function():void { _xuanDaoHurtMovie.stop(); _xuanDaoHurtMovie.visible = false; } );
				elementUpLayer.addChild(_xuanDaoHurtMovie);
				_xuanDaoHurtMovie.y = -20;
				_xuanDaoHurtClass = null;
			}else {
				if (_xuanDaoHurtMovie) {
					
					_xuanDaoHurtMovie.visible = true;
					_xuanDaoHurtMovie.gotoAndPlay(1);
				}
			}
		}
		
		//技能 加护甲时 调用===================================================================
		
		private var _armorIcon:MovieClip;
		
		private function showArmorIcon():void {
			
			if (!_armorIcon) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("HeroSkillsAsylumMovie") as Class;
				_armorIcon = new _mClass() as MovieClip;
				elementUpLayer.addChild(_armorIcon);
				_mClass = null;
				_armorIcon.addFrameScript(_armorIcon.totalFrames - 1, function ():void { _armorIcon.stop(); } );
				_armorIcon.y = viewFlag == 1?viewUnit.y - viewUnit.height - 10: -GlobalVariable.RECT_HEIGHT * 1.5;
			}else {
				if (_armorIcon)
					_armorIcon.play();
			}
		}
		
		//技能 干扰  是调用================================================================
		
		private var _fogMovie:MovieClip;
		
		public function showFogMovie():void {
			
			if (!_fogMovie) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("HeroSkillsFogMovie") as Class;
				_fogMovie = new _mClass() as MovieClip;
				elementUpLayer.addChild(_fogMovie);
				_fogMovie.addFrameScript(_fogMovie.totalFrames - 1, function():void { _fogMovie.stop(); } );
				_mClass = null;
				_fogMovie.y = viewFlag == 1 ? -viewUnit.y : 0;
				_fogMovie.x = viewFlag == 1 ? -viewUnit.width >> 1 : -_fogMovie.width / 2;
			}
		}
		
		public function removeFogMovie():void {
			
			if (_fogMovie) {
				
				elementUpLayer.removeChild(_fogMovie);
				_fogMovie = null;
			}
		}
	}//end Element
	
}