// // // // ///////////////////////////////////////////////////
// BackgroundLayer.as
// Macromedia ActionScript Implementation of the Class BackgroundLayer
// Generated by Enterprise Architect
// Created on:      01-六月-2011 14:18:38
// Original author: LuXianli
// // // // ///////////////////////////////////////////////////
package com.raytoon.cannonfodder.puremvc.view.ui.backgroundLayer {
	import com.raytoon.cannonfodder.puremvc.ApplicationFacade;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.puremvc.view.ui.backgroundLayer.component.CircleRange;
	import com.raytoon.cannonfodder.puremvc.view.ui.informationLayer.InformationLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Towers;
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.toolsLayer.ToolsLayer;
	import com.raytoon.cannonfodder.tools.aStar.AStar;
	import com.raytoon.cannonfodder.tools.aStar.Grid;
	import com.raytoon.cannonfodder.tools.aStar.Node;
	import com.raytoon.cannonfodder.tools.json.JSON;
	import com.raytoon.cannonfodder.tools.load.LoadImage;
	import com.raytoon.cannonfodder.tools.load.LoadMaterials;
	import com.raytoon.cannonfodder.tools.load.ShowLoadOriginal;
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.utils.MapRectInfo;
	import com.raytoon.cannonfodder.tools.utils.MouseStyleNow;
	import com.raytoon.cannonfodder.tools.utils.NotificationNameList;
	import com.raytoon.cannonfodder.tools.utils.SoundName;
	import com.raytoon.cannonfodder.tools.utils.UICommand;
	import com.raytoon.cannonfodder.tools.utils.UICreate;
	import com.raytoon.cannonfodder.tools.utils.UIName;
	import com.raytoon.cannonfodder.tools.utils.UIState;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.DisplayObject;
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.filters.ColorMatrixFilter;
	import flash.net.URLRequest;
	import flash.ui.Mouse;
	import flash.utils.Timer;
	import flash.utils.getTimer;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 01-六月-2011 14:18:38
	 */
	public class BackgroundLayer extends Sprite {
		public static const NAME : String = "BackgroundLayer";

		public function BackgroundLayer() {
			UIMain.setInstance(BackgroundLayer.NAME, this);
		}

		private var mainSence : Sprite;
		private var mainSenceClass : Class;
		private var warMap : Loader;

		// private var mainSenceFlag:int = 0;
		public function addBackground() : void {
			if (!mainSence) {
				var _bClass : Class = UICommand.getClass("BackgroundPic");
				mainSence = new _bClass() as Sprite;
				addChildAt(mainSence, 0);
				_bClass = null;
			}
		}

		/**
		 * 背景地图显示隐藏  true 显示 ；false 隐藏
		 */
		public function set mainSenceView(value : Boolean) : void {
			if (mainSence)
				mainSence.visible = value;
		}

		public function removeBackground() : void {
			if (mainSence) {
				removeChildAt(0);
				mainSence = null;
			}
		}

		private var _scoopFlag : Boolean = true;

		/**
		 * 添加铲子
		 */
		public function addScoop() : void {
			if (_scoopFlag) {
				if (_runTower) {
					if (_runTower.isMove) {
						var _cutTowerXmlList : XMLList = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == String(_runTower.type)).tower.(@id == String(_runTower.id));
						var _cutTowerPaper : int = (_runTower.type == Towers.ORGAN_TOWER || _runTower.type == Towers.OBSTACLE_TOWER) ? int(_cutTowerXmlList.paper) : (_runTower.isNew ? int(_cutTowerXmlList.paper) : int(_cutTowerXmlList.paper) * 0.3);
						UICommand.setPaperNum(_cutTowerPaper, 2);
					}
				}
				Mouse.hide();
				removeRunTower();
				_scoopClass = UICommand.getClass("RemoveTowerMovie");
				_scoopMc = new _scoopClass() as MovieClip;
				(UIMain.getInstance(UIMain.NAME) as UIMain).addChild(_scoopMc);
				_scoopMc.gotoAndStop(1);
				_scoopMc.addFrameScript(_scoopMc.totalFrames - 1, function() : void {
					_scoopMc.gotoAndStop(1);
				});
				addEventListener(Event.ENTER_FRAME, scoopMove);
				_scoopFlag = false;
				optionTowerFlag = 2;
			} else {
				removeEventListener(Event.ENTER_FRAME, scoopMove);
				if(_scoopMc)(UIMain.getInstance(UIMain.NAME) as UIMain).removeChild(_scoopMc);
				_scoopMc = null;
				_scoopClass = null;
				_scoopFlag = true;
				optionTowerFlag = 0;
				Mouse.show();
			}
		}

		/**
		 * 移除铲子
		 */
		public function removeScoop() : void {
			if (!_scoopFlag) {
				Mouse.show();
				removeEventListener(Event.ENTER_FRAME, scoopMove);
				(UIMain.getInstance(UIMain.NAME) as UIMain).removeChild(_scoopMc);
				_scoopMc = null;
				_scoopClass = null;
				_scoopFlag = true;
				optionTowerFlag = 0;
			}
		}

		private var _mouseFlag : Boolean = true;

		private function scoopMove(event : Event) : void {
			if (!_scoopFlag) {
				_scoopMc.x = mouseX - 10;
				_scoopMc.y = mouseY - _scoopMc.height - 10;
				if (_mouseFlag) {
					if (mouseY > 480) Mouse.show();
					else Mouse.hide();
				}
			}
		}

		private var _warMapFlag : Boolean = true;

		/**
		 * 显示地图
		 * @param	_mapId  地图编号
		 * @param	_startId  出兵口编号
		 */
		public function addWarMap(_mapId : int = 103, _startId : int = 101) : void {
			_warMapFlag = true;
			var mapNameUrl : String = String(XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapId).mapMaterial.mapUrl.(@startId == _startId).urlName);
			var mapUrl : String = ConstPath.MATERIAL_PATH + ConstPath.PNG_PATH + ConstPath.MAP_PATH + mapNameUrl;
			
			if (UICommand.t.expendableData.length > 1) {
				var sArr:Array = UICommand.t.expendableData[1].concat();
				LoadMaterials.getInstance().loadData(sArr,sendMapLoadComplete);
				UICommand.t.expendableData = [];
				_loadMapNum = 3;
			}else {
				
				_loadMapNum = 2;
			}
			
			warMap = new Loader();
			warMap.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, warMapIoError);
			warMap.contentLoaderInfo.addEventListener(Event.COMPLETE, defenceMapLoadComplete);
			warMap.load(new URLRequest(mapUrl));
			addChild(warMap);

			dispatchEvent(new Event(EventNameList.SHOW_CHAPTER));
			removeBackground();
		}

		private function warMapIoError(event : IOErrorEvent) : void {
		}

		private function rectLayerIoError(event : IOErrorEvent) : void {
		}
		private var _makeSoldierMovie:MovieClip;//产生士兵光圈
		private var _heroAltar:MovieClip;//英雄站立祭坛
		/**
		 * 显示英雄祭坛和出兵口
		 */
		private function addHeroAltar(sx:int,sy:int,hx:int,hy:int):void {
			
			var _msClass:Class = UICommand.getClass("MakeSoldierFactory");
			_makeSoldierMovie = new _msClass() as MovieClip;
			addChild(_makeSoldierMovie);
			_makeSoldierMovie.x = sx;
			_makeSoldierMovie.y = sy;
			_msClass = null;
			
			_msClass = UICommand.getClass("HeroAltar");
			_heroAltar = new _msClass() as MovieClip;
			addChild(_heroAltar);
			_heroAltar.x = hx;
			_heroAltar.y = hy;
			_msClass = null;
		}
		/**
		 * 移除地图
		 */
		public function removeWarMap() : void {
			if (warMap) {
				if (warMap.hasEventListener(Event.COMPLETE))
					warMap.removeEventListener(Event.COMPLETE, defenceMapLoadComplete);
				if (warMap.hasEventListener(IOErrorEvent.IO_ERROR))
					warMap.removeEventListener(IOErrorEvent.IO_ERROR, warMapIoError);
				removeChild(warMap);
				try {
					(warMap.content as Bitmap).bitmapData.dispose();
				} catch (e : *) {
				}

				try {
					warMap.unloadAndStop();
				} catch (e : *) {
				}
				// warMap.unload();
				warMap = null;
			}

			if (_rectLayer) {
				removeChild(_rectLayer);
				_rectLayer.unload();
				_rectLayer = null;
			}
		}

		private var _runArray : Array = new Array();
		// 行走路径
		private var _mapPath:int;
		private var _aStar : AStar;
		private var _grid : Grid;
		private var _siteArr : Array;
		private var _endArr : Array;
		private var _startArr : Array;
		private var _rectArr : Array;
		private var _towerInfo : Array;
		// 箭塔数据信息
		private var _mapId : int = 0;
		private var _startId : int = 0;

		/**
		 * 开始布防，添加防御地图
		 * @param	mapId  地图编号
		 */
		public function addDefenceMap(mapId : int = 101, doorId : int = 0) : void {
			_warMapFlag = false;
			_aStar = new AStar();
			_grid = new Grid();
			_siteArr = new Array();
			_endArr = new Array();
			_startArr = new Array();
			_rectArr = new Array();
			_towerInfo = new Array();
			_mapId = mapId;
			var _tempInt : int = Math.random() * 3;
			_startId = doorId > 0 ? doorId : 101 + _tempInt;
			removeAllTower();
			removeOreTower();
			removeObstacleTower();
			removeScoop();
			optionDefenceMap();
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playMusic(SoundName.SOUND_DEFENCE_BACKGROUND);
		}

		private var _rectLayer : Loader;

		/**
		 * 开关地图方格
		 * @param	viewFlag
		 */
		public function viewRect(viewFlag : Boolean) : void {
			if (_rectLayer) {
				_rectLayer.visible = viewFlag;
			}
		}

		/**
		 * 显示防御地图
		 */
		private function optionDefenceMap() : void {
			var mapXmlList : XMLList = XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapId);
			var mapNameUrl : String = String(mapXmlList.mapMaterial.mapUrl.(@startId == _startId).urlName);
			var mapUrl : String = ConstPath.MATERIAL_PATH + ConstPath.PNG_PATH + ConstPath.MAP_PATH + mapNameUrl;
			
			_loadMapNum = 2;
			warMap = new Loader();
			warMap.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, warMapIoError);
			warMap.contentLoaderInfo.addEventListener(Event.COMPLETE, defenceMapLoadComplete);
			warMap.load(new URLRequest(mapUrl));
			addChild(warMap);

			_siteArr = String(mapXmlList.mapSite).split(",");
			_endArr = String(mapXmlList.mapEndNode).split(",");
			_startArr = String(mapXmlList.mapMaterial.mapUrl.(@startId == _startId).startNode).split(",");
			_mapPath = int(mapXmlList.mapMaterial.mapUrl.(@startId == _startId).mapPath);
			_rectArr = String(mapXmlList.mapFormat).split("*");
			
			switch(_mapPath) {
				
				case 1:
					addHeroAltar(int(_siteArr[0]) + (int(_startArr[1]) - 0.5) * GlobalVariable.RECT_WIDTH, int(_siteArr[1]) + (int(_startArr[0]) + 0.5) * GlobalVariable.RECT_HEIGHT, 0, 59);
					break;
					
				case 2:
					addHeroAltar(int(_siteArr[0]) + (int(_startArr[1]) + 0.5) * GlobalVariable.RECT_WIDTH, int(_siteArr[1]) + (int(_startArr[0]) - 0.5) * GlobalVariable.RECT_HEIGHT, 0, 59);
					break;
					
				case 3:
					addHeroAltar(int(_siteArr[0]) + (int(_startArr[1]) + 0.5) * GlobalVariable.RECT_WIDTH, int(_siteArr[1]) + (int(_rectArr[0]) + 0.5) * GlobalVariable.RECT_HEIGHT, 0, 59);
					break;
			}
			
			_freeBirdX = (int(_rectArr[1]) - 8) * GlobalVariable.RECT_WIDTH;
			removeFreedomBird();
			showFreedomBird();

			var _gridUrl : String = ConstPath.MATERIAL_PATH + ConstPath.PNG_PATH + ConstPath.MAP_PATH + String(mapXmlList.grid);
			_rectLayer = new Loader();
			_rectLayer.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, rectLayerIoError);
			_rectLayer.contentLoaderInfo.addEventListener(Event.COMPLETE, rectLayerLoadComplete);
			_rectLayer.load(new URLRequest(_gridUrl));
			addChild(_rectLayer);
			_rectLayer.x = int(_siteArr[0]);
			_rectLayer.y = int(_siteArr[1]);
			
			_tempRight = int(_siteArr[0]) + (int(_rectArr[1]) - 1) * GlobalVariable.RECT_WIDTH;
			
			_tempNum = int(_siteArr[0]);
			_tempRow = int(_siteArr[1]);
			showNewMapTower();
			mapXmlList = null;
		}

		private var _obstacleTowerArr : Array = new Array();
		// 障碍物存放数组
		private var _oreTowerArr : Array = new Array();
		// 矿 存放数组
		private var _dataId : Date;

		/**
		 * 显示障碍物
		 * 刷地图时 调用
		 */
		public function showNewMapTower() : void {
			_mapPaper = (UICommand.t.userData[1][0] == 1 || UICommand.t.userData[1][0] == 10040 || UICommand.t.userData[1][0] == 10005 || UICommand.t.userData[1][0] == 10006) ? (int(XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapId).mapPaper) + _addPaper) * 2 :(int(XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapId).mapPaper) + _addPaper);
			_sumPaper = 0;
			_changeTowerArr = [];
			removeAllTower();
			removeOreTower();
			removeObstacleTower();
			removeScoop();
			setPaperNum();
			if (_runLine) {
				removeChild(_runLine);
				_runLine = null;
			}
			_grid.nodes = MapRectInfo.creatMapRectInfo(int(_siteArr[0]), int(_siteArr[1]), int(_rectArr[0]), int(_rectArr[1]));

			_grid.setStartNode(int(_startArr[0]), int(_startArr[1]));
			_grid.setEndNode(int(_endArr[0]), int(_endArr[1]));

			var _obstacleSum : int = Math.ceil(int(_rectArr[0]) * int(_rectArr[1]) * 0.15);
			var _obstacleArr : Array = MapRectInfo.createRandomArray(_startArr, _endArr);
			var _obSum : int = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == "obstacle").tower.length() - 1;
			for (var i : int = 0; i < _obstacleSum; i++) {
				var _obNum : int = _obstacleArr.length * Math.random();
				var _obx : int = (_obstacleArr[_obNum] as Node).x;
				var _oby : int = (_obstacleArr[_obNum] as Node).y;
				var _obRandom : int = _obSum * Math.random() + 1;
				var _obXmlList : XML = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == "obstacle").tower[_obRandom];
				var _obName : String = String(_obXmlList.name);
				var _obTower : ShowLoadOriginal = new ShowLoadOriginal(_obName);
				addChild(_obTower);
				_obTower.id = int(_obXmlList.@id);
				_obTower.num = _oby;
				_obTower.row = _obx;
				_obTower.x = _tempNum + _obTower.num * GlobalVariable.RECT_WIDTH + GlobalVariable.RECT_WIDTH / 2;
				_obTower.y = _tempRow + _obTower.row * GlobalVariable.RECT_HEIGHT + GlobalVariable.RECT_HEIGHT;

				var _rectArr : Array = String(_obXmlList.format).split(",");
				var m : int = (_obx + int(_rectArr[0]) < MapRectInfo.numCols) ? (_obx + int(_rectArr[0])) : MapRectInfo.numCols;
				var n : int = (_oby + int(_rectArr[1]) < MapRectInfo.numRows) ? (_oby + int(_rectArr[1])) : MapRectInfo.numRows;
				for (var k : int = _obx; k < m; k++) {
					for (var j : int = _oby; j < n; j++) {
						MapRectInfo.setFlaseIsAppearPoint(k, j);
						MapRectInfo.setFalseWalkablePoint(k, j);
					}
				}
				_dataId = new Date();
				_obTower.type = "obstacle";
				_obTower.unitId = String(_obXmlList.@id) + String(_dataId.time);
				_obTower.addEventListener(MouseEvent.CLICK, obTowerClickHandler);
				_obTower.addEventListener(MouseEvent.ROLL_OVER, obTowerOverHandler);
				_obTower.addEventListener(MouseEvent.ROLL_OUT, obTowerOutHandler);
				_towerArr.push(_obTower);
				_obstacleArr.splice(_obNum, 1);
				_dataId = null;
				_obXmlList = null;
			}

			if (_aStar.findPath(_grid)) {
				showRunLine(_aStar.path);
			} else {
				showNewMapTower();
			}
		}

		private var _tmpObTower : ShowLoadOriginal;
		private var _tmpObTowerRing : int;

		/**
		 * 固有障碍 花费 铲除
		 * @param	event
		 */
		private function obTowerClickHandler(event : MouseEvent) : void {
			if (_optionTowerFlag == 2) {
				_mouseFlag = false;
				_tmpObTower = event.currentTarget as ShowLoadOriginal;
				_tmpObTowerRing = int(XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == _tmpObTower.type).tower.(@id == _tmpObTower.id).ring);
				var _uiSiteXmllist : XML = XMLSource.getXMLSource("UISite.xml");
				if ((UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).realMoney >= _tmpObTowerRing) {
					UICreate.popupPrompt(String(_uiSiteXmllist.defence.remove.info[0]) + String(_tmpObTowerRing) + String(_uiSiteXmllist.phrase.money) + "\r\n", UIState.REMOVE_OBSTACLE, true);
				} else {
					UICreate.popupPrompt(String(_uiSiteXmllist.notEnough.money[0]) + String(_uiSiteXmllist.mark.comma[0]) + String(_uiSiteXmllist.phrase.need[0]) + _tmpObTowerRing + String(_uiSiteXmllist.phrase.money[0]), UIState.RECHARGE, true);
				}
				_uiSiteXmllist = null;
				Mouse.show();
				if (_scoopMc) {
					_scoopMc.visible = false;
				}
			}
		}

		/**
		 * 移除障碍物
		 * @return
		 */
		public function removeNowObTower(flag : Boolean = true) : void {
			if (flag) {
				_nowNum = _tmpObTower.num;
				_nowRow = _tmpObTower.row;
				removeTower(_tmpObTower);
				_tmpObTower = null;
				UICommand.changeMoney(-1 * _tmpObTowerRing);
				drawRunLine();
			}
			if (_scoopMc) {
				_scoopMc.play();
			}
			Mouse.hide();
			if (_scoopMc) {
				_scoopMc.visible = true;
			}
			_mouseFlag = true;
		}

		private var _scoopClass : Class;
		private var _scoopMc : MovieClip;

		/**
		 * 固有障碍 鼠标滑上  处理
		 * @param	event
		 */
		private function obTowerOverHandler(event : MouseEvent) : void {
			(event.currentTarget as ShowLoadOriginal).filters = [new ColorMatrixFilter([1, 0, 0, 0, 50, 0, 1, 0, 0, 50, 0, 0, 1, 0, 50, 0, 0, 0, 1, 0])];
			// 提高亮度
		}

		/**
		 * 固有障碍  鼠标 滑出处理
		 * @param	event
		 */
		private function obTowerOutHandler(event : MouseEvent) : void {
			(event.currentTarget as ShowLoadOriginal).filters = [];
		}

		private var _mapLoadFalg : int = 0;

		/**
		 * 防御地图加载完毕
		 * @param	event
		 */
		private function defenceMapLoadComplete(event : Event) : void {
			if (!warMap.hasEventListener(MouseEvent.CLICK))
				warMap.addEventListener(MouseEvent.CLICK, removeFollowMouse);
			sendMapLoadComplete();
		}
		private var _loadMapNum:int = 2;
		/**
		 * 发送地图加载完成通知
		 */
		public function sendMapLoadComplete() : void {
			_mapLoadFalg++;
			if (_mapLoadFalg >= _loadMapNum) {
				ApplicationFacade.getInstance().sendNotification(NotificationNameList.BACKGROUND_MAP_LOAD_COMPLETE, _warMapFlag);
				_mapLoadFalg = 0;
			}
		}

		private function rectLayerLoadComplete(event : Event) : void {
		}

		private var _runTower : ShowLoadOriginal;
		private var _shapePoint : CircleRange;
		private var _towerType : String;
		private var _towerId : int;
		private var _runTowerX : int = 0;
		private var _runTowerY : int = 0;

		/**
		 * 添加布防 箭塔
		 * @param	_towerType
		 * @param	_towerId
		 */
		public function addTowers(towerType : String, towerId : int, _towerLevel : int = 1) : void {
			
			if (_towerType == towerType && _towerId == towerId) {
				removeRunTower();
			} else {
				if (_runTower) {
					if (_runTower.isMove) {
						towersDone();
						return;
					}
				}
				removeRunTower();
				_towerType = towerType;
				_towerId = towerId;
				_runTowerX = mouseX;
				_runTowerY = mouseY;
				var _runXmlList : XMLList = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == _towerType).tower.(@id == _towerId);
				var _towerPaper : int = int(_runXmlList.paper);
				if (_towerPaper <= UICommand.getPaperNum(2)) {
					removeScoop();
					var _runName : String = String(_runXmlList.name);
					_shapePoint = new CircleRange(Number(_runXmlList.minAttackRange), Number(_runXmlList.maxAttackRange), _runName);
					addChild(_shapePoint);
					_runTower = new ShowLoadOriginal(_runName,false,true);
					(UIMain.getInstance(UIMain.NAME) as UIMain).addChild(_runTower);
					
					_runTower.x = mouseX;
					_runTower.y = mouseY;
					_runTower.minRange = Number(_runXmlList.minAttackRange);
					_runTower.maxRange = Number(_runXmlList.maxAttackRange);
					_runTower.type = _towerType;
					_runTower.id = _towerId;
					_runTower.level = _towerLevel > 0 ? _towerLevel : 1;
					_runTower.paper = int(_runXmlList.paper);
					_dataId = new Date();
					_runTower.unitId = String(_towerId) + String(_dataId.time);
					addEventListener(Event.ENTER_FRAME, optionRunLine);
					_optionTowerFlag = 1;
				}
				_runXmlList = null;
			}
		}

		private var _runNum : int = 0;
		private var _runRow : int = 0;
		private var _nowNum : int = -1;
		private var _nowRow : int = -1;
		private var _tempRight:int = 0;
		private var _tempNum : int = 0;
		// 矩阵据边界横向距离x
		private var _tempRow : int = 0;
		// 矩阵据边界纵向距离y
		private var _drawTime : Number = -1;
		private var _runLine : Sprite;
		private var _runTowerHeight : int = 0;

		/**
		 * 实时计算是否重新绘制路径
		 * @param	event
		 */
		private function optionRunLine(event : Event = null) : void {
			if (_shapePoint) {
				_shapePoint.x = (mouseX - _tempRight < GlobalVariable.RECT_WIDTH/2)?(int(Math.round(mouseX / GlobalVariable.RECT_WIDTH)) * GlobalVariable.RECT_WIDTH + 5) :(int(Math.floor(mouseX / GlobalVariable.RECT_WIDTH)) * GlobalVariable.RECT_WIDTH + 5);// + GlobalVariable.RECT_WIDTH / 2;
				_shapePoint.y = int(Math.floor(mouseY / GlobalVariable.RECT_HEIGHT)) * GlobalVariable.RECT_HEIGHT + GlobalVariable.RECT_HEIGHT / 2;
			}
			if (mouseY > 480) {
				Mouse.show();
				_runTowerHeight = GlobalVariable.RECT_HEIGHT / 2;
			} else {
				Mouse.hide();
				_runTowerHeight = 0;
			}
			if(_runTower) {
				
				_runTower.x = mouseX;
				_runTower.y = mouseY + 25 - _runTowerHeight;
				_runTower.num = int(Math.floor((mouseX - _tempNum )/ GlobalVariable.RECT_WIDTH));
				_runTower.row = int(Math.floor((mouseY  - _tempRow)/ GlobalVariable.RECT_HEIGHT));
				//if ((_runTower.num != _nowNum || _runTower.row != _nowRow) && (_drawTime < 0 || getTimer() - _drawTime > 100)) {
					_nowNum = _runTower.num;
					_nowRow = _runTower.row;
					if (_runTower.type != Towers.ORGAN_TOWER)
						drawRunLine();
					else
						organTowerMove();
						
					_drawTime = getTimer();
				//}
			}else {
				
				Mouse.show();
				removeRunTower();
				removeMoveTower();
				_optionTowerFlag = 0;
			}
			
		}

		/**
		 * 画出行走路径
		 * @param	event
		 */
		private function drawRunLine() : void {
			if (_nowNum >= 0 && _nowNum < int(_rectArr[1]) && _nowRow >= 0 && _nowRow < int(_rectArr[0])) {
				removeMoveTower();
				if (MapRectInfo.backMapPoint()) {
					if (MapRectInfo.optionObtacleTowerPoint(_towerArr)) {
						if (_runTower) {
							if (_runTower.type != Towers.ORGAN_TOWER)
								MapRectInfo.setFalseWalkablePoint(_nowRow, _nowNum);
						}

						_grid.nodes = MapRectInfo.mapRectInfo;
						_grid.setStartNode(int(_startArr[0]), int(_startArr[1]));
						_grid.setEndNode(int(_endArr[0]), int(_endArr[1]));
						if (_aStar.findPath(_grid) && MapRectInfo.getTureIsAppearPoint(_nowRow, _nowNum) && !(_nowRow == _startArr[0] && _nowNum == _startArr[1])) {
							if (!_scoopMc)
								_optionTowerFlag = 1;
							if (_runLine) {
								removeChild(_runLine);
								_runLine = null;
							}
							removeOreTower();
							if (_runTower) {
								if (!_runTower.hasEventListener(MouseEvent.CLICK))
									_runTower.addEventListener(MouseEvent.CLICK, towersDone);
								_runTower.filters = [];
								_runTower.viewBuildFlail(false);
							}
							showRunLine(_aStar.path);

							if (_shapePoint) {
								_shapePoint.visible = true;
							}
						} else {
							_optionTowerFlag = 3;
							if (_runTower) {
								//if (_runTower.hasEventListener(MouseEvent.CLICK))
									//_runTower.removeEventListener(MouseEvent.CLICK, towersDone);
								_runTower.filters = [];
								_runTower.filters = [new ColorMatrixFilter([1, 0.2, 0.2, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 1, 0])];
								_runTower.viewBuildFlail(true);
							}

							if (_shapePoint) {
								_shapePoint.visible = false;
							}
						}
					}
				}
			} else {
				if (_runTower) {
					_optionTowerFlag = 3;

					if (!_runTower.hasEventListener(MouseEvent.CLICK))
						_runTower.addEventListener(MouseEvent.CLICK, towersDone);

					if (_runTower.isMove) {
						if (!_moveTower) {
							_moveTower = new ShowLoadOriginal(_runTower.loadName);
							addChild(_moveTower);
							_moveTower.alpha = 0.5;
							_moveTower.x = _runTower.mirrorNum * GlobalVariable.RECT_WIDTH + _tempNum + GlobalVariable.RECT_WIDTH / 2;
							_moveTower.y = _runTower.mirrorRow * GlobalVariable.RECT_HEIGHT + _tempRow + GlobalVariable.RECT_HEIGHT;
						}
					} else {
						removeMoveTower();
					}
					if (_shapePoint) {
						_shapePoint.visible = false;
					}
					// _runTower.filters = [new GlowFilter(0xFF0000, 1, 6, 6, 2, 2)];// 红色
					_runTower.filters = [new ColorMatrixFilter([1, 0.2, 0.2, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 1, 0])];
					_runTower.viewBuildFlail(true);
				}
			}
		}

		private function organTowerMove() : void {
			if (_nowNum >= 0 && _nowNum < int(_rectArr[1]) && _nowRow >= 0 && _nowRow < int(_rectArr[0])) {
				
				if (MapRectInfo.backMapPoint()) {
					if (MapRectInfo.optionObtacleTowerPoint(_towerArr)) {

						_grid.nodes = MapRectInfo.mapRectInfo;
						_grid.setStartNode(int(_startArr[0]), int(_startArr[1]));
						_grid.setEndNode(int(_endArr[0]), int(_endArr[1]));
						if (_aStar) {
							if (_aStar.findPath(_grid)) {
								if (_runLine) {
									removeChild(_runLine);
									_runLine = null;
								}
								showRunLine(_aStar.path);
							}
						}
						if (!MapRectInfo.getTureIsAppearPoint(_nowRow, _nowNum)) {
							if (_runTower) {
								//if (_runTower.hasEventListener(MouseEvent.CLICK)) {
									//_runTower.removeEventListener(MouseEvent.CLICK, towersDone);
									_optionTowerFlag = 3;
									_runTower.filters = [];
									_runTower.filters = [new ColorMatrixFilter([1, 0.2, 0.2, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 1, 0])];
									_runTower.viewBuildFlail(true);
								//}
							}
						} else {
							if (_runTower) {
								_optionTowerFlag = 1;
								if (!_runTower.hasEventListener(MouseEvent.CLICK))
									_runTower.addEventListener(MouseEvent.CLICK, towersDone);
								_runTower.filters = [];
								_runTower.viewBuildFlail(false);
							}
						}
					}
				}
			} else {
				if (_runTower) {
					_optionTowerFlag = 3;

					if (!_runTower.hasEventListener(MouseEvent.CLICK))
						_runTower.addEventListener(MouseEvent.CLICK, towersDone);

					if (_runTower.isMove) {
						if (!_moveTower) {
							_moveTower = new ShowLoadOriginal(_runTower.loadName);
							addChild(_moveTower);
							_moveTower.alpha = 0.5;
							_moveTower.x = _runTower.mirrorNum * GlobalVariable.RECT_WIDTH + _tempNum + GlobalVariable.RECT_WIDTH / 2;
							_moveTower.y = _runTower.mirrorRow * GlobalVariable.RECT_HEIGHT + _tempRow + GlobalVariable.RECT_HEIGHT;
						}
					} else {
						removeMoveTower();
					}
					if (_shapePoint) {
						_shapePoint.visible = false;
					}
					// _runTower.filters = [new GlowFilter(0xFF0000, 1, 6, 6, 2, 2)];// 红色
					_runTower.filters = [new ColorMatrixFilter([1, 0.2, 0.2, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 1, 0])];
					_runTower.viewBuildFlail(true);
				}
			}
		}

		/**
		 * 显示 行走路线
		 * @param	runArray
		 */
		private function showRunLine(runArray : Array) : void {
			_runLine = new Sprite();
			// _runLine.graphics.lineStyle(10, 0xFFD700, 1, false, LineScaleMode.VERTICAL,CapsStyle.NONE, JointStyle.MITER, 10);
			// _runLine.graphics.moveTo((runArray[0] as Node).unitX, (runArray[0] as Node).unitY);
			// _runLine.graphics.lineTo(node.unitX, node.unitY);
			addChild(_runLine);
			var _footClassOne : Class = UICommand.getClass("FootPrintsOne");
			var _footClassTwo : Class = UICommand.getClass("FootPrintsTwo");
			var _angleOne : int = 0;
			var _angleTwo : int = 0;
			var _angleThree : int = 0;
			for (var m : int = 0; m < runArray.length; m++) {
				var nodeOne : Node = runArray[m] as Node;

				if (m + 1 < runArray.length) {
					var nodeTwo : Node = runArray[m + 1] as Node;
					_angleTwo = Math.atan2(nodeTwo.unitY - nodeOne.unitY, nodeTwo.unitX - nodeOne.unitX) / Math.PI * 180;
					// if (m + 2 < runArray.length) {
					// var nodeThree:Node = runArray[m + 2] as Node;
					// _angleThree = Math.atan2(nodeThree.unitY - nodeTwo.unitY, nodeThree.unitX - nodeTwo.unitX) / Math.PI * 180;
					// nodeThree = null;
					// }
					nodeTwo = null;
				}

				var _foot : Sprite;
				if (_angleOne == 0 && _angleTwo == 0) {
					_foot = new _footClassOne() as Sprite;
				} else if (_angleOne == 0 && (_angleTwo == -45 || _angleTwo == -90)) {
					_foot = new _footClassTwo() as Sprite;
				} else if (_angleOne == -45 && _angleTwo == 0) {
					_foot = new _footClassTwo() as Sprite;
					_foot.scaleY = -1;
					_foot.rotation = _angleOne;
				} else if (_angleOne == -45 && _angleTwo == -45) {
					_foot = new _footClassOne() as Sprite;
					_foot.rotation = _angleOne;
				} else if (_angleOne == -90 && _angleTwo == -90) {
					_foot = new _footClassOne() as Sprite;
					_foot.rotation = _angleOne;
				} else if (_angleOne == -90 && _angleTwo == -45) {
					_foot = new _footClassTwo() as Sprite;
					_foot.scaleY = -1;
					_foot.rotation = _angleTwo;
				} else if (_angleOne == -90 && _angleTwo == -135) {
					_foot = new _footClassTwo() as Sprite;
					_foot.rotation = _angleOne;
				} else if (_angleOne == -90 && _angleTwo == 0) {
					_foot = new _footClassTwo() as Sprite;
					_foot.scaleY = -1;
					_foot.rotation = _angleOne;
				} else if (_angleOne == 0 && (_angleTwo == 45 || _angleTwo == 90)) {
					_foot = new _footClassTwo() as Sprite;
					_foot.scaleY = -1;
				} else if (_angleOne == 45 && _angleTwo == 45) {
					_foot = new _footClassOne() as Sprite;
					_foot.rotation = _angleOne;
				} else if (_angleOne == 90 && _angleTwo == 0) {
					_foot = new _footClassTwo() as Sprite;
					_foot.rotation = _angleOne;
				} else if (_angleOne == 90 && (_angleTwo == 180 || _angleTwo == -180)) {
					_foot = new _footClassTwo() as Sprite;
					_foot.rotation = 135;
				} else if (_angleOne == 90 && _angleTwo == 90) {
					_foot = new _footClassOne() as Sprite;
					_foot.rotation = _angleOne;
				} else {
					_foot = new _footClassOne() as Sprite;
					_foot.rotation = _angleTwo;
				}
				_runLine.addChild(_foot);
				_foot.x = nodeOne.unitX;
				_foot.y = nodeOne.unitY;
				nodeOne = null;
				_angleOne = _angleTwo;
				_angleTwo = 0;
			}
			removeOreTower();
			var _intervalSum : int = Math.ceil(runArray.length / 4);
			for (var i : int = 0; i < 3; i++) {
				var _tmpOrganTower : ShowLoadOriginal = getPointTower((runArray[i * _intervalSum] as Node).x, (runArray[i * _intervalSum] as Node).y);
				if (_tmpOrganTower) {
					removeTower(_tmpOrganTower, false);
					var _cutTowerXmlList : XMLList = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == String(_tmpOrganTower.type)).tower.(@id == String(_tmpOrganTower.id));
					var _cutTowerPaper : int = (_tmpOrganTower.type == Towers.ORGAN_TOWER || _tmpOrganTower.type == Towers.OBSTACLE_TOWER) ? int(_cutTowerXmlList.paper) : (_tmpOrganTower.isNew ? int(_cutTowerXmlList.paper) : int(_cutTowerXmlList.paper) * 0.3);
					UICommand.setPaperNum(_cutTowerPaper, 2);
				}
				_tmpOrganTower = null;
				var _oreTower : ShowLoadOriginal = new ShowLoadOriginal("KuangTa");
				_oreTower.id = 602;
				_oreTower.num = (runArray[i * _intervalSum] as Node).y;
				_oreTower.row = (runArray[i * _intervalSum] as Node).x;
				_oreTower.x = (runArray[i * _intervalSum] as Node).unitX;
				_oreTower.y = (runArray[i * _intervalSum] as Node).unitY + GlobalVariable.RECT_HEIGHT / 2;
				(runArray[i * _intervalSum] as Node).isAppear = false;
				MapRectInfo.setFlaseIsAppearPoint((runArray[i * _intervalSum] as Node).x, (runArray[i * _intervalSum] as Node).y);
				_oreTower.type = Towers.ORGAN_TOWER;
				_dataId = new Date();
				_oreTower.unitId = "602" + String(_dataId.time);
				addChild(_oreTower);
				_oreTowerArr.push(_oreTower);
			}

			//if (_runTower)
				//(UIMain.getInstance(UIMain.NAME) as UIMain).addChild(_runTower);
		}

		private var _moveTower : ShowLoadOriginal;
		private var _towerInfoArr : Array = new Array();
		private var _towerArr : Array = new Array();
		private var _buildName : String = "TowerBuildMovieClip";
		private var _buildClass : Class;
		private var _buildMovie : MovieClip;

		/**
		 * 箭塔确定摆放位置 缓存箭塔信息
		 * @param	event
		 */
		private function towersDone(event : MouseEvent = null) : void {
			
			if (_runTower) {
				
				if (_runTower.hasEventListener(MouseEvent.CLICK))
					_runTower.removeEventListener(MouseEvent.CLICK, towersDone);
			}
			
			if (_optionTowerFlag == 0) {
				removeScoop();
				_runTower = event.currentTarget as ShowLoadOriginal;
				removeTower(_runTower);
				_runTower.mirrorRow = _runTower.row;
				_runTower.mirrorNum = _runTower.num;
				_shapePoint = new CircleRange(_runTower.minRange, _runTower.maxRange, _runTower.loadName);
				addChild(_shapePoint);
				_runTower.isMove = true;
				(UIMain.getInstance(UIMain.NAME) as UIMain).addChild(_runTower);
				
				_runTower.x = mouseX;
				_runTower.y = mouseY;
				MapRectInfo.setTrueIsAppearPoint(_runTower.row, _runTower.num);
				MapRectInfo.setTureWalkablePonit(_runTower.row, _runTower.num);
				addEventListener(Event.ENTER_FRAME, optionRunLine);
				_optionTowerFlag = 1;
				Mouse.hide();
			} else if (_optionTowerFlag == 1) {
				_optionTowerFlag = 0;
				if (!_runTower) return;
				var _tempTowerXmlList : XMLList = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == String(_runTower.type)).tower.(@id == String(_runTower.id));
				var _tempTowerPaper : int = int(_tempTowerXmlList.paper);
				var _levelMax:int = int(_tempTowerXmlList.maxLevel);
				if (_tempTowerPaper <= UICommand.getPaperNum(2) || _runTower.isMove) {
					if (!_runTower.isMove) {
						var _tmpTower : ShowLoadOriginal = (UICommand.t.userData[1][0] == 1 || UICommand.t.userData[1][0] == 10040 || UICommand.t.userData[1][0] == 10005 || UICommand.t.userData[1][0] == 10006)?new ShowLoadOriginal(_runTower.loadName,false,false,true,_levelMax):new ShowLoadOriginal(_runTower.loadName);
						addChild(_tmpTower);
						_tmpTower.x = _shapePoint.x;
						_tmpTower.y = _shapePoint.y + GlobalVariable.RECT_HEIGHT / 2;
						_tmpTower.type = _runTower.type;
						_dataId = new Date();
						_tmpTower.unitId = String(_towerId) + String(_dataId.time);
						_tmpTower.id = _runTower.id;
						_tmpTower.num = _runTower.num;
						_tmpTower.row = _runTower.row;
						_tmpTower.mirrorNum = _runTower.num;
						_tmpTower.mirrorRow = _runTower.row;
						_tmpTower.minRange = _runTower.minRange;
						_tmpTower.maxRange = _runTower.maxRange;
						_tmpTower.level = _runTower.level;
						_tmpTower.paper = _runTower.paper;
						_tmpTower.addEventListener(MouseEvent.CLICK, towersDone);
						_tmpTower.addEventListener(MouseEvent.ROLL_OVER, towersOver);
						_tmpTower.addEventListener(MouseEvent.ROLL_OUT, towersOut);
						_towerArr.push(_tmpTower);
						if (getChangeTowerInfo(_runTower.type, _runTower.id, "del")) {
//							if (_runTower.type != Towers.ORGAN_TOWER && _runTower.type != Towers.OBSTACLE_TOWER)
								//_tempTowerPaper *= 0.3;
						} else {
							_tmpTower.isNew = true;
							var _tnObj : Object = new Object();
							_tnObj.dataChange = "add";
							_tnObj.dataType = _runTower.type;
							_tnObj.dataID = _runTower.id;
							_tnObj.dataSum = 1;
							setChangeTowerInfo(_tnObj);
						}
						//UICommand.setPaperNum( -_tempTowerPaper, 2);
						//_sumPaper += _tempTowerPaper;
						setPaperNum();
						_tmpTower = null;
						_dataId = null;
						showBuildMovie(_shapePoint.x, _shapePoint.y);
						sortTower();

						_optionTowerFlag = 1;

						//_nowNum = _runTower.num;
						//_nowRow = _runTower.row;
						if (_runTower.type != Towers.ORGAN_TOWER)
							drawRunLine();
						else
							organTowerMove();
					} else {
						_runTower.isMove = false;
						addChild(_runTower);
						_runTower.x = _runTower.num * GlobalVariable.RECT_WIDTH + _tempNum + GlobalVariable.RECT_WIDTH / 2;
						_runTower.y = _runTower.row * GlobalVariable.RECT_HEIGHT + _tempRow + GlobalVariable.RECT_HEIGHT;
						_runTower.mirrorRow = _runTower.row;
						_runTower.mirrorNum = _runTower.num;
						if (!_runTower.hasEventListener(MouseEvent.CLICK))
							_runTower.addEventListener(MouseEvent.CLICK, towersDone);
						if (!_runTower.hasEventListener(MouseEvent.ROLL_OVER))
							_runTower.addEventListener(MouseEvent.ROLL_OVER, towersOver);
						if (!_runTower.hasEventListener(MouseEvent.ROLL_OUT))
							_runTower.addEventListener(MouseEvent.ROLL_OUT, towersOut);
						_towerArr.push(_runTower);
						_runTower = null;
						removeEventListener(Event.ENTER_FRAME, optionRunLine);
						_optionTowerFlag = 0;
						showBuildMovie(_shapePoint.x, _shapePoint.y);
						removeChild(_shapePoint);
						_shapePoint = null;
						Mouse.show();
					}
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(SoundName.SOUND_BUILD_TOWER_TRUE);
				} else {
					removeFollowMouse();
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(SoundName.SOUND_BUILD_TOWER_FALSE);
					Mouse.show();
				}
				_tempTowerXmlList = null;
				
			} else if (_optionTowerFlag == 2) {
				var _cutNowTower : ShowLoadOriginal = event.currentTarget as ShowLoadOriginal;
				removeTower(_cutNowTower);
				var _cutTowerXmlList : XMLList = XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == String(_cutNowTower.type)).tower.(@id == String(_cutNowTower.id));
				// var _cutTowerPaper:int = (_cutNowTower.type == Towers.ORGAN_TOWER || _cutNowTower.type == Towers.OBSTACLE_TOWER) ? int(_cutTowerXmlList.paper) : (_cutNowTower.isNew ? int(_cutTowerXmlList.paper) : int(_cutTowerXmlList.paper) * 0.3);
				var _cutPaper:int = int(_cutTowerXmlList.paper);
				
				//if (_mapPaper >= _sumPaper) {
					//UICommand.setPaperNum(_cutPaper, 2);
					//
				//}
				//_sumPaper -= _cutPaper;
				setPaperNum();
				var _tObj : Object = new Object();
				if (_cutNowTower.isNew) {
					getChangeTowerInfo(_cutNowTower.type, _cutNowTower.id, "add");
				} else {
					_tObj.dataChange = "del";
					_tObj.dataType = _cutNowTower.type;
					_tObj.dataID = _cutNowTower.id;
					_tObj.dataSum = 1;
					setChangeTowerInfo(_tObj);
				}
				_nowRow = _cutNowTower.row;
				_nowNum = _cutNowTower.num;
				_cutNowTower = null;
				_cutTowerXmlList = null;
				drawRunLine();
				if (_scoopMc) {
					_scoopMc.play();
				}
			} else if (_optionTowerFlag == 3) {
				if (hasEventListener(Event.ENTER_FRAME)) {
					removeEventListener(Event.ENTER_FRAME, optionRunLine);
				}
				(UICommand.t.ui[UIName.UI_DEFENCE_OPERATION] as Object).selected.visible = false;
				_towerType = "";
				_towerId = 0;
				if (_runTower) {
					(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound(SoundName.SOUND_BUILD_TOWER_FALSE);
					if (_runTower.isMove) {
						_nowNum = _runTower.mirrorNum;
						_nowRow = _runTower.mirrorRow;

						drawRunLine();
						addChild(_runTower);
						_runTower.x = _runTower.mirrorNum * GlobalVariable.RECT_WIDTH + _tempNum + GlobalVariable.RECT_WIDTH / 2;
						_runTower.y = _runTower.mirrorRow * GlobalVariable.RECT_HEIGHT + _tempRow + GlobalVariable.RECT_HEIGHT;
						_runTower.row = _runTower.mirrorRow;
						_runTower.num = _runTower.mirrorNum;
						
						_runTower.addEventListener(MouseEvent.ROLL_OVER, towersOver);
						_runTower.addEventListener(MouseEvent.ROLL_OUT, towersOut);
						_towerArr.push(_runTower);
						_runTower.filters = [];

						removeMoveTower();
						_runTower = null;
					} else {
						effectRemoveRunTower();
					}
				}
				if (_shapePoint) {
					removeChild(_shapePoint);
					_shapePoint = null;
				}
				_optionTowerFlag = 0;
				Mouse.show();
			}
			
			if (_runTower) {
				
				if (!_runTower.hasEventListener(MouseEvent.CLICK))
					_runTower.addEventListener(MouseEvent.CLICK, towersDone);
			}
		}

		private function showBuildMovie(sx : Number, sy : Number) : void {
			if (!_buildMovie) {
				_buildClass = UICommand.getClass(_buildName);
				_buildMovie = new _buildClass() as MovieClip;
				addChild(_buildMovie);
				_buildClass = null;
				_buildMovie.x = sx;
				_buildMovie.y = sy + GlobalVariable.RECT_HEIGHT / 2;
				_buildMovie.addFrameScript(_buildMovie.totalFrames - 1, buildMovieComplete);
			} else {
				_buildMovie.visible = true;
				_buildMovie.x = sx;
				_buildMovie.y = sy + GlobalVariable.RECT_HEIGHT / 2;
				_buildMovie.play();
			}
		}

		private var _changeTowerArr : Array = [];

		/**
		 * 摆放塔是否被拆除过
		 * @param	tType
		 * @param	tID
		 * @return
		 */
		private function getChangeTowerInfo(tType : String, tID : int, tChange : String) : Boolean {
			for (var i : int = 0; i < _changeTowerArr.length; i++) {
				if (_changeTowerArr[i].dataType == tType && _changeTowerArr[i].dataID == tID && _changeTowerArr[i].dataChange == tChange) {
					_changeTowerArr[i].dataSum -= 1;
					if (_changeTowerArr[i].dataSum <= 0)
						_changeTowerArr.splice(i, 1);
					return true;
				}
			}
			return false;
		}

		/**
		 * 暂时存储修改布防信息
		 * @param	obj
		 * 			obj.dataChange = ("add"\"del") 此塔是添加还是拆除
		 * 			obj.dataType      此塔的类型
		 * 			obj.dataID          此塔的编号
		 * 			obj.dataSum       此塔的数量
		 */
		private function setChangeTowerInfo(obj : Object) : void {
			for (var i : int = 0; i < _changeTowerArr.length; i++) {
				if (_changeTowerArr[i].dataType == obj.dataType && _changeTowerArr[i].dataID == obj.dataID && _changeTowerArr[i].dataChange == obj.dataChange) {
					_changeTowerArr[i].dataSum += 1;
					return;
				}
			}
			_changeTowerArr.push(obj);
		}

		/**
		 * 布防完毕 ，取得加减塔 结算数据
		 * @return
		 */
		public function getSettlementTowerInfoArr() : Array {
			return _changeTowerArr;
		}

		private var _effectRunTimer : Timer;
		private var _effectAlpha : Number = 1;
		private var _addFlag : Boolean = true;
		private var _effectX : Number;
		private var _effectY : Number;

		/**
		 * 塔超越范围
		 * 移除塔动画
		 */
		private function effectRemoveRunTower() : void {
			_addFlag = false;
			if (_runTower) {
				
				_runTower.filters = [];
				_effectX = (_runTowerX - _runTower.x) / 25;
				_effectY = (_runTowerY - _runTower.y) / 25;
			}
			_effectRunTimer = new Timer(5, 25);
			_effectRunTimer.addEventListener(TimerEvent.TIMER, effectRunTimerHandler);
			_effectRunTimer.addEventListener(TimerEvent.TIMER_COMPLETE, effectRunTimerComplete);
			_effectRunTimer.start();
		}

		private function effectRunTimerHandler(event : TimerEvent) : void {
			_effectAlpha -= 0.04;
			if (_runTower) {
				
				_runTower.alpha = _effectAlpha;
				_runTower.x += _effectX;
				_runTower.y += _effectY;
			}
		}

		private function effectRunTimerComplete(event : TimerEvent = null) : void {
			_effectAlpha = 1;
			
			removeRunTower();
			_addFlag = true;
		}

		private function buildMovieComplete() : void {
			_buildMovie.gotoAndStop(1);
			_buildMovie.visible = false;
		}
		private var _runTowerArr:Array = [];
		/**
		 * 移除当前移动塔
		 */
		public function removeRunTower() : void {
			_towerType = "";
			_towerId = 0;
			
			if (_effectRunTimer) {
				_effectRunTimer.reset();
				_effectRunTimer.removeEventListener(TimerEvent.TIMER, effectRunTimerHandler);
				_effectRunTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, effectRunTimerComplete);
				_effectRunTimer = null;
			}
			
			if (_shapePoint) {
				removeChild(_shapePoint);
				_shapePoint = null;
			}
			
			if(_runTower)(UIMain.getInstance(UIMain.NAME) as UIMain).removeChild(_runTower);
			_runTower = null;
			_runTowerArr = [];

			if (hasEventListener(Event.ENTER_FRAME))
				removeEventListener(Event.ENTER_FRAME, optionRunLine);
		}

		/**
		 * 移除跟随鼠标的建筑物或者铲子
		 */
		public function removeFollowMouse(... args) : void {
			removeRunTower();
			removeScoop();
			_optionTowerFlag = 0;
		}

		private function towersOver(event : MouseEvent) : void {
			(event.currentTarget as ShowLoadOriginal).filters = [new ColorMatrixFilter([1, 0, 0, 0, 50, 0, 1, 0, 0, 50, 0, 0, 1, 0, 50, 0, 0, 0, 1, 0])];
			// 提高亮度
		}

		private function towersOut(event : MouseEvent) : void {
			(event.currentTarget as ShowLoadOriginal).filters = [];
		}

		/**
		 * 排序 箭塔 显示对象
		 */
		private function sortTower() : void {
			
			for each (var tm:DisplayObject in _towerArr) {
				
				removeChild(tm);
			}
			
			for (var i : int = 0; i < _towerArr.length; i++) {
				for (var j : int = i; j < _towerArr.length; j++) {
					var obj:Object = _towerArr[i];
					if ((_towerArr[i] as ShowLoadOriginal).row > (_towerArr[j] as ShowLoadOriginal).row) {
						
						_towerArr[i] = _towerArr[j];
						_towerArr[j] = obj;
					}
				}
			}
			
			for each (var tn:Object in _towerArr) {
				
				addChild(tn as DisplayObject);
				tn.x = int(_siteArr[0]) + int(tn.num) * GlobalVariable.RECT_WIDTH + GlobalVariable.RECT_WIDTH / 2;
				tn.y = int(_siteArr[1]) + int(tn.row) * GlobalVariable.RECT_HEIGHT + GlobalVariable.RECT_HEIGHT;
			}
		}

		private var _optionTowerFlag : int = 0;

		/**
		 * 拆除 塔时  优先 调用函数
		 * value: 1、添加；2、拆除；3、越界
		 */
		public function set optionTowerFlag(value : int) : void {
			_optionTowerFlag = value;
		}

		/**
		 * 移除指定箭塔
		 * @param	tower 指定箭塔引用
		 */
		private function removeTower(tower : ShowLoadOriginal, valueFlag : Boolean = true) : void {
			var _towerInt : int = _towerArr.indexOf(tower);
			if (_towerInt != -1) {
				if (valueFlag)
					MapRectInfo.setTrueIsAppearPoint(tower.row, tower.num);
				if (tower.type != Towers.OBSTACLE_TOWER) {
					if (tower.hasEventListener(MouseEvent.CLICK))
						tower.removeEventListener(MouseEvent.CLICK, towersDone);
					if (tower.hasEventListener(MouseEvent.ROLL_OVER))
						tower.removeEventListener(MouseEvent.ROLL_OVER, towersOver);
					if (tower.hasEventListener(MouseEvent.ROLL_OUT))
						tower.removeEventListener(MouseEvent.ROLL_OUT, towersOut);
				} else {
					if (tower.hasEventListener(MouseEvent.CLICK))
						tower.removeEventListener(MouseEvent.CLICK, obTowerClickHandler);
					if (tower.hasEventListener(MouseEvent.ROLL_OVER))
						tower.removeEventListener(MouseEvent.ROLL_OVER, obTowerOverHandler);
					if (tower.hasEventListener(MouseEvent.ROLL_OUT))
						tower.removeEventListener(MouseEvent.ROLL_OUT, obTowerOutHandler);
				}
				MapRectInfo.setTrueIsAppearPoint(tower.row, tower.num);
				MapRectInfo.setTureWalkablePonit(tower.row, tower.num);
				removeChild(tower);
				_towerArr.splice(_towerInt, 1);
			}

			tower = null;
		}

		/**
		 * 得到此位置是否有指定类型的塔
		 * @param	valueRow
		 * @param	valueNum
		 * @param	valueType
		 * @return
		 */
		private function getPointTower(valueRow : int, valueNum : int, valueType : String = "organTower") : ShowLoadOriginal {
			for each (var tower:ShowLoadOriginal in _towerArr) {
				if (tower.row == valueRow && tower.num == valueNum && tower.type == valueType)
					return tower;
			}
			return null;
		}
		private var _sumPaper:int = 0;
		private var _mapPaper:int = 0;
		private var _addPaper:int = 0;
		/**
		 * 编辑当前地图,地图已存在
		 * @param	dMapInfo  防御地图箭塔信息信息
		 */
		public function optionNowDefenceMap(_towerObj : Object) : void {
			removeAll();
			_warMapFlag = false;
			_optionTowerFlag = 0;
			_towerInfoArr = sortTowerInfo(_towerObj.mapInfo as Array);
			_aStar = new AStar();
			_grid = new Grid();
			_siteArr = new Array();
			_endArr = new Array();
			_startArr = new Array();
			_rectArr = new Array();
			_towerInfo = new Array();
			_mapId = int(_towerObj.mapId);
			_startId = int(_towerObj.materialId);
			
			_addPaper = _towerObj.dataAddPaper ? int(_towerObj.dataAddPaper) : 0;
			var mapXmlList : XMLList = XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapId);
			var mapNameUrl : String = String(mapXmlList.mapMaterial.mapUrl.(@startId == _startId).urlName);
			var mapUrl : String = ConstPath.MATERIAL_PATH + ConstPath.PNG_PATH + ConstPath.MAP_PATH + mapNameUrl;
			_mapPaper = (UICommand.t.userData[1][0] == 1 || UICommand.t.userData[1][0] == 10040 || UICommand.t.userData[1][0] == 10005 || UICommand.t.userData[1][0] == 10006) ? (int(mapXmlList.mapPaper) + _addPaper) * 2 : (int(mapXmlList.mapPaper) + _addPaper);
			_loadMapNum = 2;
			warMap = new Loader();
			warMap.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, warMapIoError);
			warMap.contentLoaderInfo.addEventListener(Event.COMPLETE, defenceMapLoadComplete);
			warMap.load(new URLRequest(mapUrl));
			addChild(warMap);

			_siteArr = String(mapXmlList.mapSite).split(",");
			_endArr = String(mapXmlList.mapEndNode).split(",");
			_startArr = String(mapXmlList.mapMaterial.mapUrl.(@startId == _startId).startNode).split(",");
			_mapPath = int(mapXmlList.mapMaterial.mapUrl.(@startId == _startId).mapPath);
			_rectArr = String(mapXmlList.mapFormat).split("*");
			
			switch(_mapPath) {
				
				case 1:
					addHeroAltar(int(_siteArr[0]) + (int(_startArr[1]) - 0.5) * GlobalVariable.RECT_WIDTH, int(_siteArr[1]) + (int(_startArr[0]) + 0.5) * GlobalVariable.RECT_HEIGHT, 0, 59);
					break;
					
				case 2:
					addHeroAltar(int(_siteArr[0]) + (int(_startArr[1]) + 0.5) * GlobalVariable.RECT_WIDTH, int(_siteArr[1]) + (int(_rectArr[0]) + 0.5) * GlobalVariable.RECT_HEIGHT, 0, 59);
					break;
					
				case 3:
					addHeroAltar(int(_siteArr[0]) + (int(_startArr[1]) + 0.5) * GlobalVariable.RECT_WIDTH, int(_siteArr[1]) + (int(_startArr[0]) - 0.5) * GlobalVariable.RECT_HEIGHT, 0, 59);
					break;
			}
			
			_freeBirdX = (int(_rectArr[1]) - 8) * GlobalVariable.RECT_WIDTH;
			removeFreedomBird();
			showFreedomBird();

			var _gridUrl : String = ConstPath.MATERIAL_PATH + ConstPath.PNG_PATH + ConstPath.MAP_PATH + String(mapXmlList.grid);
			_rectLayer = new Loader();
			_rectLayer.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, rectLayerIoError);
			_rectLayer.contentLoaderInfo.addEventListener(Event.COMPLETE, rectLayerLoadComplete);
			_rectLayer.load(new URLRequest(_gridUrl));
			addChild(_rectLayer);
			_rectLayer.x = int(_siteArr[0]);
			_rectLayer.y = int(_siteArr[1]);
			
			_tempRight = int(_siteArr[0]) + (int(_rectArr[1]) - 1) * GlobalVariable.RECT_WIDTH;
			
			_tempNum = int(_siteArr[0]);
			_tempRow = int(_siteArr[1]);

			_grid.nodes = MapRectInfo.creatMapRectInfo(int(_siteArr[0]), int(_siteArr[1]), int(_rectArr[0]), int(_rectArr[1]));
			MapRectInfo.optionMapPoint(_towerInfoArr);
			_grid.setStartNode(int(_startArr[0]), int(_startArr[1]));
			_grid.setEndNode(int(_endArr[0]), int(_endArr[1]));

			if (_aStar.findPath(_grid)) {
				showRunLine(_aStar.path);
			}

			var towerInfo : XML = XMLSource.getXMLSource("TowerInfo.xml");
			
			for each (var infObj:Object in _towerInfoArr) {
				if (int(infObj.id == 602))
					continue;

				var elementTowerInfo : XMLList = towerInfo.towerType.(@type == String(infObj.type)).tower.(@id == infObj.id);
				//_sumPaper += int(elementTowerInfo.paper);
				var _levelMax:int = int(elementTowerInfo.maxLevel);
				
				var tower : ShowLoadOriginal = ((UICommand.t.userData[1][0] == 1 || UICommand.t.userData[1][0] == 10040 || UICommand.t.userData[1][0] == 10005 || UICommand.t.userData[1][0] == 10006)&& String(infObj.type) != Towers.OBSTACLE_TOWER)?new ShowLoadOriginal(String(elementTowerInfo.name),false,false,true,_levelMax):new ShowLoadOriginal(String(elementTowerInfo.name), false, true);
				
				tower.x = int(infObj.num) * GlobalVariable.RECT_WIDTH + int(_siteArr[0]) + GlobalVariable.RECT_WIDTH / 2;
				tower.y = int(infObj.row) * GlobalVariable.RECT_HEIGHT + int(_siteArr[1]) + GlobalVariable.RECT_HEIGHT;
				tower.num = int(infObj.num);
				tower.row = int(infObj.row);
				tower.id = int(infObj.id);
				tower.level = int(infObj.level);
				tower.paper = int(elementTowerInfo.paper);
				tower.unitId = String(infObj.unitId);
				tower.type = String(infObj.type);
				tower.minRange = Number(elementTowerInfo.minAttackRange);
				tower.maxRange = Number(elementTowerInfo.maxAttackRange);

				addChild(tower);

				if (String(infObj.type) == Towers.OBSTACLE_TOWER && tower.loadName != "QiangTa") {
					tower.addEventListener(MouseEvent.CLICK, obTowerClickHandler);
					tower.addEventListener(MouseEvent.ROLL_OUT, obTowerOutHandler);
					tower.addEventListener(MouseEvent.ROLL_OVER, obTowerOverHandler);
				} else {
					tower.addEventListener(MouseEvent.CLICK, towersDone);
					tower.addEventListener(MouseEvent.ROLL_OUT, towersOut);
					tower.addEventListener(MouseEvent.ROLL_OVER, towersOver);
				}
				_towerArr.push(tower);
				tower = null;
			}
			
			setPaperNum();
			
			mapXmlList = null;
			towerInfo = null;
		}
		
		private function setPaperNum():void {
			
			_sumPaper = 0;
			for each (var obj:Object in _towerArr) {
				
				_sumPaper += obj.paper;
			}
			
			var nowPaper:int = UICommand.getPaperNum(2);
			var mPaper:int = _mapPaper - _sumPaper;
			
			if (mPaper > 0) {
				
				if (nowPaper != mPaper) {
					
					UICommand.setPaperNum(mPaper - nowPaper, 2);
				}
				
			}
			else {
				
				UICommand.setPaperNum( -nowPaper, 2);
			}
		}

		/**
		 * 对箭塔数据进行竖向层排序
		 * @param	_towerInfo
		 * @return
		 */
		private function sortTowerInfo(_tempTowerInfoArr : Array) : Array {
			var _towerLen : int = _tempTowerInfoArr.length;
			for (var m : int = 0; m < _towerLen; m++) {
				for (var n : int = m; n < _towerLen; n++) {
					var obj : Object = _tempTowerInfoArr[m];
					if (_tempTowerInfoArr[m].row > _tempTowerInfoArr[n].row) {
						_tempTowerInfoArr[m] = _tempTowerInfoArr[n];
						_tempTowerInfoArr[n] = obj;
					}
					obj = null;
				}
			}

			return _tempTowerInfoArr;
		}

		/**
		 * 移除所有 箭塔
		 */
		private function removeAllTower() : void {
			for each (var tower:ShowLoadOriginal in _towerArr) {
				removeChild(tower);
			}

			_towerArr = [];
		}

		/**
		 * 移除所有障碍物
		 */
		private function removeObstacleTower() : void {
			for each (var tower:ShowLoadOriginal in _obstacleTowerArr) {
				removeChild(tower);
			}

			_obstacleTowerArr = [];
		}

		/**
		 * 移除所有 存在 矿
		 */
		private function removeOreTower() : void {
			for each (var tower:ShowLoadOriginal in _oreTowerArr) {
				MapRectInfo.setTrueIsAppearPoint(tower.row, tower.num);
				removeChild(tower);
			}

			_oreTowerArr = [];
		}

		/**
		 * 确定此位置是否有矿
		 * @param	valueRow
		 * @param	valueNum
		 * @return
		 */
		private function orePointIsAppear(valueRow : int, valueNum : int) : Boolean {
			for each (var tower:ShowLoadOriginal in _oreTowerArr) {
				if (tower.row == valueRow && tower.num == valueNum)
					return true;
			}
			return false;
		}

		/**
		 * 移除所有建筑
		 */
		public function removeAll() : void {
			_mapPaper = 0;
			_sumPaper = 0;
			_addPaper = 0;
			_changeTowerArr = [];
			removeAllTower();
			removeOreTower();
			removeObstacleTower();
			removeWarMap();
			removeMoveTower();
			removeFreedomBird();
			removeScoop();
			if (_runLine) {
				removeChild(_runLine);
				_runLine = null;
			}
			if (_runTower) {
				removeChild(_runTower);
				_runTower = null;
			}
			if (_shapePoint) {
				removeChild(_shapePoint);
				_shapePoint = null;
			}
			if (_buildMovie) {
				removeChild(_buildMovie);
				_buildMovie = null;
			}

			if (hasEventListener(Event.ENTER_FRAME)) {
				removeEventListener(Event.ENTER_FRAME, optionRunLine);
			}
			Mouse.show();
			if (_makeSoldierMovie) {
				removeChild(_makeSoldierMovie);
				_makeSoldierMovie = null;
			}
			
			if (_heroAltar) {
				
				removeChild(_heroAltar);
				_heroAltar = null;
			}
			
		}

		private function removeMoveTower() : void {
			if (_moveTower) {
				removeChild(_moveTower);
				_moveTower = null;
			}
		}

		/**
		 * 创建布防信息-箭塔数据
		 */
		public function createTowerInfo() : Object {
			removeScoop();
			var _towerObjArr : Array = new Array();
			for each (var obTower:ShowLoadOriginal in _obstacleTowerArr) {
				var _obTowerObj : Object = new Object();
				_obTowerObj.id = obTower.id;
				_obTowerObj.num = obTower.num;
				_obTowerObj.row = obTower.row;
				_obTowerObj.type = obTower.type;
				_obTowerObj.unitId = obTower.unitId;
				_obTowerObj.level = obTower.level;
				_towerObjArr.push(_obTowerObj);
			}

			for each (var oreTower:ShowLoadOriginal in _oreTowerArr) {
				var _oreTowerObj : Object = new Object();
				_oreTowerObj.id = oreTower.id;
				_oreTowerObj.num = oreTower.num;
				_oreTowerObj.row = oreTower.row;
				_oreTowerObj.type = oreTower.type;
				_oreTowerObj.unitId = oreTower.unitId;
				_oreTowerObj.level = oreTower.level;
				_towerObjArr.push(_oreTowerObj);
			}

			for each (var tower:ShowLoadOriginal in _towerArr) {
				var _towerObj : Object = new Object();
				_towerObj.id = tower.id;
				_towerObj.num = tower.num;
				_towerObj.row = tower.row;
				_towerObj.type = tower.type;
				_towerObj.unitId = tower.unitId;
				_towerObj.level = tower.level;
				_towerObjArr.push(_towerObj);
			}

			var _mapObjInfo : Object = new Object();
			_mapObjInfo.mapPaper = UICommand.getPaperNum(2);
			_mapObjInfo.mapId = _mapId;
			_mapObjInfo.materialId = _startId;
			_mapObjInfo.mapInfo = _towerObjArr;
			// dispatchEvent(new EventBindingData(EventNameList.BACKGROUND_MAP_INFO, JSON.encode(_mapObjInfo)));
			if (UICommand.t.userData[1][0] == 1 || UICommand.t.userData[1][0] == 10040 || UICommand.t.userData[1][0] == 10005 || UICommand.t.userData[1][0] == 10006) {
				(UIMain.getInstance(InformationLayer.NAME) as InformationLayer).showDefenceInfo(JSON.encode(_mapObjInfo));
			}
			if (_towerObjArr.length > 0)
				return _mapObjInfo;
			else
				return null;
		}

		/**
		 * 测试当前地图
		 */
		public function testNowMap() : void {
		}

		private var _freedomBirdMovie : MovieClip;
		private var _freeBirdX : int = 0;

		private function showFreedomBird() : void {
			if (!_freedomBirdMovie) {
				var _mClass : Class = UICommand.getClass("FreedomBird");
				_freedomBirdMovie = new _mClass() as MovieClip;
				addChild(_freedomBirdMovie);
				_mClass = null;
				_freedomBirdMovie.x = _freeBirdX + 80;
				_freedomBirdMovie.gotoAndStop(1);
			}
		}

		private function removeFreedomBird() : void {
			if (_freedomBirdMovie) {
				removeChild(_freedomBirdMovie);
				_freedomBirdMovie = null;
			}
		}
	}
}