///////////////////////////////////////////////////////////
//  BirdLayer.as
//  Macromedia ActionScript Implementation of the Class BirdLayer
//  Generated by Enterprise Architect
//  Created on:      13-十一月-2011 15:09:17
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.birdLayer
{
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.tools.aStar.Node;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.utils.Timer;
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 13-十一月-2011 15:09:17
	 */
	public class BirdLayer extends Sprite
	{
		public static const NAME:String = "BirdLayer";
		public function BirdLayer(){
			UIMain.setInstance(NAME, this);
		}
		
		private var _speed:Number = 4;
		private var _birdX:Number;
		private var _birdY:Number;
		
		private var _birds:Birds;
		
		private var _flyRectArr:Array;
		private var _flyChangeArr:Array;
		private var _flyIsAppearArr:Array;
		private var _flyArr:Array;
		private var _startX:int = -100;
		private var _startY:int = -100;
		public function showBirds():void {
			
			_flyRectArr = new Array();
			_flyChangeArr = new Array();
			_flyIsAppearArr = new Array();
			_flyArr = new Array();
			
			walkFlag = 0;
			_nowX = 0;
			_nowY = 0;
			_nextX = 0;
			_nextY = 0;
			
			for (var i:int = 0; i < 16; i ++ ) {
				
				for (var j:int = 0; j < 20; j++ ) {
					var _node:Node = new Node(i, j, _startX + GlobalVariable.RECT_WIDTH * j, _startY + GlobalVariable.RECT_HEIGHT * i);
					_flyRectArr.push(_node);
					if (!(j <= 14 && j >= 4 && i >= 4 && i <= 11))
						_node.walkable = false;
					if (!(i < 1 || i > 14 || j < 1 || j > 18))
						_node.isAppear = false;
						
				}
			}
			
			for (var m:int = 0; m < _flyRectArr.length; m++ ) {
				if ((_flyRectArr[m] as Node).walkable)
					_flyChangeArr.push(_flyRectArr[m]);
			}
			
			for (var n:int = 0; n < _flyRectArr.length; n++ ) {
				if ((_flyRectArr[n] as Node).isAppear)
					_flyIsAppearArr.push(_flyRectArr[n]);
			}
			
			_flyArr = getFlyArr();
			
			_birds = new Birds();
			addChild(_birds);
			_birds.x = (_flyArr[0] as Node).unitX;
			_birds.y = (_flyArr[0] as Node).unitY;
			
			addEventListener(Event.ENTER_FRAME, enterFramehandler);
		}
		
		public function removeAll():void {
			
			if (hasEventListener(Event.ENTER_FRAME))
				removeEventListener(Event.ENTER_FRAME, enterFramehandler);
			if (_birds) {
				removeChild(_birds);
				_birds = null;
			}
			
			if (_flyTimer) {
				
				_flyTimer.reset();
				_flyTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, flyTimerComplete);
				_flyTimer = null;
			}
		}
		
		private function getFlyArr():Array {
			
			var _arr:Array = new Array();
			var _num:int = Math.random() * _flyIsAppearArr.length;
			_arr.push(_flyIsAppearArr[_num]);
			_num = Math.random() * _flyChangeArr.length;
			_arr.push(_flyChangeArr[_num]);
			_num = Math.random() * _flyIsAppearArr.length;
			_arr.push(_flyIsAppearArr[_num]);
			return _arr;
		}
		
		private var _flyTimer:Timer;
		private function enterFramehandler(event:Event):void {
			
			if (walkFlag == 0)
				walk();
			
			_birds.x += _birdX;
			_birds.y += _birdY;
			_birds.render();
			if (Point.distance(new Point(_birds.x,_birds.y), new Point(_nowX,_nowY)) >= _walkDistance) {
				
				if (walkFlag < _flyArr.length - 1) {
					
					walk();
				}
				else {
					
					removeEventListener(Event.ENTER_FRAME, enterFramehandler);
					
					removeChild(_birds);
					_birds = null;
					
					_flyTimer = new Timer(10000, 1);
					_flyTimer.addEventListener(TimerEvent.TIMER_COMPLETE, flyTimerComplete);
					_flyTimer.start();
					
					
				}
			}
			
		}
		
		
		private function flyTimerComplete(event:TimerEvent):void {
			
			_flyTimer.reset();
			_flyTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, flyTimerComplete);
			_flyTimer = null;
			
			_flyArr = getFlyArr();
			_birds = new Birds();
			addChild(_birds);
			_birds.x = (_flyArr[0] as Node).unitX;
			_birds.y = (_flyArr[0] as Node).unitY;
			walkFlag = 0;
			_nowX = 0;
			_nowY = 0;
			_nextX = 0;
			_nextY = 0;
			
			addEventListener(Event.ENTER_FRAME, enterFramehandler);
		}
		
		private var _nowX:int = 0;
		private var _nowY:int = 0;
		private var _nextX:int = 0;
		private var _nextY:int = 0;
		private var walkFlag:int = 0;
		private var _walkDistance:Number = 0;
		/**
		 * 行走阶段路径计算
		 */
		private function walk():void {
			
			if (_flyArr.length > 0) {
				
				_nowX = (_flyArr[walkFlag] as Node).unitX;
				_nowY = (_flyArr[walkFlag] as Node).unitY;
				_birds.x = _nowX;
				_birds.y = _nowY;
				if (walkFlag < _flyArr.length - 1) {
					_nextX = (_flyArr[walkFlag + 1] as Node).unitX;
					_nextY = (_flyArr[walkFlag + 1] as Node).unitY;
				}else {
					
					return;
				}
				
				//计算需行走直线距离
				_walkDistance = Point.distance(new Point(_nowX,_nowY),new Point(_nextX,_nextY));
				//计算行走角度
				var _bAngle:Number = Math.atan2(_nextY - _nowY, _nextX - _nowX);
				_birds.rotationBird(_bAngle / Math.PI * 180);
				//设定行走 X ，Y 分速度
				_birdX = _speed * Math.cos(_bAngle);
				_birdY = _speed * Math.sin(_bAngle);
				
				walkFlag ++;
				
			}
		}
	}//end BirdLayer

}