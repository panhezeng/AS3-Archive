///////////////////////////////////////////////////////////
//  CircleRange.as
//  Macromedia ActionScript Implementation of the Class CircleRange
//  Generated by Enterprise Architect
//  Created on:      16-九月-2011 12:08:47
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.backgroundLayer.component
{
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.SecurityErrorEvent;
	import flash.net.URLRequest;
	import flash.system.ApplicationDomain;
	import flash.system.LoaderContext;
	import flash.system.SecurityDomain;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 16-九月-2011 12:08:47
	 */
	public class CircleRange extends Sprite
	{
		private var _shapePoint:Shape;
		private var _circle:Shape;
		private var loadMovieClip:MovieClip;
		private var loadMovieClipClass:Class;
		private var load:Loader;
		public var loadName:String;
		public var num:int = 0;
		public var row:int = 0;
		public var type:String = "";
		public var id:int = 0;
		public var level:int = 1;
		public var unitId:String = "";
		private var _frameNum:int = 1;
		public function CircleRange(minRange:Number,maxRange:Number,towerName:String){
			
			_circle = new Shape();
			_circle.graphics.beginFill(0xFFFFFF, 0.3);
			//_circle.graphics.lineStyle(2, 0x000000);
			_circle.graphics.drawCircle(0, 0, maxRange * GlobalVariable.RECT_WIDTH);
			_circle.graphics.drawCircle(0, 0, minRange * GlobalVariable.RECT_WIDTH);
			_circle.graphics.endFill();
			addChild(_circle);
			if (!towerName)
				return;
			loadName = towerName;
			if (ApplicationDomain.currentDomain.hasDefinition(towerName)) {
				
				loadMovieClipClass = ApplicationDomain.currentDomain.getDefinition(towerName) as Class;
				loadMovieClip = new loadMovieClipClass() as MovieClip;
				//_frameNum = Math.random() * loadMovieClip.totalFrames + 1;
				loadMovieClip.gotoAndStop(_frameNum);
				addChild(loadMovieClip);
				loadMovieClip.enabled = false;
				loadMovieClip.alpha = 0.7;
				loadMovieClip.y = GlobalVariable.RECT_HEIGHT / 2;
			}else {
				
				load = new Loader();
				load.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete);
				load.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadIoError);
				load.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
				
//				var loadUrl:String = ConstPath.SERVER_ROOT + ConstPath.SWF_PATH + className + ConstPath.SWF_SUFFIX;
				var loadUrl:String = ConstPath.SWF_PATH + towerName + ConstPath.SWF_SUFFIX;
				
				var context:LoaderContext = new LoaderContext(); //加载到指定共享域
				context.applicationDomain = ApplicationDomain.currentDomain;
//				context.securityDomain = SecurityDomain.currentDomain;
				
				load.load(new URLRequest(loadUrl),context);
			}
		}
		private function loadComplete(event:Event):void {
			
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
			loadMovieClipClass = ApplicationDomain.currentDomain.getDefinition(loadName) as Class;
			loadMovieClip = new loadMovieClipClass() as MovieClip;
			//_frameNum = Math.random() * loadMovieClip.totalFrames + 1;
			loadMovieClip.gotoAndStop(_frameNum);
			addChild(loadMovieClip);
			loadMovieClip.enabled = false;
			loadMovieClip.alpha = 0.7;
			loadMovieClip.y = GlobalVariable.RECT_HEIGHT / 2;
		}
		
		private function loadIoError(event:IOErrorEvent):void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
		}
		
		private function loadSecurityError(event:SecurityErrorEvent):void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
		}
	}//end CircleRange

}