// // // // ///////////////////////////////////////////////////
// UIMain.as
// Macromedia ActionScript Implementation of the Class UIMain
// Generated by Enterprise Architect
// Created on:      01-六月-2011 10:40:10
// Original author: LuXianli
// // // // ///////////////////////////////////////////////////
package com.raytoon.cannonfodder.puremvc.view.ui {
	import adobe.utils.ProductManager;
	
	import com.raytoon.cannonfodder.puremvc.ApplicationFacade;
	import com.raytoon.cannonfodder.puremvc.view.ui.backgroundLayer.BackgroundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.birdLayer.BirdLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.buffLayer.BuffLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.informationLayer.InformationLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.newUserLayer.IntroMovieLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.newUserLayer.NewUserMovieLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.OptionMainLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.sheepLayer.SheepLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.taskLayer.TaskLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.techTreeLayer.TechTreeLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.toolsLayer.ToolsLayer;
	import com.raytoon.cannonfodder.tools.EventBindingData;
	import com.raytoon.cannonfodder.tools.load.LoadMainLibrary;
	import com.raytoon.cannonfodder.tools.load.ShowLoading;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.utils.MouseStyleNow;
	import com.raytoon.cannonfodder.tools.utils.NotificationNameList;
	import com.raytoon.cannonfodder.tools.utils.SoundName;
	import com.raytoon.cannonfodder.tools.utils.UIName;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.LoaderInfo;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.display.StageAlign;
	import flash.display.StageQuality;
	import flash.display.StageScaleMode;
	import flash.events.ContextMenuEvent;
	import flash.events.Event;
	import flash.events.TimerEvent;
	import flash.external.ExternalInterface;
	import flash.geom.Point;
	import flash.net.URLRequest;
	import flash.net.navigateToURL;
	import flash.text.TextField;
	import flash.ui.ContextMenu;
	import flash.ui.ContextMenuItem;
	import flash.ui.Mouse;
	import flash.ui.MouseCursor;
	import flash.ui.MouseCursorData;
	import flash.utils.Timer;

	/**
	 * <font color="#000000">主UI容器，容纳所有ui层</font>
	 * @author LuXianli
	 * @version 1.0
	 * @updated 01-六月-2011 10:43:25
	 */
	public class UIMain extends Sprite {
		[Embed(source = "MouseIco.png")]
		private var _img : Class;
		[Embed(source = "MouseBtnIcon.png")]
		private var _imgBtn : Class;
		public static const NAME : String = "UIMain";
		private static var UI_CLASS : Object = new Object();
		// 静态变量；类实例引用存储对象
		public static var USER_TYPE_FLAG : Boolean = false;
		// S是否是新用户
		public var backgroundLayer : BackgroundLayer = new BackgroundLayer();
		public var optionMainLayer : OptionMainLayer = new OptionMainLayer();
		public var toolsLayer : ToolsLayer = new ToolsLayer();
		public var informationLayer : InformationLayer = new InformationLayer();
		public var techTreeLayer : TechTreeLayer = new TechTreeLayer();
		public var buffLayer : BuffLayer = new BuffLayer();
		public var _birdLayer : BirdLayer = new BirdLayer();
		public var _soundLayer : SoundLayer = SoundLayer.getInstance();
		private var _sheepLayer : SheepLayer = new SheepLayer();
		private var _taskLayer : TaskLayer = new TaskLayer();
		private var _mouse : MouseStyleNow;

		/**
		 * 静态方法；通过类名（NAME）得到类实例引用
		 * @param	className  类名
		 * @return       类实例引用
		 */
		public static function getInstance(className : String) : * {
			if (!UI_CLASS[className])
				return null;
			return UI_CLASS[className];
		}

		/**
		 * 静态方法；通过mapobj 存储 类名与类引用 键值对
		 * @param	className  类名
		 * @param	classUi        类引用
		 */
		public static function setInstance(className : String, classUi : *) : void {
			if (!UI_CLASS[className])
				UI_CLASS[className] = classUi;
		}

		/**
		 * 构造函数 初始化游戏 UI
		 */
		public function UIMain() {
			UIMain.setInstance(UIMain.NAME, this);

			if (stage)
				initUI();
			else
				addEventListener(Event.ADDED_TO_STAGE, initUI);
		}

		/**
		 * 
		 * @param	event 事件置空 节省stage内存事件资源 
		 */
		private function initUI(event : Event = null) : void {
			if (hasEventListener(Event.ADDED_TO_STAGE))
				removeEventListener(Event.ADDED_TO_STAGE, initUI);

			fixData();

			var _mouseBtnData : MouseCursorData = new MouseCursorData();
			_mouseBtnData.data = Vector.<BitmapData>([Bitmap(new _imgBtn()).bitmapData, Bitmap(new _img()).bitmapData]);
			_mouseBtnData.hotSpot = new Point(0, 0);
			_mouseBtnData.frameRate = 4;
			Mouse.registerCursor(NEW_BUTTON, _mouseBtnData);
			Mouse.cursor = NEW_BUTTON;

			var _mouseData : MouseCursorData = new MouseCursorData();
			_mouseData.data = Vector.<BitmapData>([Bitmap(new _img()).bitmapData]);
			_mouseData.hotSpot = new Point(0, 0);
			Mouse.registerCursor(NEW_COMMON, _mouseData);
			Mouse.cursor = NEW_COMMON;

			mouseCursorFlag = true;
		}

		public static var mouseCursorFlag : Boolean = false;
		public static const NEW_COMMON : String = "common";
		public static const NEW_BUTTON : String = "newButton";

		public static function set mouseCursor(value : String) : void {
			if (mouseCursorFlag) Mouse.cursor = value;
		}

		/**
		 * 使舞台显示对象的位置相对固定不出现 拉伸和扭曲
		 */
		private function fixData() : void {
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.align = StageAlign.TOP_LEFT;
			stage.showDefaultContextMenu = false;

			var rightMuen : ContextMenu = new ContextMenu();
			rightMuen.hideBuiltInItems();
			rightMuen.builtInItems.print = true;
			this.contextMenu = rightMuen;
			// rightMuen.link = new URLRequest("http://www.raytoon.cn");
			var rightItem : ContextMenuItem = new ContextMenuItem("锐意通-炮灰战记");
			rightMuen.customItems.push(rightItem);
			rightItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, showUs);
		}

		private function showUs(event : ContextMenuEvent) : void {
			navigateToURL(new URLRequest("http://www.raytoon.cn"), "_blank");
		}

		private var showLoading : ShowLoading;
		private var loadMainLibrary : LoadMainLibrary;
		private var showLoaderFlag : int = 0;
		private var _loadTimer : Timer;
		private var _exterFlag : Boolean = true;
		/**
		 * 展示主加载动画
		 */
		public function showLoader() : void {
			
			if (USER_TYPE_FLAG) {
				showNewUserLoader();
			} else {
				if (!showLoading) showLoading = new ShowLoading();
				this.addChild(showLoading);
				showLoading.showLoad(XMLSource.getXMLSource("TDMain.xml").tdLibrary);

				if (!loadMainLibrary) loadMainLibrary = new LoadMainLibrary();
				loadMainLibrary.addEventListener(EventNameList.MAIN_LIBRARY_LOAD_COMPLETE, mainLibLoadComplete);
				loadMainLibrary.showMainLibrary(XMLSource.getXMLSource("TDMain.xml").tdLibrary, showLoading.progressHandler, EventNameList.MAIN_LIBRARY_LOAD_COMPLETE);

				_loadTimer = new Timer(3000, 1);
				_loadTimer.addEventListener(TimerEvent.TIMER_COMPLETE, mainLibLoadComplete);
				_loadTimer.start();
			}

			if (ExternalInterface.available) ExternalInterface.call(UIName.JS_LOAD_COMPLETE);
			if (_exterFlag) {
				_exterFlag = false;
			}
			
		}
		
		private function showNewUserLoader():void{
			
			if (!showLoading) showLoading = new ShowLoading();
			this.addChild(showLoading);
			showLoading.showLoad(XMLSource.getXMLSource("TDMain.xml").introMovie);

			if (!loadMainLibrary) loadMainLibrary = new LoadMainLibrary();
			loadMainLibrary.addEventListener(EventNameList.INTRO_MOVIE_LOAD_COMPLETE, introMovieLibLoadComplete);
			loadMainLibrary.showMainLibrary(XMLSource.getXMLSource("TDMain.xml").introMovie, showLoading.progressHandler, EventNameList.INTRO_MOVIE_LOAD_COMPLETE);
		}

		private var _introMovie : IntroMovieLayer;

		/**
		 * 开场动画加载完成
		 * @param	event
		 */
		private function introMovieLibLoadComplete(event : Event) : void {
			showIntroMovie();

			loadMainLibrary.removeEventListener(EventNameList.INTRO_MOVIE_LOAD_COMPLETE, introMovieLibLoadComplete);
			showLoading.clear();
			showLoading.showLoad(XMLSource.getXMLSource("TDMain.xml").newUser);

			loadMainLibrary.addEventListener(EventNameList.NEW_USER_MOVIE_LOAD_COMPLETE, newUserMovieLibLoadComplete);
			loadMainLibrary.showMainLibrary(XMLSource.getXMLSource("TDMain.xml").newUser, showLoading.progressHandler, EventNameList.NEW_USER_MOVIE_LOAD_COMPLETE);
		}

		private var _newUserMovieObj : Object;

		private function newUserMovieLibLoadComplete(event : EventBindingData) : void {
			_newUserMovieFlag = true;
			_newUserMovieObj = event.data;

			showNewUserMovie();

			showLoading.clear();
			showLoading.showLoad(XMLSource.getXMLSource("TDMain.xml").tdLibrary);
			loadMainLibrary.addEventListener(EventNameList.MAIN_LIBRARY_LOAD_COMPLETE, mainLibLoadComplete);
			loadMainLibrary.showMainLibrary(XMLSource.getXMLSource("TDMain.xml").tdLibrary, showLoading.progressHandler, EventNameList.MAIN_LIBRARY_LOAD_COMPLETE);

			_loadTimer = new Timer(3000, 1);
			_loadTimer.addEventListener(TimerEvent.TIMER_COMPLETE, mainLibLoadComplete);
			_loadTimer.start();
		}

		/**
		 * 展示开场动画
		 */
		public function showIntroMovie(...args) : void {
			if (!_introMovie) _introMovie = new IntroMovieLayer();
			this.addChild(_introMovie);
			_introMovie.showIntroMovie();
		}
		private var _newSoundFlag:Boolean = false;
		/**
		 * 移除开场动画
		 */
		public function removeIntroMovie() : void {
			if (_introMovie) {
				_introMovie.clear();
				this.removeChild(_introMovie);

				_introMovie = null;
			}
			if (_newSoundFlag) {
				_newSoundFlag = false;
				SoundLayer.getInstance().playMusic(SoundName.SOUND_ATTACK_BACKGROUND + "Tmp");
				showNewUserMovie();
			}
			else {
				SoundLayer.getInstance().playMusic(SoundName.SOUND_BACKGROUND);
			}
		}

		private var _newUserFlag : int = 0;
		private var _newUserMovieFlag : Boolean = false;
		private var _newUserMovie : NewUserMovieLayer;

		/**
		 * 显示新手引导动画
		 */
		private function showNewUserMovie() : void {
			_newUserFlag++;

			if (_newUserFlag >= 2) {
				if (_newUserMovieFlag) {
					_newUserMovie = new NewUserMovieLayer(_newUserMovieObj);
					this.addChild(_newUserMovie);

					_newUserMovieFlag = false;
				}
			}
		}

		public function removeNewUserMovie() : void {
			if (_newUserMovie) {
				ApplicationFacade.getInstance().sendNotification(NotificationNameList.NEW_USER_MOVIE_PLAY_COMPLETE);
				this.removeChild(_newUserMovie);
				_newUserMovie = null;
				USER_TYPE_FLAG = false;
				mainLibLoadComplete();
			}
		}

		private var _loadFlag : int = 0;
		private var _loadNum:int = 2;
		/**
		 * 发送主素材库加载完成事件
		 * @param	event
		 */
		private function mainLibLoadComplete(... args) : void {
			
			if (USER_TYPE_FLAG){
				_newSoundFlag = true;
				_loadFlag = 0;
				if (showLoading) {
					this.removeChild(showLoading);
					// showLoading.clear();
					showLoading = null;
				}
				showNewUserLoader();
				 
			}
			
			if (args.shift() is TimerEvent) {
				_loadTimer.reset();
				_loadTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, mainLibLoadComplete);
				_loadTimer = null;
				if(USER_TYPE_FLAG){
					USER_TYPE_FLAG = false;
					if(loadMainLibrary){
						loadMainLibrary.removeEventListener(EventNameList.MAIN_LIBRARY_LOAD_COMPLETE, mainLibLoadComplete);
						loadMainLibrary.clear();
						
					}
					return;
				}
			} else {
				loadMainLibrary.removeEventListener(EventNameList.MAIN_LIBRARY_LOAD_COMPLETE, mainLibLoadComplete);
				if(USER_TYPE_FLAG){
					USER_TYPE_FLAG = false;
					if(_loadTimer){
						_loadTimer.reset();
						_loadTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, mainLibLoadComplete);
						_loadTimer = null;
					}
					return;
				}
				
			}
			_loadFlag++;
			if (_loadFlag >= _loadNum && !_newUserMovie && !_introMovie) {
				dispatchEvent(new Event(EventNameList.LIB_LOAD_COMPLETE));
				//_taskLayer.viewTaskPanle();
			}

			
		}

		/**
		 * 显示UI
		 */
		public function showViewUI() : void {
			if (showLoading) {
				this.removeChild(showLoading);
				// showLoading.clear();
				showLoading = null;
			}
			_mouse = MouseStyleNow.getInstace();
			_mouse.showMouse();

			this.addChild(backgroundLayer);
			this.addChild(optionMainLayer);
			this.addChild(_sheepLayer);
			this.addChild(toolsLayer);
			this.addChild(informationLayer);
		}

		private var yw : int = 0;

		public function shapeRect(str : String) : void {
			yw += 30;
			var textFild : TextField = new TextField();
			addChild(textFild);
			textFild.width = 500;
			textFild.x = 20;
			textFild.y = yw;
			textFild.wordWrap = true;
			textFild.text = str;
			textFild.height = textFild.textHeight + 10;
		}

		/**
		 * 改变游戏呈现画质
		 * @param	qualityInt
		 */
		public function gameQuality(qualityInt : int = 3) : void {
			if (stage) {
				switch (qualityInt) {
					case 1:
						stage.quality = StageQuality.LOW;
						break;
					case 2:
						stage.quality = StageQuality.MEDIUM;
						break;
					case 3:
						stage.quality = StageQuality.HIGH;
						break;
					case 4:
						stage.quality = StageQuality.BEST;
						break;
				}
			}
		}

		private var _shakeTimer : Timer;

		/**
		 * 震动舞台
		 */
		public function shakeStage() : void {
			if (!hasEventListener(Event.ENTER_FRAME))
				addEventListener(Event.ENTER_FRAME, shakeStageHandler);
		}

		private var _shakeX : int;
		private var _shakeY : int;
		private var _shakeSum : int;
		private var _shakeStageX : int;
		private var _shakeStageY : int;
		private var _shakeShape : Shape;

		private function shakeStageHandler(event : Event) : void {
			if (_shakeSum == 0) {
				_shakeShape = new Shape();
				_shakeShape.graphics.beginFill(0xFFFFFF);
				_shakeShape.graphics.drawRect(0, 0, GlobalVariable.STAGE_WIDTH, GlobalVariable.STAGE_HEIGHT);
				_shakeShape.graphics.endFill();
				optionMainLayer.addChild(_shakeShape);
			} else if (_shakeSum == 3) {
				optionMainLayer.removeChild(_shakeShape);
				_shakeShape = null;
			}
			_shakeSum++;
			_shakeX = _shakeStageX + Math.random() * 5 * getPlus();
			_shakeY = _shakeStageY + Math.random() * 5 * getPlus();
			backgroundLayer.x = _shakeX;
			backgroundLayer.y = _shakeY;
			optionMainLayer.x = _shakeX;
			optionMainLayer.y = _shakeY;
			_shakeStageX = _shakeX;
			_shakeStageY = _shakeY;
			if (_shakeSum == 5) {
				removeEventListener(Event.ENTER_FRAME, shakeStageHandler);
				backgroundLayer.x = 0;
				backgroundLayer.y = 0;
				optionMainLayer.x = 0;
				optionMainLayer.y = 0;
				_shakeSum = 0;
			}
		}

		private var _plusNum : Number;

		private function getPlus() : int {
			_plusNum = Math.random() * 2;
			if (_plusNum < 1)
				return -1;
			else
				return 1;
		}
	}
	// end UIMain
}