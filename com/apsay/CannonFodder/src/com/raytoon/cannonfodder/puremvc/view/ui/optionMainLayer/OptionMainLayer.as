///////////////////////////////////////////////////////////
//  OptionMainLayer.as
//  Macromedia ActionScript Implementation of the Class OptionMainLayer
//  Generated by Enterprise Architect
//  Created on:      01-六月-2011 14:21:38
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer
{
	import com.greensock.TweenLite;
	import com.greensock.easing.Back;
	import com.raytoon.cannonfodder.puremvc.view.mediator.UIMainMediator;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.puremvc.view.ui.backgroundLayer.BackgroundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.buffLayer.BuffLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.informationLayer.InformationLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Element;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Hero;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Inductor;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.OrePaper;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Soldier;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Towers;
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.toolsLayer.ToolsLayer;
	import com.raytoon.cannonfodder.tools.SkillsButton;
	import com.raytoon.cannonfodder.tools.aStar.AStar;
	import com.raytoon.cannonfodder.tools.aStar.Grid;
	import com.raytoon.cannonfodder.tools.aStar.Node;
	import com.raytoon.cannonfodder.tools.effects.ShockBeam;
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.utils.MapRectInfo;
	import com.raytoon.cannonfodder.tools.utils.SoundName;
	import com.raytoon.cannonfodder.tools.utils.UICommand;
	import com.raytoon.cannonfodder.tools.utils.UICreate;
	import com.raytoon.cannonfodder.tools.utils.UIName;
	import com.raytoon.cannonfodder.tools.utils.UIState;
	import com.raytoon.cannonfodder.tools.utils.UIXML;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	
	import flash.display.DisplayObject;
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.filters.ColorMatrixFilter;
	import flash.filters.GlowFilter;
	import flash.geom.Point;
	import flash.net.URLRequest;
	import flash.text.TextRun;
	import flash.utils.Timer;
	import flash.utils.getTimer;
	import flash.utils.setInterval;
	
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 01-六月-2011 14:21:38
	 */
	public class OptionMainLayer extends Sprite
	{
		public static const NAME:String = "OptionMainLayer";
		public static var NOW_FPS:int = 30; //当前播放器帧速
		public static var UP_HP_FLAG:int = 1; //回血标志位
		public static var ATTACK_ONLY_FLAG:int = 0; //指定攻击目标标志位
		private var _towerArr:Array; //箭塔数组
		private var _obstacleTowerArr:Array;//无效塔数组
		private var _soldierArr:Array; //炮灰数组
		private var _heroArr:Array; //英雄数组
		private var _attackArr:Array; //攻击方数组
		private var _renderArr:Array; //渲染数组
		public var inductor:Inductor; //距离感应器,控制器
		private var _aStar:AStar;
		private var _grid:Grid;
		private var _rectLayer:Sprite = new Sprite();
		public var zeroLayer:Sprite = new Sprite();
		private var _oneLayer:Sprite = new Sprite();
		private var _twoLayer:Sprite = new Sprite();
		public var effectLayer:Sprite = new Sprite();
		
		public function OptionMainLayer()
		{
			
			UIMain.setInstance(OptionMainLayer.NAME, this);
			addChild(_rectLayer);
			addChild(zeroLayer);
			addChild(_oneLayer);
			addChild(_twoLayer);
			addChild(effectLayer);
			_aStar = new AStar();
			_grid = new Grid();
			
			_towerArr = new Array();
			_obstacleTowerArr = new Array();
			_soldierArr = new Array();
			_heroArr = new Array();
			_attackArr = new Array();
			_renderArr = new Array();
			inductor = new Inductor();
			//setInterval(plusCount, 1000);
		
		}
		
		/**
		 * 获取箭塔数组
		 */
		public function get towerArr():Array
		{
			return _towerArr;
		}
		/**
		 * 获取障碍塔数组
		 */
		public function get obstacleTowerArr():Array {
			return _obstacleTowerArr;
		}
		
		/**
		 * 获取士兵数组
		 */
		public function get soldierArr():Array
		{
			return _soldierArr;
		}
		
		/**
		 * 获取英雄数组
		 */
		public function get heroArr():Array
		{
			return _heroArr;
		}
		
		/**
		 * 获取攻击方数组
		 */
		public function get attackArr():Array
		{
			return _attackArr;
		}
		
		/**
		 * 循环渲染战斗场景
		 * @param	event
		 */
		private function renderAll(event:Event):void
		{
			
			count++;
			
			for each (var element:Element in _renderArr)
			{
				
				if (element.adType == Element.ATTACK && element.isReady)
				{
					
					inductor.attackElement = element;
					inductor.getDefendElement();
				}
				else if (element.adType == Element.TOWER && element.isReady)
				{
					
					inductor.defendElement = element;
					inductor.getAttackElement();
				}
				
				element.rendering();
			}
			
			for each(var _hero:Hero in _heroArr) {
				
				_hero.rendering();
			}
		}
		
		/**
		 * 相互选择敌人
		 */
		private function selectEnemy():void
		{
			
			for each (var element:Element in _renderArr)
			{
				
				if (element.adType == Element.ATTACK && element.isReady)
				{
					
					inductor.attackElement = element;
					inductor.getDefendElement();
				}
				else if (element.adType == Element.TOWER && element.isReady)
				{
					
					inductor.defendElement = element;
					inductor.getAttackElement();
				}
				
			}
		}
		
		/**
		 * 排序 进攻 显示对象
		 */
		private function sortAttack():void
		{
			
			_oneLayer.visible = false;
			for (var i:int = 0; i < _renderArr.length; i++)
			{
				
				for (var j:int = i; j < _renderArr.length; j++)
				{
					
					if (((_renderArr[i] as Element).adType == Element.ATTACK || (_renderArr[i] as Element).adType == Element.TOWER) && ((_renderArr[j] as Element).adType == Element.ATTACK || (_renderArr[j] as Element).adType == Element.TOWER))
					{
						
						if ((_renderArr[i] as Element).y > (_renderArr[j] as Element).y)
							_oneLayer.swapChildren(_renderArr[i], _renderArr[j]);
					}
				}
			}
			_oneLayer.visible = true;
		}
		private var count:int = 0;
		
		/**
		 * 取得当前播放器播放速率fps/s
		 */
		private function plusCount():void
		{
			OptionMainLayer.NOW_FPS = count;
			//trace(count);
			count = 0;
			//selectEnemy();
			//sortAttack();
		}
		private var _allPaper:int = 0; //挑战所使用总手纸数
		private var _allTime:int = 0; //战斗使用总时间
		private var _allScore:int = 99; //最低战斗评分
		
		/**
		 * 生成士兵
		 */
		public function makeSoldier(id:int = 101, level:int = 1):void
		{
			//if (_makeSoldierMovie)_makeSoldierMovie.gotoAndPlay(2);
			var soldierInfo:XMLList = XMLSource.getXMLSource("SoldierInfo.xml").soldier.(@id == id);
			var soldierLevelInfo:XMLList = XMLSource.getXMLSource("SoldierLevelInfo.xml").soldierLevel.(@id == id).level.(@grade == level);
			var _soldierHP:int = int(soldierLevelInfo.lifeHP);
			var _soldierArmor:int = int(soldierLevelInfo.armor);
			var soldier:Soldier = new Soldier(String(soldierInfo.name), _soldierHP, _soldierArmor);
			
			soldier.shootSound = String(soldierInfo.shootSound);
			soldier.attackedSound = String(soldierInfo.attackedSound);
			soldier.deathSound = String(soldierInfo.deathSound);
			soldier.elementLevel = level;
			soldier.x = (_runArray[0] as Node).unitX;
			soldier.y = (_runArray[0] as Node).unitY;
			
			soldier.id = String(soldierInfo.@id);
			soldier.paper = int(soldierInfo.paper);
			soldier.lifeHP = _soldierHP;
			soldier.armor = _soldierArmor;
			if (int(soldierInfo.skills) == 301 || int(soldierInfo.skills) == 311) soldier.mirrorAttack = 0;// int(soldierLevelInfo.attack);
			else soldier.attack = int(soldierLevelInfo.attack);
			soldier.bulletEffectName = String(soldierInfo.bulletName);
			soldier.elementDeadName = String(soldierInfo.deathName);
			soldier.attackHZ = int(soldierInfo.attackHZ);
			soldier.attackPriority = int(soldierInfo.priority);
			soldier.defense = int(soldierLevelInfo.defense);
			soldier.backHP = int(soldierInfo.backHP); //heroRaceID == 3 ? (int(soldierInfo.backHP) + heroRaceNum) : int(soldierInfo.backHP);
			soldier.speed = int(soldierInfo.speed);
			soldier.runType = int(soldierInfo.moveType);
			if (soldier.runType == 404)
				soldier.row = 20;
			soldier.skills = int(soldierInfo.skills);
			soldier.minAttackRange = Number(soldierInfo.minAttackRange);
			soldier.maxAttackRange = Number(soldierInfo.maxAttackRange);
			soldier.runArray = _runArray;
			_soldierArr.push(soldier);
			_attackArr.push(soldier);
			addElement(soldier);
			soldier.startTime = getTimer();// - _showTime;
			_allPaper += int(soldierInfo.paper);
			
			var _sObj:Object = new Object();
			_sObj.id = id;
			_sObj.level = level;
			var _dataObj:Object = new Object();
			_dataObj.time = getTimer() - _showTime - _pauseTime;
			_dataObj.type = Element.SOLDIER;
			_dataObj.data = _sObj;
			_attackInfoArr.push(_dataObj);
			_pauseTime = 0;
			_showTime = getTimer();
			
			_sObj = null;
			_dataObj = null;
			
			soldierInfo = null;
			soldierLevelInfo = null;
			soldier = null;
			
			if (_birdFrame != 2)
				showFreedomBird(2);
			if (!_birdTimer)
			{
				_birdTimer = new Timer(1000, 20);
				_birdTimer.addEventListener(TimerEvent.TIMER_COMPLETE, birdTimerComplete);
				_birdTimer.start();
			}
			else
			{
				_birdTimer.reset();
				_birdTimer.start();
			}
			if (!hasEventListener(Event.ENTER_FRAME)) addEventListener(Event.ENTER_FRAME, renderAll);
			if (_skillsButtonInfo) removeSkillsButtonInfo();
		}
		private var _skillsButton:SkillsButton;
		private var _skillsButtonArr:Array = [];
		public static var _skillsButtonFlag:Boolean = true;
		public function set skillsButtonFlag(value:Boolean):void {
			_skillsButtonFlag = value;
		}
		public function get skillsButtonArr():Array {
			return _skillsButtonArr;
		}
		private var _hObj:Object;
		public var heroSkillsFunction:Function;
		public var heroRaceID:int = 0;
		public var heroRaceNum:int = 0;
		/**
		 * 生成英雄
		   HeroID(英雄ID-dataID),
		   True(能否使用-dataActivate),
		   1(等级-dataLevel),
		   "skillID(技能ID-dataSkillID）,
		   "[" red(装备类型-dataEquipType), 1201(装备ID-dataEquipID) "]",
		   "[" 1(种族编号-dataRaceID), 1(名字编号-dataNameID) "]",
		   1(英雄品质-dataQuality),
		   5(总荣誉值-dataHonor),
		   "[" 3000(基础生命值-dataLifeHP), 100(生命成长值-dataLifeHPUp) "]",
		   "[" 100(基础护甲值-dataArmor), 10(护甲成长值-dataArmorUp) "]",
		   "[" 15(基础防御值-dataDefence), 5(防御成长值-dataDefenceUp) "]",
		   "[" 20(基础攻击力-dataAttack), 10(攻击力成长值-dataAttackUp) "]"
		 */
		public function makeHero(obj:Object):void
		{
			
			var equipType:String;
			var equipId:int;
			var gemId:int;
			_hObj = null;
			_hObj = new Object();
			_hObj.dataID = obj.dataID;
			_hObj.dataLevel = obj.dataLevel;
			_hObj.dataLifeHP = obj.dataLifeHP;
			_hObj.dataLifeHPUp = obj.dataLifeHPUp;
			_hObj.dataArmor = obj.dataArmor;
			_hObj.dataArmorUp = obj.dataArmorUp;
			_hObj.dataRaceID = obj.dataRaceID;
			heroRaceID = int(obj.dataRaceID);
			_hObj.dataDefence = obj.dataDefence;
			_hObj.dataDefenceUp = obj.dataDefenceUp;
			_hObj.dataAttack = obj.dataAttack;
			_hObj.dataAttackUp = obj.dataAttackUp;
			_hObj.dataSkillID = obj.dataSkillID;
			_hObj.dataServerID = obj.dataServerID;
			_hObj.dataHonor = obj.dataHonor;
			_hObj.dataPower = obj.dataPower;
			_hObj.dataQuality = obj.dataQuality;
			_hObj.dataLangName = obj.dataLangName;
			if (obj.dataEquipType) {
				_hObj.dataEquipType = obj.dataEquipType;
				equipType = String(obj.dataEquipType);
			}
			if (obj.dataEquipID) {
				_hObj.dataEquipID = obj.dataEquipID;
				equipId = int(obj.dataEquipID);
			}
			if (obj.dataGemID) {
				_hObj.dataGemID = obj.dataGemID;
				gemId = int(obj.dataGemID);
			}
			
			var heroInfo:XMLList = XMLSource.getXMLSource("HeroInfo.xml").hero.(@id == obj.dataID);
			var heroLevelInfo:XMLList = XMLSource.getXMLSource("HeroLevelInfo.xml").heroLevel.level.(@grade == obj.dataLevel);
			var heroNameRaceInfo:XML = XMLSource.getXMLSource("HeroNameRace.xml");
			var _heroHP:int = int(obj.dataLifeHP) + (int(obj.dataLevel) - 1) * int(obj.dataLifeHPUp);
			var _heroArmor:int = int(obj.dataArmor) + (int(obj.dataLevel) - 1) * int(obj.dataArmorUp);
			
			switch(heroRaceID) {
				
				case 1:
					heroRaceNum = Math.ceil(_heroArmor * 0.1);
					//plusAttackTime(heroRaceNum);
					break;
					
				case 2:
					heroRaceNum = Math.ceil(_heroArmor * 0.15);
					break;
					
				case 3:
					heroRaceNum = Math.ceil(_heroArmor * 0.1);
					break;
			}
			
			var hero:Hero = new Hero(String(heroInfo.name), _heroHP, _heroArmor);
			
			//hero.shootSound = String(heroNameRaceInfo.race.(@id == obj.dataRaceID).shootSound);
			hero.attackedSound = String(heroNameRaceInfo.race.(@id == obj.dataRaceID).attackedSound);
			hero.deathSound = String(heroNameRaceInfo.race.(@id == obj.dataRaceID).deathSound);
			hero.skillSound = String(heroInfo.skillSound);
			hero.goInSound = String(heroInfo.goInSound);
			hero.elementLevel = int(obj.dataLevel);
			//hero.x = (_runArray[0] as Node).unitX;
			//hero.y = (_runArray[0] as Node).unitY;
			//hero.runArray = _runArray;
			
			hero.id = String(obj.dataID);
			hero.unitId = String(obj.dataServerID);
			hero.lifeHP = _heroHP;
			hero.armor = _heroArmor;
			hero.paper = int(heroInfo.paper);
			hero.defense = int(obj.dataDefence) + (int(obj.dataLevel) - 1) * int(obj.dataDefenceUp);
			hero.attack = int(obj.dataAttack) + (int(obj.dataLevel) - 1) * int(obj.dataAttackUp);
			//hero.attackPriority = int(heroInfo.priority);
			//hero.bulletEffectName = String(heroInfo.bulletName);
			//hero.elementDeadName = String(heroInfo.deathName);
			//hero.backHP = int(heroNameRaceInfo.race.(@id == obj.dataRaceID).backHP);
			//hero.speed = int(heroNameRaceInfo.race.(@id == obj.dataRaceID).speed);
			//hero.runType = int(heroNameRaceInfo.race.(@id == obj.dataRaceID).moveType);
			//if (hero.runType == 404)
				//hero.row = 20;
			hero.skills = int(obj.dataSkillID);
			hero.skillsName = String(hero.id) + String(hero.skills);
			//hero.attackHZ = int(heroNameRaceInfo.race.(@id == obj.dataRaceID).attackHZ);
			//hero.minAttackRange = Number(heroNameRaceInfo.race.(@id == obj.dataRaceID).minAttackRange);
			//hero.maxAttackRange = Number(heroNameRaceInfo.race.(@id == obj.dataRaceID).maxAttackRange);
			
			if (equipType)
			{
				
				hero.equipAdditionProperty(equipType, equipId);
			}
			
			if (gemId != 0)
			{
				
				var gemXmlList:XMLList = XMLSource.getXMLSource("GemSkills.xml").gem.(@id == gemId);
				hero.additionGemProperty(int(gemXmlList.addGemProperty), String(gemXmlList.haloName), Number(gemXmlList.gemPercent),String(gemXmlList.name) + "Icon",String(gemXmlList.langName),String(gemXmlList.gemNote));
				gemXmlList = null;
			}
			
			_heroArr.push(hero);
			//_attackArr.push(hero);
			//addElement(hero);
			_twoLayer.addChild(hero);
			hero.x = 67;
			hero.y = 143;
			hero.visible = false;
			hero.startTime = getTimer() - _showTime - _pauseTime;
			_allPaper += int(heroInfo.paper);
			hero.showSkillsButton();
			
			_hObj.dataHonor = hero.honor;
			
			var _dataObj:Object = new Object();
			_dataObj.time = getTimer() - _showTime - _pauseTime;
			_dataObj.type = Element.HERO;
			_dataObj.data = _hObj;
			_attackInfoArr.push(_dataObj);
			_pauseTime = 0;
			_dataObj = null;
			_showTime = getTimer();
			
			//SoundLayer.getInstance().playSound(String(heroInfo.goInSound));
			hero = null;
			heroInfo = null;
			heroLevelInfo = null;
			heroNameRaceInfo = null;
			obj = null;
			
			var _mClass:Class = UICommand.getClass("HeroShowMovie");
			_makeHeroMovie = new _mClass() as MovieClip;
			_mClass = null;
			_makeHeroMovie.addEventListener("heroShowGlow", heroShowGlowHandler);
			_makeHeroMovie.addEventListener("heroShowComplete", heroShowCompleteHandler);
			
			_twoLayer.addChild(_makeHeroMovie);
			
			
		}
		
		private var _makeHeroMovie:MovieClip;
		
		private function heroShowGlowHandler(event:Event):void {
			
			if (_heroArr.length >= 1) {
				
				if (_makeHeroMovie) {
					_makeHeroMovie.removeEventListener("heroShowGlow", heroShowGlowHandler);
					var _hero:Hero = _heroArr[0] as Hero;
					_hero.visible = true;
					_hero.filters = [new GlowFilter(0xFFFFFF,1,255,255)];
				}
			}
		}
		
		private function heroShowCompleteHandler(event:Event):void {
			
			if (_heroArr.length >= 1) {
				
				if (_makeHeroMovie) {
					_makeHeroMovie.removeEventListener("heroShowComplete", heroShowCompleteHandler);
					var _hero:Hero = _heroArr[0] as Hero;
					_hero.filters = [];
				}
			}
			_twoLayer.removeChild(_makeHeroMovie);
			_makeHeroMovie = null;
		}
		
		private var _paperSoldier:MovieClip;
		private var _paperSoldierMovie:MovieClip;
		/**
		 * 自动收手纸 标示
		 */
		private function showPaperSoldier():void {
			
			if (UICommand.t.stateSecond != "") return;
			var buffID:int = (UIMain.getInstance(BuffLayer.NAME) as BuffLayer).checkBuffView("p");
			if ( buffID > 0) {
				
				var surplus:int = (UIMain.getInstance(BuffLayer.NAME) as BuffLayer).getSurplus(buffID);
				var buffSum:int = int(XMLSource.getXMLSource("Props.xml").prop.(@id == buffID).buffEnableSum);
				var _mClass:Class = UICommand.getClass("PaperSoldier");
				_paperSoldier = new _mClass() as MovieClip;
				_twoLayer.addChild(_paperSoldier);
				_paperSoldier.x = 100;
				_paperSoldier.y = 200;
				_mClass = null;
				
				var len:int = buffSum - surplus;
				var rectSum:int = _paperSoldier["surplus"].numChildren;
				
				for (var i:int = 1; i <= len; i ++ ) {
					
					(_paperSoldier["surplus"] as MovieClip).getChildAt(rectSum - i).visible = false;
				}
				
				_mClass = UICommand.getClass("PaperSoldierMovie");
				_paperSoldierMovie = new _mClass() as MovieClip;
				_twoLayer.addChild(_paperSoldierMovie);
				_paperSoldierMovie.x = 100;
				_paperSoldierMovie.y = 200;
				_mClass = null;
				
			}
		}
		
		public function playPaperSoldierMovie():void {
			
			if (_paperSoldierMovie) {
				_paperSoldierMovie.play();
			}
		}
		
		/**
		 * 英雄释放技能
		 * 
		 */
		public function aeleaseHeroSkills(obj:Object):void {
			
			if (heroSkillsFunction != null) {
				heroSkillsFunction(obj);
				
			}
		}
		
		public function saveHeroSkills(point:Point):void {
			
			var _dataObj:Object = new Object();
			_dataObj.time = getTimer() - _showTime - _pauseTime;
			_dataObj.type = "heroSkills";
			var tmp:Object = new Object();
			tmp.x = point.x;
			tmp.y = point.y;
			_dataObj.data = tmp;
			_attackInfoArr.push(_dataObj);
			_pauseTime = 0;
			_dataObj = null;
			tmp = null;
			_showTime = getTimer();
		}
		
		private var _runArray:Array = new Array();
		private var _oreArray:Array = new Array(); //矿点 可出现数组
		private var _glodArray:Array = new Array(); //金币 可出现数组
		private var _matteLayer:MovieClip;
		private var _layerArr:Array = new Array(); //攻防单位曾数组
		public static var layerHeight:int = 0; //断层高度
		public static var layerWidth:int = 0; //断层宽度
		private var _plusPaperSum:int = 1; //增加手纸数
		private var _plusPaperTime:Number = 15; //产生手纸时间
		private var _cutPaperTime:Number = 8; //  移除手指时间
		public var orePlusPaperSum:int = 1; //矿增加手纸数
		public var orePlusPaperTime:Number = 10; //矿产生手纸时间
		public var oreCutPaperTime:Number = 3; //  矿移除手指时间
		public var firstOrePaper:int = 50; //首次进矿获得手纸
		private var _timeScore:int = 200; //战斗时间评分基础
		private var _paperScore:int = 100; //使用手纸评分基础
		private var _levelScore:int = 50; //挑战高等级评分基础
		private var _warTime:int = 600; //挑战时间
		private var _warPaper:int = 1111; //挑战地图赠送手纸数
		private var _warScoreS:int = 360; //战斗S级评分
		private var _warScoreA:int = 200; //战斗A级评分
		private var _warScoreB:int = 100; //战斗B级评分
		private var _warScoreC:int = 99; //战斗C级评分
		private var _mapPaper:int = 100; //地图布防手纸数
		private var _winSocre:int = 150; //胜利得分
		private var _defeatSocre:int = 0;//失败得分
		private var _surrenderScore:int = -300;//投降得分
		private var _passPeopleSocre:int = 150; //通过总分
		private var _baseExp:int = 100; //基础经验
		private var _baseCap:int = 100; //基础游戏币
		private var _winPeople:int = 1;//地图通过 胜利人数
		private var _capPercentS:Number = 1;
		private var _capPercentA:Number = 1;
		private var _capPercentB:Number = 1;
		private var _capPercentC:Number = 1;
		
		private var _expPercentS:Number = 1;
		private var _expPercentA:Number = 1;
		private var _expPercentB:Number = 1;
		private var _expPercentC:Number = 1;
		
		private var _itemsSumS:int = 1;
		private var _itemsSumA:int = 1;
		private var _itemsSumB:int = 1;
		private var _itemsSumC:int = 1;
		
		//===================================防守评分变量
		
		private var _defenceTimeScore:int = 200; //战斗时间评分基础
		private var _defenceTimeInitialScore:int = 100;//战斗 起始分数
		private var _defencePaperScore:int = 100; //使用手纸评分基础
		private var _defenceLevelScore:int = 50; //挑战高等级评分基础
		
		
		private var _defenceWarScoreS:int = 360; //战斗S级评分
		private var _defenceWarScoreA:int = 200; //战斗A级评分
		private var _defenceWarScoreB:int = 100; //战斗B级评分
		private var _defenceWarScoreC:int = 99; //战斗C级评分
		
		private var _defenceWinSocre:int = 150; //胜利得分
		private var _defenceDefeatSocre:int = 0;//失败得分
		private var _defenceSurrenderScore:int = -300;//投降得分
		
		private var _defenceCapPercentS:Number = 1;
		private var _defenceCapPercentA:Number = 1;
		private var _defenceCapPercentB:Number = 1;
		private var _defenceCapPercentC:Number = 1;
		
		private var _defenceExpPercentS:Number = 1;
		private var _defenceExpPercentA:Number = 1;
		private var _defenceExpPercentB:Number = 1;
		private var _defenceExpPercentC:Number = 1;
		
		private var _defenceItemsSumS:int = 1;
		private var _defenceItemsSumA:int = 1;
		private var _defenceItemsSumB:int = 1;
		private var _defenceItemsSumC:int = 1;
		
		private var _gridPic:Loader;//地图方格
		private var _showTime:int;
		private var _mapID:int = 0;
		
		private var _makeSoldierMovie:MovieClip;//产生士兵光圈
		private var _heroAltar:MovieClip;//英雄站立祭坛
		
		private var _freeBirdX:int = 0;
		private var _qingTaArr:Array = [];
		private var _towerObj:Object;
		/**
		 * 根据存储显示箭塔数据
		 */
		public function showTowers(towerObj:Object):void
		{
			_hObj = null;
			_towerObj = towerObj;
			_showTime = getTimer();
			_attackInfoArr = [];
			_deathPeopleArr = [];
			_deathPeoplePaperSum = 0;
			_deathPeopleSum = 0;
			_deathTowerArr = [];
			_deathTowerPaperSum = 0;
			_deathTowerSum = 0;
			_allPaper = 0;
			_allScore = 0;
			_allTime = 0;
			heroRaceID = 0;
			heroRaceNum = 0;
			_girdView = false;
			gameFlag = true;
			var _towerLevelObj:Object = getTowerTechInfo(towerObj.towerTech);
			_mapID = int(towerObj.mapId);
			var towerArr:Array = sortTowerInfo(towerObj.mapInfo as Array);
			var _mapInfo:XMLList = XMLSource.getXMLSource("MapInfo.xml").maps.(@id == int(towerObj.mapId));
			var _warScoreInfo:XMLList = XMLSource.getXMLSource("MapInfo.xml").warScore;
			
			_plusPaperSum = int(_mapInfo.plusPaperSum);
			_plusPaperTime = Number(_mapInfo.plusPaperTime);
			_cutPaperTime = Number(_mapInfo.cutPaperTime);
			orePlusPaperSum = int(_mapInfo.orePlusPaperSum);
			orePlusPaperTime = Number(_mapInfo.orePlusPaperTime);
			oreCutPaperTime = Number(_mapInfo.oreCutPaperTime);
			firstOrePaper = int(_mapInfo.firstOrePaper);
			_timeScore = int(_warScoreInfo.timeScore);
			_paperScore = int(_warScoreInfo.paperScore);
			_levelScore = int(_warScoreInfo.levelScore);
			_warTime = int(_mapInfo.attackTime);
			_warPaper = int(_mapInfo.maxPaper);
			_warScoreS = int(_warScoreInfo.warScoreS);
			_warScoreA = int(_warScoreInfo.warScoreA);
			_warScoreB = int(_warScoreInfo.warScoreB);
			_warScoreC = int(_warScoreInfo.warScoreC);
			_winSocre = int(_warScoreInfo.winSocre);
			_defeatSocre = int(_warScoreInfo.defeatSocre);
			_surrenderScore = int(_warScoreInfo.surrenderScore)
			_passPeopleSocre = int(_warScoreInfo.passPeopleSocre);
			_winPeople = int(_mapInfo.winPeople);
			_capPercentS = Number(_warScoreInfo.capPercentS);
			_capPercentA = Number(_warScoreInfo.capPercentA);
			_capPercentB = Number(_warScoreInfo.capPercentB);
			_capPercentC = Number(_warScoreInfo.capPercentC);
			
			_expPercentS = Number(_warScoreInfo.expPercentS);
			_expPercentA = Number(_warScoreInfo.expPercentA);
			_expPercentB = Number(_warScoreInfo.expPercentB);
			_expPercentC = Number(_warScoreInfo.expPercentC);
			
			_itemsSumS = int(_warScoreInfo.itemsSumS);
			_itemsSumA = int(_warScoreInfo.itemsSumA);
			_itemsSumB = int(_warScoreInfo.itemsSumB);
			_itemsSumC = int(_warScoreInfo.itemsSumC);
			//============================
			_defenceTimeScore = int(_warScoreInfo.defencetimeScore);
			_defenceTimeInitialScore = int(_warScoreInfo.timeinitialScore);
			_defencePaperScore = int(_warScoreInfo.defencepaperScore);
			_defenceLevelScore = int(_warScoreInfo.defencelevelScore);
			
			_defenceWarScoreS = int(_warScoreInfo.defenceScoreS);
			_defenceWarScoreA = int(_warScoreInfo.defenceScoreA);
			_defenceWarScoreB = int(_warScoreInfo.defenceScoreB);
			_defenceWarScoreC = int(_warScoreInfo.defenceScoreC);
			
			_defenceWinSocre = int(_warScoreInfo.defencewinSocre);
			_defenceDefeatSocre = int(_warScoreInfo.defencedefeatSocre);
			_defenceSurrenderScore = int(_warScoreInfo.defencesurrenderScore)
			
			_defenceCapPercentS = Number(_warScoreInfo.defencecapPercentS);
			_defenceCapPercentA = Number(_warScoreInfo.defencecapPercentA);
			_defenceCapPercentB = Number(_warScoreInfo.defencecapPercentB);
			_defenceCapPercentC = Number(_warScoreInfo.defencecapPercentC);
			
			_defenceExpPercentS = Number(_warScoreInfo.defenceexpPercentS);
			_defenceExpPercentA = Number(_warScoreInfo.defenceexpPercentA);
			_defenceExpPercentB = Number(_warScoreInfo.defenceexpPercentB);
			_defenceExpPercentC = Number(_warScoreInfo.defenceexpPercentC);
			
			_defenceItemsSumS = int(_warScoreInfo.defenceitemsSumS);
			_defenceItemsSumA = int(_warScoreInfo.defenceitemsSumA);
			_defenceItemsSumB = int(_warScoreInfo.defenceitemsSumB);
			_defenceItemsSumC = int(_warScoreInfo.defenceitemsSumC);
			
			_mapPaper = int(_mapInfo.mapPaper);
			_baseCap = int(_mapInfo.baseCap);
			_baseExp = int(_mapInfo.baseExp);
			
			var _matteSite:Array = String(_mapInfo.matteSite).split(",");
			var _matteClass:Class = UICommand.getClass("MatteLayer");
			_matteLayer = new _matteClass() as MovieClip;
			_twoLayer.addChild(_matteLayer);
			_matteLayer.x = Number(_matteSite[0]);
			_matteLayer.y = Number(_matteSite[1]);
			var _mapPath:int = int(_mapInfo.mapMaterial.mapUrl.(@startId == int(towerObj.materialId)).mapPath);
			var _siteArr:Array = String(_mapInfo.mapSite).split(",");
			layerHeight = int(_siteArr[1]);
			layerWidth = int(_siteArr[0]);
			var _endArr:Array = String(_mapInfo.mapEndNode).split(",");
			var _startArr:Array = String(_mapInfo.mapMaterial.mapUrl.(@startId == int(towerObj.materialId)).startNode).split(",");
			var _rectArr:Array = String(_mapInfo.mapFormat).split("*");
			
			_freeBirdX = (int(_rectArr[1]) - 8) * GlobalVariable.RECT_WIDTH + 80;
			
			var _gridUrl:String = ConstPath.MATERIAL_PATH + ConstPath.PNG_PATH + ConstPath.MAP_PATH + String(_mapInfo.grid);
			_gridPic = new Loader();
			_gridPic.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, gridPicIoError);
			_gridPic.contentLoaderInfo.addEventListener(Event.COMPLETE, gridPicLoadComplete);
			_gridPic.load(new URLRequest(_gridUrl));
			_gridPic.visible = _viewRectFlag;
			_rectLayer.addChild(_gridPic);
			_gridPic.x = int(_siteArr[0]);
			_gridPic.y = int(_siteArr[1]);
			
			for (var m:int = 0; m < int(_rectArr[0]); m++)
			{
				
				var _sp:Sprite = new Sprite();
				_oneLayer.addChild(_sp);
				_layerArr.push(_sp);
			}
			
			_grid.nodes = MapRectInfo.creatMapRectInfo(int(_siteArr[0]), int(_siteArr[1]), int(_rectArr[0]), int(_rectArr[1]));
			MapRectInfo.optionMapPoint(towerArr);
			
			_grid.setStartNode(int(_startArr[0]), int(_startArr[1]));
			_grid.setEndNode(int(_endArr[0]), int(_endArr[1]));
			
			if (_aStar.findPath(_grid))
			{
				
				_runArray = _aStar.path;
				switch (_mapPath)
				{
					
					case 1:
						
						var twoNode:Node = new Node(0, 0, _runArray[0].unitX - GlobalVariable.RECT_WIDTH, _runArray[0].unitY);
						_runArray.unshift(twoNode);
						break;
					
					case 2:
						var yLen:int = _runArray.length - 1;
						var threeNode:Node = new Node(0, 0, _runArray[0].unitX, _runArray[yLen].unitY + GlobalVariable.RECT_HEIGHT);
						_runArray.unshift(threeNode);
						break;
					
					case 3:
						
						var oneNode:Node = new Node(0, 0, _runArray[0].unitX, _runArray[0].unitY - GlobalVariable.RECT_HEIGHT);
						_runArray.unshift(oneNode);
						break;
				}
			}
			
			
			
			var _msClass:Class = UICommand.getClass("HeroAltar");
			_heroAltar = new _msClass() as MovieClip;
			_rectLayer.addChild(_heroAltar);
			_heroAltar.y = 59;
			_msClass = null;
			
			var towerInfo:XML = XMLSource.getXMLSource("TowerInfo.xml");
			var towerLevelInfo:XML = XMLSource.getXMLSource("TowerLevelInfo.xml");
			for each (var infObj:Object in towerArr)
			{
				var tLevel:int = _towerLevelObj ? (_towerLevelObj[int(infObj.id)] ? _towerLevelObj[int(infObj.id)] : int(infObj.level)): int(infObj.level);
				var elementTowerInfo:XMLList = towerInfo.towerType.(@type == String(infObj.type)).tower.(@id == infObj.id);
				var elementTowerLevelInfo:XMLList = towerLevelInfo.towerType.(@type == String(infObj.type)).towerLevel.(@id == infObj.id).level.(@grade == tLevel);
				var _towerHP:int = int(elementTowerLevelInfo.lifeHP);
				var _towerArmor:int = int(elementTowerLevelInfo.armor);
				var tower:Towers = (String(infObj.type) == Towers.ORGAN_TOWER || String(infObj.type) == Towers.OBSTACLE_TOWER) ? new Towers(String(elementTowerInfo.name), false, _towerHP, _towerArmor,tLevel) : new Towers(String(elementTowerInfo.name), true, _towerHP, _towerArmor,tLevel);
				tower.mouseChildren = false;
				tower.mouseEnabled = false;
				tower.id = infObj.id;
				tower.x = int(_siteArr[0]) + int(infObj.num) * GlobalVariable.RECT_WIDTH + GlobalVariable.RECT_WIDTH / 2;
				tower.y = int(_siteArr[1]) + int(infObj.row) * GlobalVariable.RECT_HEIGHT + GlobalVariable.RECT_HEIGHT / 2;
				tower.row = String(infObj.type) != Towers.ORGAN_TOWER ? int(infObj.row) : 0;
				tower.num = int(infObj.num);
				tower.elementType = String(infObj.type);
				tower.unitId = String(infObj.unitId);
				tower.paper = int(elementTowerInfo.paper);
				tower.shootSound = String(elementTowerInfo.shootSound);
				tower.attackedSound = String(elementTowerInfo.attackedSound);
				tower.deathSound = String(elementTowerInfo.deathSound);
				tower.elementDeadName = String(elementTowerInfo.deathName);
				switch (String(infObj.type))
				{
					
					case Towers.DEFENCE_TOWER: 
						tower.minAttackRange = Number(elementTowerInfo.minAttackRange);
						tower.maxAttackRange = Number(elementTowerInfo.maxAttackRange);
						tower.lifeHP = _towerHP;
						tower.skills = int(elementTowerInfo.skills);
						tower.armor = _towerArmor;
						tower.defense = int(elementTowerLevelInfo.defense);
						tower.attack = int(elementTowerLevelInfo.attack);
						tower.bulletEffectName = String(elementTowerInfo.bulletName);
						tower.attackType = int(elementTowerInfo.attackType);
						tower.attackHZ = int(elementTowerInfo.attackHZ);
						tower.backHP = int(elementTowerInfo.backHP);
						_towerArr.push(tower);
						break;
					
					case Towers.ORGAN_TOWER: 
						tower.minAttackRange = Number(elementTowerInfo.minAttackRange);
						tower.maxAttackRange = Number(elementTowerInfo.maxAttackRange);
						tower.skills = int(elementTowerInfo.skills);
						tower.attackHZ = int(elementTowerInfo.attackHZ);
						tower.attack = int(elementTowerLevelInfo.attack);
						_towerArr.push(tower);
						break;
					
					case Towers.ENERGY_TOWER: 
						tower.minAttackRange = Number(elementTowerInfo.minAttackRange);
						tower.maxAttackRange = Number(elementTowerInfo.maxAttackRange);
						tower.lifeHP = _towerHP;
						tower.skills = int(elementTowerInfo.skills);
						tower.armor = _towerArmor;
						tower.defense = int(elementTowerLevelInfo.defense);
						tower.backHP = int(elementTowerLevelInfo.backHP);
						_towerArr.push(tower);
						break;
					
					case Towers.DAMAGE_TOWER: 
						tower.skills = int(elementTowerInfo.skills);
						_towerArr.push(tower);
						break;
					
					case Towers.OBSTACLE_TOWER: 
						tower.skills = int(elementTowerInfo.skills);
						tower.isAlive = false;
						_obstacleTowerArr.push(tower);
						break;
				}
				
				
				addElement(tower);
				elementTowerInfo = null;
				elementTowerLevelInfo = null;
			}
			
			_msClass = UICommand.getClass("MakeSoldierFactory");
			_makeSoldierMovie = new _msClass() as MovieClip;
			switch (_mapPath)
			{
				
				case 1:
					_layerArr[int(_startArr[0])].addChild(_makeSoldierMovie);
					break;
				
				case 2:
					_layerArr[int(_rectArr[0])].addChild(_makeSoldierMovie);
					break;
				
				case 3:
					_layerArr[0].addChild(_makeSoldierMovie);
					break;
			}
			//_oneLayer.addChild(_makeSoldierMovie);
			_makeSoldierMovie.x = _runArray[0].unitX;
			_makeSoldierMovie.y = _runArray[0].unitY;
			_msClass = null;
			
			if (!hasEventListener(Event.ENTER_FRAME))
			{
				addEventListener(Event.ENTER_FRAME, renderAll);
				gameFlag = true;
			}
			
			
			_mapInfo = null;
			towerInfo = null;
			towerLevelInfo = null;
			clearRepeatOreTower();
			showFreedomBird();
			if (_skillsButtonFlag) {
				createGlodArray(_runArray);
				if(int(UICommand.t.userData[1][2]) > 4){
					if (int(towerObj.dailyWarSum) == 0 && int(UICommand.t.userData[1][2]) < 11) {
						
						showRingSkillsButton(true);
					}
					else {
						
						showRingSkillsButton();
					}
				}
			}
			
			for each (var element:Element in _obstacleTowerArr) {
				
				if (element.elementName == "QiangTa")
					_qingTaArr.push(element);
			}
			
			showQiangTaRandom();
			showPaperSoldier();
		}
		/**
		 * 处理塔科技等级数据
		 * @param	arr
		 * @return
		 */
		private function getTowerTechInfo(arr:Array):Object {
			
			if (!arr) return null;
			var objLevel:Object = new Object();
			var _towerTechXml:XML = XMLSource.getXMLSource("TowerTechTree.xml");
			for each (var obj:Object in arr) {
				
				objLevel[int(obj[1])] = int(obj[2]) > 0 ? int(obj[2]) : 1;
			}
			_towerTechXml = null;
			return objLevel;
		}
		
		/**
		 * 清楚重复的矿塔
		 */
		private function clearRepeatOreTower():void {
			
			var _oreRepeatArr:Array = [];
			for each (var obj:Towers in _towerArr) {
				
				if (obj.id == "602" && obj.elementType == Towers.ORGAN_TOWER) {
					_oreRepeatArr.push(obj);
				}
			}
			
			for (var i:int = 0; i < 3; i ++ ) {
				
				var _aArr:Array = [];
				var _objT:Towers = _oreRepeatArr[0];
				_oreRepeatArr.splice(0, 1);
				for each(var objA:Towers in _oreRepeatArr) {
					
					if (_objT.x == objA.x && _objT.y == objA.y) {
						_aArr.push(objA);
					}
					objA = null;
				}
				_objT = null;
				for each (var objB:Towers in _aArr) {
					
					var a:int = _oreRepeatArr.indexOf(objB);
					if (a != -1)_oreRepeatArr.splice(a, 1);
					
					var c:int = _towerArr.indexOf(objB);
					if (c != -1)_towerArr.splice(c, 1);
					removeLayerElement(objB);
					
					objB = null;
				}
				
				_aArr = null;
			}
			
			_oreRepeatArr = null;
		}
		
		
		private var _skillsButtonInfo:Object;
		/**
		 * 显示技能说明
		 */
		public function showSkillsButtonInfo():void {
			if (int(UICommand.t.userData[1][2]) > 10 || int(UICommand.t.userData[1][2]) < 5) return;
			if (!_skillsButtonInfo) {
				
				var _mClass:Class = UICommand.getClass("SkillsButtonInfo");
				_skillsButtonInfo = new _mClass();
				_mClass = null;
				this.addChild(_skillsButtonInfo as DisplayObject);
				_skillsButtonInfo.x = 505;
				var sText:String = String(XMLSource.getXMLSource("UISite.xml").skillsButton.info);
				var sTarr:Array = sText.split("！");
				_skillsButtonInfo["txt"].text = String(sTarr[0]) + "！" + UIName.CHAR_RETURN_WRAP + String(sTarr[1]);
			}
		}
		private function removeSkillsButtonInfo():void {
			
			if (_skillsButtonInfo) {
				this.removeChild(_skillsButtonInfo as DisplayObject);
				_skillsButtonInfo = null;
			}
		}
		private var _ringBuGou:Object;
		private var _ringBuGouTimer:Timer;
		public function showRingBuGou():void {
			
			if (!_ringBuGou) {
				
				var _mClass:Class = UICommand.getClass("RingBuGou");
				_ringBuGou = new _mClass();
				_mClass = null;
				(UIMain.getInstance(UIMain.NAME) as UIMain).addChild(_ringBuGou as DisplayObject);
				_ringBuGou.x = GlobalVariable.STAGE_WIDTH + 20;
				_ringBuGou.y = 200;
				
				
				if (!_ringBuGouTimer) {
					TweenLite.to(_ringBuGou as DisplayObject, 1, { x:GlobalVariable.STAGE_WIDTH - _ringBuGou.width - 10, y:200, ease:Back.easeIn } );
					_ringBuGouTimer = new Timer(5000, 1);
					_ringBuGouTimer.addEventListener(TimerEvent.TIMER_COMPLETE, ringBuGouTimerComplete);
					_ringBuGouTimer.start();
				}
			}else {
				
				if (!_ringBuGouTimer) {
					TweenLite.to(_ringBuGou as DisplayObject, 1, { x:GlobalVariable.STAGE_WIDTH - _ringBuGou.width - 10, y:200, ease:Back.easeIn } );
					_ringBuGouTimer = new Timer(5000, 1);
					_ringBuGouTimer.addEventListener(TimerEvent.TIMER_COMPLETE, ringBuGouTimerComplete);
					_ringBuGouTimer.start();
				}
			}
		}
		
		private function ringBuGouTimerComplete(event:TimerEvent):void {
			
			TweenLite.to(_ringBuGou as DisplayObject, 1, { x:GlobalVariable.STAGE_WIDTH + 20, y:200, ease:Back.easeIn } );
			_ringBuGouTimer.reset();
			_ringBuGouTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, ringBuGouTimerComplete);
			_ringBuGouTimer = null;
		}
		
		/**
		 * 添加并且显示 付费技能按钮
		 * @param	skillsName
		 * @param	skillsFunction
		 * @param	skillsCDTime
		 * @param	skillsRing
		 * @param	skillsButtonName
		 */
		public function addSkillsButton(skillsName:String,skillsFunction:Function,skillsCDTime:int,skillsRing:int,skillsButtonName:String):void {
			
			if (_skillsButtonFlag) {
				
				for each (var skillsBtn:SkillsButton in _skillsButtonArr)
				{
					if (skillsBtn.skillsName == skillsName) return;
				}
				
				_skillsButton = new SkillsButton(skillsFunction, skillsCDTime, skillsRing, skillsButtonName);
				addChild(_skillsButton);
				_skillsButton.x = 20;
				_skillsButton.y = 420;
				_skillsButton.skillsName = skillsName;
				_skillsButtonArr.push(_skillsButton);
				_skillsButton = null;
			}
		}
		
		private var _gemIconArr:Array = [];
		/**
		 * 显示英雄携带光环图标
		 * @param	icoName
		 */
		public function addGemIcon(icoName:String):void {
			
			if (icoName != null) {
				var _gemClass:Class = UICommand.getClass(icoName);
				var _gems:Sprite = new _gemClass() as Sprite;
				addChild(_gems);
				_gemIconArr.push(_gems);
				_gems.x = 20;
				_gems.y = 365;
				_gems = null;
				_gemClass = null;
				
			}
		}
		private var _btName:String = "ringSkillsButon";
		/**
		 * 显示付费大招按钮
		 */
		private function showRingSkillsButton(freeFlag:Boolean = false):void
		{
			
			//===============时间
			_skillsButton = new SkillsButton(plusAttackTime, int(XMLSource.getXMLSource("UISite.xml").skillsButton.plusTime.cdTime), int(XMLSource.getXMLSource("UISite.xml").skillsButton.plusTime.valueTime), "ScreenSkillsButtonTime", 2,freeFlag);
			addChild(_skillsButton);
			_skillsButton.x = 700;
			_skillsButton.y = 270;
			_skillsButton.skillsName = _btName;
			_skillsButtonArr.push(_skillsButton);
			_skillsButton = null;
			//==============桶盖
			_skillsButton = new SkillsButton(allAliveStopWork, int(XMLSource.getXMLSource("UISite.xml").skillsButton.coverTower.cdTime), int(XMLSource.getXMLSource("UISite.xml").skillsButton.coverTower.valueTime), "ScreenSkillsButtonTongGai", 4,freeFlag);
			addChild(_skillsButton);
			_skillsButton.x = 700;
			_skillsButton.y = 340;
			_skillsButton.skillsName = _btName;
			_skillsButtonArr.push(_skillsButton);
			_skillsButton = null;
			//==============锁定
			_skillsButton = new SkillsButton(allAliveTowerStopWork,int(XMLSource.getXMLSource("UISite.xml").skillsButton.lockTower.cdTime), int(XMLSource.getXMLSource("UISite.xml").skillsButton.lockTower.valueTime), "ScreenSkillsButtonSuoDing", 8,freeFlag);
			addChild(_skillsButton);
			_skillsButton.x = 700;
			_skillsButton.y = 410;
			_skillsButton.skillsName = _btName;
			_skillsButtonArr.push(_skillsButton);
			_skillsButton = null;
		
		}
		/**
		 * 战斗时间剩余一分钟时，收费技能按钮闪烁
		 */
		public function flashingSkillsButton():void {
			
			for each(var obj:Object in _skillsButtonArr) {
				obj.waring(true);
			}
		}
		
		private var _plusTimeMovie:MovieClip;
		
		private function plusAttackTime(value:int):void
		{
			
			(UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).increaseTime = value;
			(UIMain.getInstance(InformationLayer.NAME) as InformationLayer).whiteStage();
			if (!_plusTimeMovie)
			{
				
				var _mCLass:Class = UICommand.getClass("RingTimeMovie");
				_plusTimeMovie = new _mCLass() as MovieClip;
				addChild(_plusTimeMovie);
				_plusTimeMovie.addFrameScript(_plusTimeMovie.totalFrames - 1, function():void
					{
						_plusTimeMovie.stop();
					});
				_mCLass = null;
			}
			else
			{
				_plusTimeMovie.gotoAndPlay(1);
			}
		}
		
		private function removeTimeMovie():void
		{
			
			if (_plusTimeMovie)
			{
				
				removeChild(_plusTimeMovie);
				_plusTimeMovie = null;
			}
		}
		
		/**
		 * 对箭塔数据进行竖向层排序
		 * @param	_towerInfo
		 * @return
		 */
		private function sortTowerInfo(_towerInfo:Array):Array
		{
			
			var _towerLen:int = _towerInfo.length;
			for (var m:int = 0; m < _towerLen; m++)
			{
				
				for (var n:int = m; n < _towerLen; n++)
				{
					
					var obj:Object = _towerInfo[m];
					if (_towerInfo[m].row > _towerInfo[n].row)
					{
						
						_towerInfo[m] = _towerInfo[n];
						_towerInfo[n] = obj;
					}
					obj = null;
				}
			}
			
			return _towerInfo;
		}
		private var _girdView:Boolean = false;
		private var _viewRectFlag:Boolean = false;
		/**
		 * 开关地图方格
		 * @param	viewFlag
		 */
		public function viewRect(viewFlag:Boolean):void
		{
			_viewRectFlag = viewFlag;
			if (_girdView) {
				
				if(_gridPic)_gridPic.visible = viewFlag;
			}
			(UIMain.getInstance(BackgroundLayer.NAME) as BackgroundLayer).viewRect(viewFlag);
		}
		
		private function gridPicIoError(event:IOErrorEvent):void
		{
			_gridPic.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, gridPicIoError);
			_gridPic.contentLoaderInfo.removeEventListener(Event.COMPLETE, gridPicLoadComplete);
		}
		
		private function gridPicLoadComplete(event:Event):void
		{
			
			_girdView = true;
			_gridPic.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, gridPicIoError);
			_gridPic.contentLoaderInfo.removeEventListener(Event.COMPLETE, gridPicLoadComplete);
		}
		
		private var _lineArray:Array = new Array();
		
		/**
		 * 链路塔连线
		 * @param	from
		 * @param	to
		 */
		public function showTowerLine(from:Element, to:Element):void
		{
			
			if (selectLineArray(from.unitId, to.unitId))
			{
				
				var _lineObj:Object = new Object();
				_lineObj.oneId = from.unitId;
				_lineObj.twoId = to.unitId;
				var _shockBeam:ShockBeam = new ShockBeam(from.position.x, from.position.y - 15, to.position.x + 1, to.position.y - 15);
				_twoLayer.addChild(_shockBeam);
				_lineObj.line = _shockBeam;
				_lineArray.push(_lineObj);
				from = null;
				to = null;
				_shockBeam = null;
			}
		}
		
		/**
		 * 检查是否存在此链路
		 * @param	oneId 箭塔A unitID
		 * @param	twoId 箭塔B unitID
		 * @return
		 */
		private function selectLineArray(oneId:String, twoId:String):Boolean
		{
			
			for each (var lineObj:Object in _lineArray)
			{
				
				if ((lineObj.oneId == oneId || lineObj.twoId == oneId) && (lineObj.oneId == twoId || lineObj.twoId == twoId))
					return false;
			}
			
			return true;
		}
		
		/**
		 * 移除链路塔连线
		 * @param	element
		 */
		public function removeTowerLine(element:Element):void
		{
			
			for (var i:int = 0; i < _lineArray.length; i++)
			{
				
				if (_lineArray[i].oneId == element.unitId || _lineArray[i].twoId == element.unitId)
				{
					
					_twoLayer.removeChild(_lineArray[i].line as ShockBeam);
					_lineArray.splice(i, 1);
				}
			}
			element = null;
		}
		
		/**
		 * 添加显示单位
		 * @param	element
		 */
		public function addElement(element:Element):void
		{
			
			if (_renderArr.indexOf(element) == -1 && element.elementType != Towers.OBSTACLE_TOWER)
				_renderArr.push(element);
			
			if (element.row >= 0 && element.row < _layerArr.length)
			{
				
				(_layerArr[element.row] as Sprite).addChild(element);
			}
			else if (element.row < 0)
			{
				(_layerArr[0] as Sprite).addChild(element);
				element.row = 0;
			}
			else
			{
				(_layerArr[_layerArr.length - 1] as Sprite).addChild(element);
				element.row = _layerArr.length - 1;
			}
			if (element.elementType != Towers.OBSTACLE_TOWER && element.adType != Element.ATTACK && element.elementSkills != 211)
				element.isReady = true;
		}
		
		private var _indexInt:int = -1;
		
		/**
		 * 移除死亡单位
		 * @param	element
		 */
		public function removeElement(element:Element):void
		{
			
			_indexInt = _renderArr.indexOf(element);
			if (_indexInt != -1)
			{
				
				_renderArr.splice(_indexInt, 1);
				element.clear();
				_layerArr[element.row].removeChild(element);
			}
			
			_indexInt = _towerArr.indexOf(element);
			if (_indexInt != -1)
				_towerArr.splice(_indexInt, 1);
			
			_indexInt = _attackArr.indexOf(element);
			if (_indexInt != -1)
				_attackArr.splice(_indexInt, 1);
			
			_indexInt = _soldierArr.indexOf(element);
			if (_indexInt != -1)
				_soldierArr.splice(_indexInt, 1);
			
			_indexInt = _heroArr.indexOf(element);
			if (_indexInt != -1)
				_heroArr.splice(_indexInt, 1);
			
			element = null;
			
		}
		/**
		 * 箭塔死亡后 将其 移除 渲染数组
		 * @param	element
		 */
		public function swapTowerArr(element:Element):void {
			
			var index:int = _towerArr.indexOf(element);
			
			if (index != -1) {
				_towerArr.splice(index, 1);
			}
			
			index = _renderArr.indexOf(element);
			
			if (index != -1) {
				
				_renderArr.splice(index, 1);
			}
			
			index = _obstacleTowerArr.indexOf(element);
			if (index == -1) {
				_obstacleTowerArr.push(element);
			}
			element = null;
		}
		
		private var _indexLayerInt:int = -1;
		
		/**
		 * 移除当前层单位
		 * @param	element
		 */
		public function removeLayerElement(element:Element):void
		{
			
			_indexLayerInt = _renderArr.indexOf(element);
			if (_indexLayerInt != -1)
			{
				
				_renderArr.splice(_indexLayerInt, 1);
				_layerArr[element.row].removeChild(element);
			}
		
		}
		
		/**
		 * 推出战斗，移除所有单位
		 */
		public function removeAllElement():void
		{
			if (_playbackTimer) {
				_playbackTimer.reset();
				_playbackTimer.removeEventListener(TimerEvent.TIMER, playbackTimerHandler);
				_playbackTimer = null;
			}
			if (_randomTimer) {
				
				_randomTimer.reset();
				_randomTimer.removeEventListener(TimerEvent.TIMER, randomTimerHandler);
				_randomTimer = null;
			}
			_qingTaArr = [];
			for each (var element:Element in _renderArr)
			{
				element.clear();
			}
			
			if (_renderArr)
			{
				
				for (var m:int = 0; m < _layerArr.length; m++)
				{
					
					_oneLayer.removeChild(_layerArr[m]);
				}
				
				_attackArr = [];
				_renderArr = [];
				_soldierArr = [];
				_towerArr = [];
				_obstacleTowerArr = [];
				_makeSoldierMovie = null;
			}
			
			for each (var _hero:Hero in _heroArr) {
				
				_twoLayer.removeChild(_hero);
			}
			
			_heroArr = [];
			
			if (_createGlodTimer)
			{
				
				_createGlodTimer.reset();
				_createGlodTimer.removeEventListener(TimerEvent.TIMER, createGlodTimerHandler);
				_createGlodTimer = null;
			}
			_createGlodDealy = _createGlodMirrorDealy;
			for (var i:int = 0; i < _lineArray.length; i++)
			{
				
				_twoLayer.removeChild(_lineArray[i].line as ShockBeam);
			}
			_lineArray = [];
			
			if (_matteLayer)
			{
				_twoLayer.removeChild(_matteLayer);
				_matteLayer = null;
			}
			
			_layerArr = [];
			
			if (hasEventListener(Event.ENTER_FRAME))
			{
				removeEventListener(Event.ENTER_FRAME, renderAll);
			}
			
			if (_gridPic)
			{
				
				if (_girdView)
				{
					_rectLayer.removeChild(_gridPic);
					_gridPic.unload();
					_gridPic = null;
				}
				else
				{
					_gridPic.unloadAndStop();
					_gridPic = null;
				}
			}
			
			if (_heroAltar) {
				
				_rectLayer.removeChild(_heroAltar);
				_heroAltar = null;
			}
			
			for each (var ore:OrePaper in _orePaperArr)
			{
				removeChild(ore);
				ore.killTimer();
				ore = null;
			}
			_orePaperArr = [];
			
			if (_freedomBird)
			{
				removeChild(_freedomBird);
				_freedomBird = null;
			}
			
			if (_birdTimer)
			{
				_birdTimer.reset();
				_birdTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, birdTimerComplete);
				_birdTimer = null;
			}
			
			for each (var skillsBtn:SkillsButton in _skillsButtonArr)
			{
				removeChild(skillsBtn);
				skillsBtn.clear();
				skillsBtn = null;
			}
			_skillsButtonArr = [];
			removeTimeMovie();
			removeGemIcon();
			removeSkillsButtonInfo();
			_skillsButtonFlag = true;
			
			if (_ringBuGou) {
				(UIMain.getInstance(UIMain.NAME) as UIMain).removeChild(_ringBuGou as DisplayObject);
				_ringBuGou = null;
			}
			
			if (_ringBuGouTimer) {
				_ringBuGouTimer.reset();
				_ringBuGouTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, ringBuGouTimerComplete);
				_ringBuGouTimer = null;
			}
			
			if (_paperSoldier) {
				
				_twoLayer.removeChild(_paperSoldier);
				_paperSoldier = null;
			}
			
			if (_paperSoldierMovie) {
				
				_twoLayer.removeChild(_paperSoldierMovie);
				_paperSoldierMovie = null;
			}
			
			if (_countdownTimer) {
				
				_countdownTimer.reset();
				_countdownTimer.removeEventListener(TimerEvent.TIMER, countdownTimerHandler);
				_countdownTimer = null;
			}
			
			if (_countdownPanel) {
				
				_twoLayer.removeChild(_countdownPanel as DisplayObject);
				_countdownPanel = null;
			}
		}
		
		private var _birdTimer:Timer;
		private var _freedomBird:MovieClip;
		private var _birdFrame:int = 1;
		
		private function showFreedomBird(valueFrame:int = 1):void
		{
			
			_birdFrame = valueFrame;
			if (!_freedomBird)
			{
				var _mClass:Class = UICommand.getClass("FreedomBird");
				_freedomBird = new _mClass() as MovieClip;
				addChild(_freedomBird);
				_mClass = null;
				_freedomBird.x = _freeBirdX;
				_freedomBird.gotoAndStop(valueFrame);
			}
			else
			{
				_freedomBird.gotoAndStop(valueFrame);
			}
		}
		
		private function birdTimerComplete(event:TimerEvent):void
		{
			
			_birdTimer.reset();
			_birdTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, birdTimerComplete);
			_birdTimer = null;
			showFreedomBird(3);
		}
		
		private var _randomTimer:Timer;
		/**
		 * 随机展示墙塔
		 */
		private function showQiangTaRandom():void {
			
			if (_qingTaArr.length > 0) {
				
				var _randomTime:int = 5000 + Math.random() * 10000;
				_randomTimer = new Timer(_randomTime);
				_randomTimer.addEventListener(TimerEvent.TIMER, randomTimerHandler);
				_randomTimer.start();
			}
		}
		
		private function randomTimerHandler(event:TimerEvent):void {
			
			var _num:int = Math.random() * _qingTaArr.length;
			(_qingTaArr[_num] as Towers).showQianTa();
			var _randomTime:int = 5000 + Math.random() * 10000;
			_randomTimer.delay = _randomTime;
		}
		/**
		 * 移除指定技能图标
		 * @param	value
		 */
		public function removeHeroSkillsButton(value:String):void
		{
			
			for (var i:int = 0; i < _skillsButtonArr.length; i++)
			{
				
				if ((_skillsButtonArr[i] as SkillsButton).skillsName == value)
				{
					removeChild((_skillsButtonArr[i] as SkillsButton));
					_skillsButtonArr.splice(i, 1);
					return;
				}
			}
		}
		/**
		 * 移除英雄宝石图标
		 */
		public function removeGemIcon():void {
			
			for each (var sp:Sprite in _gemIconArr) {
				
				removeChild(sp);
				sp = null;
			}
			_gemIconArr = [];
		}
		private var _valuePoint:Point;
		
		public function get paperPoint():Point
		{
			if (_valuePoint)
			{
				return _valuePoint;
			}
			else
			{
				_valuePoint = UICommand.getPaperPoint();
				return _valuePoint;
			}
		}
		
		/**
		 * 得到攻击目标索引
		 * @param	element
		 * @return
		 */
		public function getTargetIndex(element:Element):int
		{
			
			return _renderArr.indexOf(element);
		}
		
		/**
		 * 创建 可生成金币点数组
		 * @param	value  行走点路径数组
		 */
		private function createGlodArray(value:Array):void
		{
			var tempArr:Array = MapRectInfo.appearArray;
			if (tempArr.length <= 0)
				return;
			
			for (var i:int = 0; i < tempArr.length; i++)
			{
				
				_glodArray[i] = tempArr[i];
			}
			
			//var delArr:Array = new Array();
			//
			//for (var j:int = 0; j < value.length; j++)
			//{
				//
				//var m:int = _glodArray.indexOf(value[j]);
				//if (m != -1)
					//delArr.push(m);
			//}
			//
			//for (var n:int = 0; n < delArr.length; n++)
			//{
				//
				//_glodArray.splice(delArr[n], 1);
			//}
			
			createGlod();
		}
		private var _createGlodTimer:Timer;
		private var _createGlodDealy:int = 15000;
		private var _createGlodMirrorDealy:int = 15000;
		
		/**
		 * //加成 系统补给
		 * @param	value
		 */
		public function additionSupply(value:Number):void
		{
			
			_createGlodDealy = (1 - value) * _createGlodMirrorDealy;
			if (_createGlodTimer)
				_createGlodTimer.delay = _createGlodDealy;
		}
		
		/**
		 * 创建随机出现金币
		 */
		private function createGlod():void
		{
			if (_plusPaperTime < 5)_plusPaperTime = 5;
			_createGlodTimer = new Timer(_plusPaperTime * 1000);
			_createGlodTimer.addEventListener(TimerEvent.TIMER, createGlodTimerHandler);
			//_createGlodTimer.start();
		
		}
		private var _orePaperArr:Array = new Array();
		
		/**
		 * 随机出现金币
		 * @param	event
		 */
		private function createGlodTimerHandler(event:TimerEvent):void
		{
			
			var glodInt:int = Math.random() * _glodArray.length;
			addOrePaper(new OrePaper(_plusPaperSum, _cutPaperTime, 1), (_glodArray[glodInt] as Node).unitX, (_glodArray[glodInt] as Node).unitY + GlobalVariable.RECT_HEIGHT / 2);
		
		}
		
		public function addOrePaper(orePaper:OrePaper, ox:Number, oy:Number):void
		{
			
			addChild(orePaper);
			orePaper.x = ox;
			orePaper.y = oy;
			_orePaperArr.push(orePaper);
		}
		
		public function removeOrePaper(orePaper:OrePaper):void
		{
			
			var _index:int = _orePaperArr.indexOf(orePaper);
			if(contains(orePaper))removeChild(orePaper);
			if (_index != -1)
				_orePaperArr.splice(_index, 1);
			orePaper.killTimer();
			orePaper = null;
		
		}
		
		private var _passSum:int = 0;
		
		/**
		 * 战斗中顺利通过人数
		 * @param	passFlag
		 */
		public function passPeopleSum(passFlag:int):void
		{
			if (!_skillsButtonFlag) return;
			UICommand.setThrough(passFlag);
			_passSum += passFlag;
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).playSound("InTheDoorSound");
			if (_matteLayer)_matteLayer.gotoAndPlay(2);
		}
		private var _deathPeopleSum:int = 0;
		private var _deathPeopleArr:Array = [];
		private var _deathPeoplePaperSum:int = 0;
		
		/**
		 * 战斗中死亡的人数
		 * @param	valueObj
		 * 			valueObj.dataType : 死亡的是士兵还是英雄 soldier/hero
		 * 			valueObj.dataID   :   死亡人ID
		 * 			valueObj.dataSum    :同类型死亡数量
		 */
		public function deathPeopleSum(valueObj:Object, valuePaper:int):void
		{
			_deathPeopleSum++;
			_deathPeoplePaperSum += valuePaper;
			for each (var obj:Object in _deathPeopleArr)
			{
				if (obj.dataType == valueObj.dataType && obj.dataID == valueObj.dataID)
				{
					obj.dataSum++;
					return;
				}
			}
			_deathPeopleArr.push(valueObj);
		}
		
		/**
		 *
		 * @return Object{dataDeathSum：死亡总人数；dataPaperSum：死亡人数消耗总手纸数；dataInfo：死亡人数信息}
		 */
		public function getDeathPeopleInfo():Object
		{
			
			var _obj:Object = new Object();
			_obj.dataDeathSum = _deathPeoplePaperSum;
			_obj.dataPaperSum = _allPaper;
			_obj.dataInfo = _deathPeopleArr;
			return _obj;
		}
		private var _deathTowerSum:int = 0;
		private var _deathTowerArr:Array = [];
		private var _deathTowerPaperSum:int = 0;
		
		/**
		 * 战斗中摧毁的防御塔数
		 * @param	valueObj
		 * 			valueObj.dataType ： 死亡塔的类型
		 * 			valueObj.dataID    ： 死亡塔的id
		 * 			valueObj.dataSum  ： 同类型死亡的数量
		 */
		public function deathTowerSum(valueObj:Object, valuePaper:int):void
		{
			
			_deathTowerSum++;
			_deathTowerPaperSum += valuePaper;
			for each (var obj:Object in _deathTowerArr)
			{
				if (obj.dataType == valueObj.dataType && obj.dataID == valueObj.dataID)
				{
					
					obj.dataSum++;
					return;
				}
				
			}
			_deathTowerArr.push(valueObj);
		}
		
		/**
		 *
		 * @return  Object{dataDeathSum：摧毁塔总数；dataPaperSum：摧毁塔总手纸数；dataInfo：摧毁塔信息}
		 */
		public function getDeathTowerInfo():Object
		{
			
			var _obj:Object = new Object();
			_obj.dataDeathSum = _deathTowerSum;
			_obj.dataPaperSum = _deathTowerPaperSum;
			_obj.dataInfo = _deathTowerArr;
			
			return _obj;
		}
		
		/**
		 * 战斗完成评分
		 * @param	winFlag 是否胜利
		 * @param	highGrade 是否是高等级玩家 （防御方的等级比进攻方高 true）
		 * @param	exitFlag    是否直接退出战斗
		 * @param	warState    战斗形式（0、匹配战斗；1、pve战斗；2、好友切磋）
		 * @return         _obj {_obj.dataWarTime: 战斗的剩余时间时间（秒）；
		 * 				_obj.dataWarScoreTime；战斗时间得分
		 * 				_obj.dataWarPaper:花费的总手纸数；
		 * 				_obj.dataWarScorePaper；战损得分
		 * 				_obj.dataWarScore:战斗总得分；
		 * 				_obj.dataWarScorePercent；战损百分比
		 * 				_obj.dataWarLevel:战斗等级；
		 * 				_obj.dataHighGrade：进攻的是否比防守的等级高 ；
		 * 				_obj.dataHighGradeScore；攻占高等级用户加分
		 * 				_obj.dataWinScore；战斗胜利加分
		 * 				_obj.dataDefeatScore；战斗失败扣分
		 * 				_obj.dataExitFlag：是否是中途放弃；
		 * 				_obj.dataWinFlag：是否胜利；
		 * 				_obj.dataResults；战斗结果
		 * 				_obj.dataResultScore；战斗结果得分
		 * 				_obj.dataDeathTowerPaper：摧毁防御塔的总手纸数;
		 * 				_obj.dataCap：此次战斗获得瓶盖数；
		 * 				_obj.dataExp：此次战斗获得经验数
		 * 				_obj.dataBuffExp：使用buff后增加的经验
		 * 				_obj.dataBuffExpName：使用增加经验buff的名字
		 * 				_obj.dataBuffItemSum：使用buff后增加的抽奖次数
		 * 				_obj.dataBuffItemSumName：使用增肌抽奖buff的名字
		 * 				_obj.dataItemSum：此次战斗获得物品数}
		 */
		public function getWarScoreAttack(winFlag:Boolean = true, levelObj:Object = null, exitFlag:Boolean = false,warState:int = 0):Object
		{
			if (winFlag && !exitFlag) {
				SoundLayer.getInstance().playSound(SoundName.SOUND_WIN_MAP);
			}else {
				SoundLayer.getInstance().playSound(SoundName.SOUND_FAILURE);
			}
			var _level1:int = levelObj[0];
			var _level2:int = levelObj[1];
			var _incomePercent:Number = 1;
			if (_level1 > _level2) {
				
				_incomePercent = int(Math.floor((_level1 - _level2) / 2)) * 0.05 <= 0.8 ?(1 - int(Math.floor((_level1 - _level2) / 2)) * 0.05 ):(1 - 0.8);
			}
			var highGrade:Boolean = _level1 >= _level2 ? false : true;
			_levelScore = 0;
			var _dataObj:Object = new Object();
			_dataObj.time = getTimer() - _showTime;
			_dataObj.type = "playBackComplete";
			_attackInfoArr.push(_dataObj);
			_dataObj = null;
			_showTime = getTimer();
			
			_allTime = UICommand.t.attackTime;
			
			var _warScoreTime:int = Math.ceil(_allTime / _warTime * _timeScore) <= _timeScore ?Math.ceil(_allTime / _warTime * _timeScore) : _timeScore;
			
			var _watScorePercent:Number = Math.round(_deathTowerPaperSum * (1.1 + _winPeople * 0.1) / (_allPaper + 1) / 0.001) * 0.001;
			var _warScorePaper:int = _watScorePercent * _paperScore < _paperScore ? Math.ceil(_watScorePercent* _paperScore) : _paperScore;
			
			_allScore = highGrade ? _warScoreTime + _warScorePaper + _levelScore  : _warScoreTime + _warScorePaper ;
			
			_allScore = winFlag ? _allScore + _winSocre : _allScore + _defeatSocre;
			
			var _obj:Object = new Object();
			_obj.dataWarTime = _allTime;
			_obj.dataWarScoreTime = _warScoreTime;
			_obj.dataWarPaper = _allPaper;
			_obj.dataWarScorePaper = _warScorePaper;
			_obj.dataWarScore = _allScore;
			_obj.dataWarScorePercent = int(_watScorePercent * 100).toString() + "%";
			_obj.dataHighGrade = highGrade;
			_obj.dataHighGradeScore = highGrade ? _levelScore : 0;
			_obj.dataWinScore = winFlag ? _winSocre : 0;
			_obj.dataDefeatScore = !winFlag ? _defeatSocre : 0;
			_obj.dataExitFlag = exitFlag;
			_obj.dataResults = exitFlag ? String(XMLSource.getXMLSource("UISite.xml").phrase.surrender) : (winFlag ? String(XMLSource.getXMLSource("UISite.xml").phrase.win) : String(XMLSource.getXMLSource("UISite.xml").phrase.lose));
			_obj.dataResultScore = exitFlag ? _surrenderScore : (winFlag ? _winSocre : _defeatSocre);
			_obj.dataDeathTowerPaper = _deathTowerPaperSum;
			if (exitFlag)
			{
				
				_obj.dataWarLevel = "C";
				_obj.dataWarScore = _allScore + _surrenderScore;
				_obj.dataCap = int(_baseCap * _capPercentC * _incomePercent);
				_obj.dataExp = _baseExp * _expPercentC;
				_obj.dataItemSum = _itemsSumC;
				_obj.dataWinFlag = false;
			}
			else
			{
				_obj.dataWinFlag = winFlag;
				if (_allScore >= _warScoreS)
				{
					_obj.dataWarLevel = "S";
					_obj.dataCap = int(_baseCap * _capPercentS * _incomePercent);
					_obj.dataExp = _baseExp * _expPercentS;
					_obj.dataItemSum = _itemsSumS;
				}
				else if (_allScore >= _warScoreA && _allScore < _warScoreS)
				{
					_obj.dataWarLevel = "A";
					_obj.dataCap = int(_baseCap * _capPercentA * _incomePercent);
					_obj.dataExp = _baseExp * _expPercentA;
					_obj.dataItemSum = _itemsSumA;
				}
				else if (_allScore >= _warScoreB && _allScore < _warScoreA)
				{
					_obj.dataWarLevel = "B";
					_obj.dataCap = int(_baseCap * _capPercentB * _incomePercent);
					_obj.dataExp = _baseExp * _expPercentB;
					_obj.dataItemSum = _itemsSumB;
				}
				else
				{
					_obj.dataWarLevel = "C";
					_obj.dataCap = int(_baseCap * _capPercentC * _incomePercent);
					_obj.dataExp = _baseExp * _expPercentC;
					_obj.dataItemSum = _itemsSumC;
				}
			}
			
			if (_heroArr.length > 0) {
				
				_obj.dataHeroServerID = _hObj.dataServerID;
				_obj.dataHeroHonor = int(int(XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapID).heroHonor) * Number(_hObj.dataHonor));
				_obj.dataHeroPower = int(XMLSource.getXMLSource("MapInfo.xml").maps.(@id == _mapID).heroPower);
			}else {
				
				_obj.dataHeroServerID = 0;
				_obj.dataHeroHonor = 0;
				_obj.dataHeroPower = 0;
			}
			_obj.dataHero = _hObj;
			
			if ((UIMain.getInstance(BuffLayer.NAME) as BuffLayer).checkBuffView("a") != 0) {
				_obj.dataBuffExp = int(int(_obj.dataExp) * Number(XMLSource.getXMLSource("Props.xml").prop.(@id == (UIMain.getInstance(BuffLayer.NAME) as BuffLayer).checkBuffView("a")).buffPercent) * _incomePercent);
				//_obj.dataExp += _obj.dataBuffExp;
				_obj.dataBuffExpName = String(XMLSource.getXMLSource("Props.xml").prop.(@id == (UIMain.getInstance(BuffLayer.NAME) as BuffLayer).checkBuffView("a")).langName);
			}
			else {
				_obj.dataBuffExp = 0;
				_obj.dataBuffExpName = "";
			}
			_obj.dataExp = int(_obj.dataExp * _incomePercent);
			if ((UIMain.getInstance(BuffLayer.NAME) as BuffLayer).checkBuffView("b") != 0) {
				_obj.dataBuffItemSum = 1;
				_obj.dataItemSum += _obj.dataBuffItemSum;
				_obj.dataBuffItemSumName = String(XMLSource.getXMLSource("Props.xml").prop.(@id == (UIMain.getInstance(BuffLayer.NAME) as BuffLayer).checkBuffView("b")).langName);
			}
			else {
				_obj.dataBuffItemSum = 0;
				_obj.dataBuffItemSumName = "";
			}
			
			return _obj;
		}
		
		/**
		 * 战斗完成评分
		 * @param	winFlag 是否胜利
		 * @return         obj {obj.dataWarTime: 战斗的总时间（秒）；
		 * 				obj.dataWarScore:战斗得分；
		 * 				obj.dataWarLevel:战斗等级；
		 * 				_obj.dataWinFlag：是否胜利；
		 * 				_obj.dataDeathPeople：击杀人数;
		 * 				_obj.dataPaperPercent：存活塔折合成手纸数所占布防手纸数的百分比;
		 * 				_obj.dataCap：此次战斗获得瓶盖数；
		 * 				_obj.dataExp：此次战斗获得经验数
		 * 				_obj.dataItemSum：此次战斗获得物品数}
		 */
		public function getWarScoreDefence(winFlag:Boolean = true, levelObj:Object = null, exitFlag:Boolean = false):Object
		{
			var highGrade:Boolean = levelObj[0] >= levelObj[1] ? false : true;
			if((UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).warTimer)_allTime = (UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).warTimer.currentCount;
			
			var _warScoreTime:int = _defenceTimeInitialScore + Math.ceil(_allTime / _warTime * _defenceTimeScore);
			
			var _warScorePaper:int = Math.ceil(_deathPeoplePaperSum / _mapPaper * (1.1 + _winPeople * 0.1) * _defencePaperScore) <= _defencePaperScore ? Math.ceil(_deathPeoplePaperSum / _mapPaper * (1.1 + _winPeople * 0.1) * _defencePaperScore) : _defencePaperScore;
			
			
			_allScore = winFlag ? (exitFlag ? _warScoreTime + _warScorePaper + _winSocre + _defenceSurrenderScore : _warScoreTime + _warScorePaper + _winSocre) : ( exitFlag ?_warScoreTime + _warScorePaper + _defenceSurrenderScore  + _defenceDefeatSocre: _warScoreTime + _warScorePaper + _defenceDefeatSocre);
			
			var _obj:Object = new Object();
			_obj.dataWarTime = _allTime;
			_obj.dataDeathPeople = _deathPeopleSum;
			_obj.dataPaperPercent = int((_mapPaper - _deathTowerPaperSum) / _mapPaper * 100);
			_obj.dataWarScore = _allScore > 0 ? _allScore : 0;
			_obj.dataWinFlag = winFlag;
			
			if (_allScore >= _defenceWarScoreS)
			{
				_obj.dataWarLevel = "S";
				_obj.dataExp = _baseExp * _defenceExpPercentS;
				_obj.dataCap = _baseCap * _defenceCapPercentS;
				_obj.dataItemSum = _defenceItemsSumS;
			}
			else if (_allScore >= _defenceWarScoreA && _allScore < _defenceWarScoreS)
			{
				_obj.dataWarLevel = "A";
				_obj.dataExp = _baseExp * _defenceExpPercentA;
				_obj.dataCap = _baseCap * _defenceCapPercentA;
				_obj.dataItemSum = _defenceItemsSumA;
			}
			else if (_allScore >= _defenceWarScoreB && _allScore < _defenceWarScoreA)
			{
				_obj.dataWarLevel = "B";
				_obj.dataExp = _baseExp * _defenceExpPercentB;
				_obj.dataCap = _baseCap * _defenceCapPercentB;
				_obj.dataItemSum = _defenceItemsSumB;
			}
			else
			{
				_obj.dataWarLevel = "C";
				_obj.dataExp = _baseExp * _defenceExpPercentC;
				_obj.dataCap = _baseCap * _defenceCapPercentC;
				_obj.dataItemSum = _defenceItemsSumC;
			}
			
			return _obj;
		}
		
		private var gameFlag:Boolean = false;
		private var _pauseTime:int = 0;
		/**
		 * 暂停游戏
		 */
		public function pauseGame():void
		{
			
			if (!gameFlag)
				return;
			gameFlag = false;
			_pauseTime = getTimer();
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).pasueAndStart(false);
			
			OptionMainLayer.UP_HP_FLAG = 0;
			removeEventListener(Event.ENTER_FRAME, renderAll);
			
			if ((UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).warTimer)
			{
				
				(UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).warTimer.stop();
			}
			if (_createGlodTimer)
				_createGlodTimer.stop();
			
			for each (var ore:OrePaper in _orePaperArr)
			{
				
				if (ore._glodBtnTimer)
				{
					ore._glodBtnTimer.stop();
				}
			}
			
			for each (var skillsBtn:SkillsButton in _skillsButtonArr)
			{
				skillsBtn.enableSkillsButton(false);
				skillsBtn.pauseAndStart(false);
			}
			
			if (!_allAliveStopWorkFlag)
			{
				
				for each (var aElement:Element in _attackArr)
				{
					if (aElement.isAlive)
						aElement.elementWork(false);
					aElement = null;
				}
				if (!_allAliveTowerStopWorkFlag)
				{
					
					for each (var tElement:Element in _towerArr)
					{
						if (tElement.isAlive)
							tElement.elementWork(false);
						tElement = null;
					}
				}
			}
			
			if (_playbackTimer)
				_playbackTimer.stop();
			if (_allAliveStopWorkTimer)
				_allAliveStopWorkTimer.stop();
			if (_allAliveTowerStopWorkTimer)
				_allAliveTowerStopWorkTimer.stop();
				
			if (_countdownTimer)_countdownTimer.stop();
		}
		public static var viewArticleBloodFlag:Boolean = true;
		
		/**
		 * 隐藏显示血条
		 */
		public function set viewArticleBlood(value:Boolean):void
		{
			
			if (viewArticleBloodFlag == value)
				return;
			else
				viewArticleBloodFlag = value;
			
			for each (var aElement:Element in _soldierArr)
			{
				aElement.viewArticleBlood = value;
			}
			for each (var tElement:Element in _towerArr)
			{
				if (tElement.elementType == Towers.OBSTACLE_TOWER || tElement.elementType == Towers.ORGAN_TOWER) continue;
				tElement.viewArticleBlood = value;
			}
		}
		
		/**
		 * 开始游戏
		 */
		public function startGame():void
		{
			
			if (gameFlag)
				return;
			gameFlag = true;
			_pauseTime = getTimer() - _pauseTime;
			(UIMain.getInstance(SoundLayer.NAME) as SoundLayer).pasueAndStart(true);
			
			OptionMainLayer.UP_HP_FLAG = 1;
			addEventListener(Event.ENTER_FRAME, renderAll);
			
			if ((UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).warTimer)
			{
				
				(UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).warTimer.start();
			}
			if (_createGlodTimer)
				_createGlodTimer.start();
			for each (var ore:OrePaper in _orePaperArr)
			{
				
				if (ore._glodBtnTimer)
				{
					ore._glodBtnTimer.start();
				}
			}
			
			for each (var skillsBtn:SkillsButton in _skillsButtonArr)
			{
				skillsBtn.enableSkillsButton(true);
				skillsBtn.pauseAndStart(true);
				if(skillsBtn.skillsName == _btName)skillsBtn.skillsButtonEnable();
			}
			
			if (!_allAliveStopWorkFlag)
			{
				
				for each (var aElement:Element in _attackArr)
				{
					if (aElement.isAlive)
						aElement.elementWork(true);
					aElement = null;
				}
				if (!_allAliveTowerStopWorkFlag)
				{
					
					for each (var tElement:Element in _towerArr)
					{
						if (tElement.isAlive)
							tElement.elementWork(true);
						tElement = null;
					}
				}
			}
			if (_playbackTimer)
				_playbackTimer.start();
			if (_allAliveStopWorkTimer)
				_allAliveStopWorkTimer.start();
			if (_allAliveTowerStopWorkTimer)
				_allAliveTowerStopWorkTimer.start();
				
			if (_countdownTimer)_countdownTimer.start();
		}
		
		private var _allAliveStopWorkTimer:Timer;
		private var _allAliveStopWorkFlag:Boolean = false;
		
		/**
		 * 付费 大招    全屏锁闭=====================================
		 * @param	stopWorkTime  持续时间  秒
		 */
		public function allAliveStopWork(stopWorkTime:int):void
		{
			if (stopWorkTime == 0)
				return;
			if (!_allAliveStopWorkTimer)
			{
				_allAliveStopWorkFlag = true;
				(UIMain.getInstance(InformationLayer.NAME) as InformationLayer).whiteStage();
				var _dataObj:Object = new Object();
				_dataObj.time = getTimer() - _showTime - _pauseTime;
				_dataObj.type = "aliveAll";
				_dataObj.data = stopWorkTime;
				_attackInfoArr.push(_dataObj);
				_pauseTime = 0;
				_dataObj = null;
				_showTime = getTimer();
				
				_allAliveStopWorkTimer = new Timer(1000, stopWorkTime);
				_allAliveStopWorkTimer.addEventListener(TimerEvent.TIMER_COMPLETE, allAliveStopWorkTimerComplete);
				_allAliveStopWorkTimer.start();
				
				for each (var aElement:Element in _soldierArr)
				{
					
					if (aElement.isAlive)
					{
						aElement.attackAble = false;
						aElement.elementWork(false);
					}
					aElement = null;
				}
				
				for each (var tElement:Element in _towerArr)
				{
					if (tElement.elementSkills == 211 || tElement.elementType == Towers.ORGAN_TOWER || tElement.elementType == Towers.OBSTACLE_TOWER || tElement.elementType == Towers.DAMAGE_TOWER)
						continue;
					if (tElement.isAlive)
					{
						tElement.elementSleep(true);
						tElement.isReady = false;
						if (!_allAliveTowerStopWorkFlag)
							tElement.elementWork(false);
						
					}
					tElement = null;
				}
				
			}
		}
		
		private function allAliveStopWorkTimerComplete(event:TimerEvent):void
		{
			
			_allAliveStopWorkTimer.reset();
			_allAliveStopWorkTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, allAliveStopWorkTimerComplete);
			_allAliveStopWorkTimer = null;
			
			for each (var aElement:Element in _attackArr)
			{
				
				if (aElement.isAlive)
				{
					aElement.attackAble = true;
					aElement.elementWork(true);
				}
				aElement = null;
			}
			
			for each (var tower:Towers in _towerArr)
			{
				if (tower.elementSkills == 211 || tower.elementType == Towers.ORGAN_TOWER || tower.elementType == Towers.OBSTACLE_TOWER || tower.elementType == Towers.DAMAGE_TOWER)
					continue;
				if (tower.isAlive)
				{
					tower.elementSleep(false);
					tower.isReady = true;
					if (!_allAliveTowerStopWorkFlag)
						tower.elementWork(true);
					else
						tower.attackAble = false;
				}
				tower = null;
			}
			_allAliveStopWorkFlag = false;
		}
		
		private var _allAliveTowerStopWorkTimer:Timer;
		private var _allAliveTowerStopWorkFlag:Boolean = false;
		
		/**
		 * 付费 大招     桶盖锁闭 ==========================================
		 * @param	stopWorkTime
		 */
		public function allAliveTowerStopWork(stopWorkTime:int):void
		{
			if (stopWorkTime == 0)
				return;
			if (!_allAliveTowerStopWorkTimer)
			{
				_allAliveTowerStopWorkFlag = true;
				(UIMain.getInstance(InformationLayer.NAME) as InformationLayer).whiteStage();
				var _dataObj:Object = new Object();
				_dataObj.time = getTimer() - _showTime - _pauseTime;
				_dataObj.type = "aliveTower";
				_dataObj.data = stopWorkTime;
				_attackInfoArr.push(_dataObj);
				_pauseTime = 0;
				_dataObj = null;
				_showTime = getTimer();
				
				_allAliveTowerStopWorkTimer = new Timer(1000, stopWorkTime);
				_allAliveTowerStopWorkTimer.addEventListener(TimerEvent.TIMER_COMPLETE, allAliveTowerStopWorkTimerComplete);
				_allAliveTowerStopWorkTimer.start();
				
				for each (var tower:Towers in _towerArr)
				{
					if (tower.elementSkills == 211 || tower.elementType == Towers.ORGAN_TOWER || tower.elementType == Towers.OBSTACLE_TOWER || tower.elementType == Towers.DAMAGE_TOWER)
						continue;
					if (tower.isAlive)
					{
						tower.backHPEnable = false;
						tower.attackAble = false;
						tower.showLockTowerMovie();
						if (!_allAliveStopWorkFlag)
							tower.elementWork(false);
					}
					tower = null;
				}
			}
		}
		
		private function allAliveTowerStopWorkTimerComplete(event:TimerEvent):void
		{
			
			_allAliveTowerStopWorkTimer.reset();
			_allAliveTowerStopWorkTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, allAliveTowerStopWorkTimerComplete);
			_allAliveTowerStopWorkTimer = null;
			
			for each (var tower:Towers in _towerArr)
			{
				if (tower.elementSkills == 211 || tower.elementType == Towers.ORGAN_TOWER || tower.elementType == Towers.OBSTACLE_TOWER || tower.elementType == Towers.DAMAGE_TOWER)
					continue;
				if (tower.isAlive)
				{
					tower.backHPEnable = true;
					tower.attackAble = true;
					tower.removeLockTowerMovie();
					if (!_allAliveStopWorkFlag)
						tower.elementWork(true);
				}
				tower = null;
			}
			_allAliveTowerStopWorkFlag = false;
		}
		
		private var _attackInfoArr:Array = new Array();
		
		/**
		 * 缓存 进攻数据
		 * @param	element
		 */
		public function saveAttackData(element:Element):void
		{
		
		}
		
		/**
		 * 得到进攻数据
		 * @return
		 */
		public function getAttackData():Object
		{
			
			var _dataObj:Object = new Object();
			
			_dataObj.playbackInfo = _attackInfoArr;
			_dataObj.mapInfo = _towerObj;
			return _dataObj;
		}
		
		/**
		 * 缓存防御数据
		 * @param	element
		 */
		public function saveDefenceData(element:Element):void
		{
		
		}
		private var _playbackTimerSum:int;
		private var _playbackTimer:Timer;
		private var _playbackTimerNum:int = 0;
		private var _playbackInfo:Array = [];
		private var _playBackFlag:Boolean = true;
		private var _countdownTime:int = 0;
		private var _countdownTimer:Timer;
		private var _countdownSum:int = 0;
		/**
		 *战斗回放
		 * @param	obj
		 */
		public function playbackWar(obj:Object):void
		{
			
			_playbackInfo = obj as Array;//sortPlaybackInfo(obj.playbackInfo as Array);
			
			_playbackTimerSum = _playbackInfo.length;
			_playbackTimerNum = 0;
			_countdownTime = 0;
			for each (var objT:Object in _playbackInfo) {
				
				_countdownTime += int(objT.time) <= 0 ? 1000 : int(objT.time);
			}
			showCountdown(_countdownTime);
			var _delay:int = int(_playbackInfo[0].time) <= 0 ? 1000 : int(_playbackInfo[0].time);
			_playbackTimer = new Timer(_delay, _playbackTimerSum);
			_playbackTimer.addEventListener(TimerEvent.TIMER, playbackTimerHandler);
			_playbackTimer.start();
		}
		
		private var _countdownPanel:Object;
		private function showCountdown(valueTime:int):void {
			
			_countdownSum = Math.floor(valueTime / 1000);
			
			var _mClass:Class = UICommand.getClass("com.paohui.ui.war.Deadline");
			_countdownPanel = new _mClass();
			_mClass = null;
			_twoLayer.addChild(_countdownPanel as DisplayObject);
			_countdownPanel["remind"].visible = false;
			_countdownPanel["txt"].text = convertTime(0) + "/" + convertTime(_countdownSum);
			_countdownPanel["txt"].width = _countdownPanel["txt"].width * 2;
			_countdownPanel["txt"].y = _countdownPanel.height + _countdownPanel["txt"].height - 10;
			_countdownPanel["txt"].x -= _countdownPanel["txt"].width/4;
			_countdownPanel["animation"].scaleX = 0;
			_countdownPanel["animation"].filters = [new ColorMatrixFilter([0.2,0.2,1,0,0,0.2,0.2,1,0,0,0,0,0,0,0,0,0,0,1,0])];
			
			_countdownTimer = new Timer(1000);
			_countdownTimer.addEventListener(TimerEvent.TIMER, countdownTimerHandler);
			_countdownTimer.start();
		}
		
		private function countdownTimerHandler(event:TimerEvent):void {
			
			if (_countdownTimer.currentCount <= _countdownSum) {
				
				_countdownPanel["txt"].text = convertTime(_countdownTimer.currentCount) + "/" + convertTime(_countdownSum);
				_countdownPanel["animation"].scaleX = Number(_countdownTimer.currentCount / _countdownSum);
			}
			else {
				
				_countdownTimer.reset();
				_countdownTimer.removeEventListener(TimerEvent.TIMER, countdownTimerHandler);
				_countdownTimer = null;
			}
		}
		
		//格式化
		private function convertTime(_timeNum:int):String
		{
			return (pad(Math.abs(int(_timeNum / 60)).toString(),2) + ":" + pad(Math.abs(int(_timeNum % 60)).toString(),2) + "");
		}
		//补0
		private function pad(num:String, n:int):String
		{
		    if ((num + "").length >= n)
			{
				return num;
			}
			return pad("0" + num, n);
		}
		
		/**
		 * 回放计时触发函数
		 * _playbackInfo【i】。type  “soldier”、“hero”、“aliveAll”、“aliveTower”
		 * @param	event
		 */
		private function playbackTimerHandler(event:TimerEvent):void
		{
			
			if (_playbackTimerNum  < _playbackTimerSum)
			{
				
				if(_playbackTimerNum + 1 < _playbackTimerSum)_playbackTimer.delay = int(_playbackInfo[_playbackTimerNum + 1].time) <= 0 ? 1000 : int(_playbackInfo[_playbackTimerNum + 1].time);
				
				if (String(_playbackInfo[_playbackTimerNum].type) == Element.SOLDIER)
				{
					
					makeSoldier(int(_playbackInfo[_playbackTimerNum].data.id), int(_playbackInfo[_playbackTimerNum].data.level));
				}
				else if (String(_playbackInfo[_playbackTimerNum].type) == Element.HERO)
				{
					makeHero(_playbackInfo[_playbackTimerNum].data);
				}
				else if (String(_playbackInfo[_playbackTimerNum].type) == "aliveAll")
				{
					allAliveStopWork(int(_playbackInfo[_playbackTimerNum].data));
				}
				else if (String(_playbackInfo[_playbackTimerNum].type) == "aliveTower")
				{
					allAliveTowerStopWork(int(_playbackInfo[_playbackTimerNum].data));
				}
				else if (String(_playbackInfo[_playbackTimerNum].type) == "heroSkills")
				{
					aeleaseHeroSkills({"playback":_playbackInfo[_playbackTimerNum].data});
				}
				else if (String(_playbackInfo[_playbackTimerNum].type) == "playBackComplete")
				{
					_playbackTimer.reset();
					_playbackTimer.removeEventListener(TimerEvent.TIMER, playbackTimerHandler);
					_playbackTimer = null;
					UICreate.popupPrompt(String(UIXML.uiXML.playback.info[1]), UIState.PLAYBACK);
				}
				
				_playbackTimerNum++;
			}
			else
			{
				
				_playbackTimer.reset();
				_playbackTimer.removeEventListener(TimerEvent.TIMER, playbackTimerHandler);
				_playbackTimer = null;
				UICreate.popupPrompt(String(UIXML.uiXML.playback.info[1]), UIState.PLAYBACK);
				SoundLayer.getInstance().clearMusic();
			}
		
		}
		
		/**
		 * 战斗回放时 触发 相应英雄技能
		 * @param	id
		 * @param	skillsID
		 */
		private function showHeroSkills(id:String, skillsID:int,point:Point = null):void
		{
			
			for each (var _hero:Hero in _heroArr)
			{
				
				if (_hero.id == id && _hero.elementSkills == skillsID)
				{
					_hero.skillsFunction();
					return;
				}
			}
		}
		
		private function sortPlaybackInfo(pbArr:Array):Array
		{
			
			var pbLen:int = pbArr.length;
			
			for (var i:int = 0; i < pbLen; i++)
			{
				
				for (var j:int = i; j < pbLen; j++)
				{
					
					var obj:Object = pbArr[i];
					if (pbArr[i].time > pbArr[j].time)
					{
						
						pbArr[i] = pbArr[j];
						pbArr[j] = obj;
					}
					obj = null;
				}
			}
			
			return pbArr;
		}
	} //end OptionMainLayer

}