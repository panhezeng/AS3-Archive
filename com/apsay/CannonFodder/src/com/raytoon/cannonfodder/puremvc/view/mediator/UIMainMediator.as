///////////////////////////////////////////////////////////
//  UIMainMediator.as
//  Macromedia ActionScript Implementation of the Class UIMainMediator
//  Generated by Enterprise Architect
//  Created on:      01-六月-2011 13:21:29
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.mediator
{
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	import com.raytoon.cannonfodder.tools.utils.NotificationNameList;
	import com.raytoon.cannonfodder.tools.utils.ProxyNotificationNameList;
	
	import flash.events.Event;
	
	import org.puremvc.as3.interfaces.IMediator;
	import org.puremvc.as3.interfaces.INotification;
	import org.puremvc.as3.patterns.mediator.Mediator;
	
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 01-六月-2011 13:21:29
	 */
	public class UIMainMediator extends Mediator implements IMediator
	{
		public static const NAME:String = "UIMainMediator";
		
		public function UIMainMediator(viewComponent:UIMain)
		{
			super(NAME, viewComponent);
		}
		
		public function get uiMain():UIMain
		{
			return viewComponent as UIMain;
		}
		
		override public function onRegister():void
		{
			uiMain.addEventListener(EventNameList.LIB_LOAD_COMPLETE, sendLibLoadComplete);
		}
		
		private function sendLibLoadComplete(event:Event):void
		{
			
//			sendNotification(NotificationNameList.REQUEST_OTHER_XML);
			sendLoadComplete();
		}
		
		override public function listNotificationInterests():Array
		{
			return [ProxyNotificationNameList.MAIN_XML_RECEIVED, ProxyNotificationNameList.OTHER_XML_RECEIVED, ProxyNotificationNameList.GET_USER];
		}
		
		override public function handleNotification(notification:INotification):void
		{
			switch (notification.getName())
			{
				
				case ProxyNotificationNameList.MAIN_XML_RECEIVED:
					
					uiMain.showLoader();
					break;
				
				case ProxyNotificationNameList.OTHER_XML_RECEIVED: 
					sendLoadComplete();
					break;
				
				case ProxyNotificationNameList.GET_USER:
					sendLoadComplete();
					if (notification.getBody()) {
						if (notification.getBody()[3][3] == null) return;
					}
					if(int(notification.getBody()[3][3]) == 6001)UIMain.USER_TYPE_FLAG = true;
					
					break;
				
			}
		}
		
		private var _loadFlag:int = 0;
		
		private function sendLoadComplete():void
		{
			
			_loadFlag++;
			if (_loadFlag >= 3)
			{
				uiMain.showViewUI();
				sendNotification(NotificationNameList.MAIN_MATERIAL_LOAD_COMPLETE);
			}
		}
	
	} //end UIMainMediator

}