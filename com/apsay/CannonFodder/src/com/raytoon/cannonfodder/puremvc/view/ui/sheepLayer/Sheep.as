///////////////////////////////////////////////////////////
//  Sheep.as
//  Macromedia ActionScript Implementation of the Class Sheep
//  Generated by Enterprise Architect
//  Created on:      01-十二月-2011 14:07:19
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.puremvc.view.ui.sheepLayer
{
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.tools.BaseSprite;
	import com.raytoon.cannonfodder.tools.utils.SoundName;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.geom.Point;
	import flash.net.drm.VoucherAccessInfo;
	import flash.system.ApplicationDomain;
	import flash.utils.Timer;
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 01-十二月-2011 14:07:19
	 */
	public class Sheep extends BaseSprite
	{
		//行动区域数组  二维矩阵
		private var _runArr:Array = [];
		
		public function Sheep(){
			super(true,true,true);
		}
		
		private var _sheep:MovieClip;
		private var _sheepX:Number = 0;
		private var _sheepY:Number = 0;
		/**
		 * 显示羊，1 帧 ：羊静止；2帧：羊吃草；3帧：羊行走；4帧：羊奔跑。
		 */
		public function showSheep():void {
			
			var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("SheepMovie") as Class;
			_sheep = new _mClass() as MovieClip;
			addChild(_sheep);
			_sheep.gotoAndStop(1);
			_sheep.x = 380;
			_sheep.y = 350;
			_sheep.addEventListener(MouseEvent.CLICK, sheepClickHandler);
			_mClass = null;
			_randomTimer = new Timer(int(Math.random() * 2000 + 2000));
			_randomTimer.addEventListener(TimerEvent.TIMER, changeSheepState);
			_randomTimer.start();
		}
		
		private function sheepClickHandler(event:MouseEvent):void {
			
			
			runSheep();
			
			if (_sheepSoundFlag && _soundFlag) {
				_sheepSoundFlag = false;
				SoundLayer.getInstance().playSound(SoundName.SOUND_SHEEP);
				_sheepSoundTimer = new Timer(5000, 1);
				_sheepSoundTimer.addEventListener(TimerEvent.TIMER_COMPLETE, sheepTimerComplete);
				_sheepSoundTimer.start();
			}
		}
		
		private var _sheepSoundFlag:Boolean = true;
		private var _soundFlag:Boolean = true;
		public function set soundFlag(value:Boolean):void {
			_soundFlag = value;
		}
		
		
		private var _sheepSoundTimer:Timer;
		public function rendering():void {
			
			if (_sheep) {
				
				if (_sheep.currentFrame != _randomNum) {
					_sheep.gotoAndStop(_randomNum);
					_randomNum = _sheep.currentFrame;
				}
				_sheep.x += _sheepX;
				_sheep.y += _sheepY;
				
				//if (Point.distance(new Point(mouseX, mouseY), new Point(_sheep.x, _sheep.y)) < 20) {
					//
					//if (_runFlag) {
						//_runFlag = false;
						//runSheep();
					//}
					//if (_sheepSoundFlag && _soundFlag) {
						//_sheepSoundFlag = false;
						//SoundLayer.getInstance().playSound(SoundName.SOUND_SHEEP);
						//_sheepSoundTimer = new Timer(5000, 1);
						//_sheepSoundTimer.addEventListener(TimerEvent.TIMER_COMPLETE, sheepTimerComplete);
						//_sheepSoundTimer.start();
					//}
				//}else {
					//_runFlag = true;
				//}
				
				if (int(_sheep.y) >= 0 && int(_sheep.y) < _runArr.length && int(_sheep.x) >= 0 && int(_sheep.x) < _runArr[0].length) {
					
					if (!(_runArr[int(_sheep.y)][int(_sheep.x)] as Boolean)) {
						
						var _num:int = Math.random() * 6;
						
						if (_num == 0) {
							_sheepX *= -1;
						}
						else if (_num == 1) {
							_sheepY *= -1;
						}
						else if (_num == 3){
							_sheepX *= -1;
							_sheepY *= -1;
						}
						else if (_num == 4) {
							_sheepX *= -1;
							_sheepY = 0;
						}
						else if (_num == 5) {
							_sheepY *= -1;
							_sheepX = 0;
						}
						
						if (_sheepX > 0) {
							_sheep.scaleX = -1;
						}
						else if (_sheepX < 0) {
							_sheep.scaleX = 1;
						}
						
						if (_sheepX == 0 && _sheepY == 0) {
							
							if (_sheep.currentFrame != 1 && _sheep.currentFrame != 2) {
								_randomNum = Math.random() * 2 + 1;
								_sheep.gotoAndStop(_randomNum);
							}
							
						}
					}
				}else {
					_sheepX *= -1;
					_sheepY *= -1;
					if (_sheepX > 0) {
						_sheep.scaleX = -1;
					}
					else if (_sheepX < 0) {
						_sheep.scaleX = 1;
					}
				}
				
				
			}
		}
		
		private function sheepTimerComplete(event:TimerEvent):void {
			
			_sheepSoundTimer.reset();
			_sheepSoundTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, sheepTimerComplete);
			_sheepSoundTimer = null;
			_sheepSoundFlag = true;
		}
		
		private function runSheep():void {
			
			var _runTime:int = Math.random() * 5000 + 5000;
			_randomTimer.delay = _runTime;
			_randomNum = 4;
			_sheep.gotoAndStop(_randomNum);
			_sheepX = getSpeed(1);
			_sheepY = getSpeed(1);
		}
		
		private var _randomTimer:Timer;
		private var _runFlag:Boolean = true;
		private var _randomNum:int = 1;
		private function changeSheepState(event:TimerEvent = null):void {
			
			_randomNum = Math.random() * 4 + 1;
			
			switch(_randomNum) {
				
				case 1:
					var _standTime:int = Math.random() * 5000 + 5000;
					_randomTimer.delay = _standTime;
					_sheep.gotoAndStop(1);
					_sheepX = _sheepY = 0;
					break;
					
				case 2:
					var _eatTime:int = Math.random() * 5000 + 5000;
					_randomTimer.delay = _eatTime;
					_sheep.gotoAndStop(2);
					_sheepX = _sheepY = 0;
					break;
					
				case 3:
					var _walkTime:int = Math.random() * 5000 + 10000;
					_randomTimer.delay = _walkTime;
					_sheep.gotoAndStop(3);
					_sheepX = getSpeed(0);
					_sheepY = getSpeed(0);
					if (_sheepX > 0) {
						_sheep.scaleX = -1;
					}
					else if (_sheepX < 0) {
						_sheep.scaleX = 1;
					}
					break;
					
				case 4:
					runSheep();
					if (_sheepX > 0) {
						_sheep.scaleX = -1;
					}
					else if (_sheepX < 0) {
						_sheep.scaleX = 1;
					}
					break;
			}
		}
		
		private function getSpeed(value:int):Number {
			
			var _num:int = Math.random() * 2;
			if (_num == 1) {
				return Math.random() + value;
			}
			else {
				return - (Math.random() + value);
			}
		}
		
		public function clear():void {
			
			if (_randomTimer) {
				_randomTimer.reset();
				_randomTimer.removeEventListener(TimerEvent.TIMER, changeSheepState);
				_randomTimer = null;
			}
			
			if (_sheep) {
				if(_sheep.hasEventListener(MouseEvent.CLICK))_sheep.removeEventListener(MouseEvent.CLICK, sheepClickHandler);
				removeChild(_sheep);
				_sheep = null;
			}
		}
		
		public function get runArr():Array
		{
			return _runArr;
		}

		public function set runArr(value:Array):void
		{
			_runArr = value;
		}

	}//end Sheep

}