// // // // // /////////////////////////////////////////////////
// TaskLayer.as
// Macromedia ActionScript Implementation of the Class TaskLayer
// Generated by Enterprise Architect
// Created on:      19-十二月-2011 16:10:25
// Original author: LuXianli
// // // // // /////////////////////////////////////////////////
package com.raytoon.cannonfodder.puremvc.view.ui.taskLayer {
	import com.greensock.*;
	import com.greensock.easing.*;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	import com.raytoon.cannonfodder.tools.utils.GlobalVariable;
	import com.raytoon.cannonfodder.tools.utils.UIClass;
	import com.raytoon.cannonfodder.tools.utils.UICommand;
	import com.raytoon.cannonfodder.tools.utils.UICreate;
	import com.raytoon.cannonfodder.tools.utils.UIDataFunList;
	import com.raytoon.cannonfodder.tools.utils.UIName;
	import com.raytoon.cannonfodder.tools.utils.UIState;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	import flash.events.TimerEvent;
	import flash.utils.Timer;

	import flash.display.DisplayObject;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.external.ExternalInterface;
	import flash.filters.ColorMatrixFilter;
	import flash.text.TextField;
	import flash.text.TextFormatAlign;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 19-十二月-2011 16:10:25
	 */
	public class TaskLayer extends Sprite {
		public static const NAME : String = "TaskLayer";
		private var _stateFirst:String;
		
		public function set stateFirst(value:String):void {
			
			_stateFirst = value;
		}
		
		public function get stateFirst():String {
			
			return _stateFirst;
		}
		public function TaskLayer() {
			UIMain.setInstance(NAME, this);
		}

		private var _taskContent : String = "taskContent";
		private var _feedTaskContainer : String = "feedTaskContainer";
		private var _main : String = "main";
		private var _daily : String = "daily";
		private var _feed : String = "feed";
		private var _submit : String = "submit";
		private var _colse : String = "close";
		private var _task : String = "task";
		private var _experience : String = "experience";
		private var _cap : String = "cap";
		public var _taskPanel : Object;
		private var _dataArr : Array = [];
		private var _taskArr : Array = [];
		private var _taskType : String = "main";
		private var _ax : int = 448;
		private var _bx : int = 500;
		private var _cx : int = 556;
		private var _taskMovieCompleteName:String = "TaskMovieComplete";
		/**
		 * 加载完毕后显示任务空面板
		 */
		public function viewTaskPanle() : void {
			var _mClass : Class = UICommand.getClass(UIClass.TASK);
			_taskPanel = new _mClass() as Object;
			_mClass = null;
			addChild(_taskPanel as DisplayObject);

			_taskPanel[_main].typeName = _main;
			_taskPanel[_daily].typeName = _daily;
			_taskPanel[_feed].typeName = _feed;
			_taskPanel[_submit].typeName = _submit;
			_taskPanel[_colse].typeName = _colse;

			// _taskPanel.addChild(_taskPanel[_taskContent] as DisplayObject);
			// _taskPanel.addChild(_taskPanel[_feedTaskContainer] as DisplayObject);

			_taskPanel[_taskContent].visible = false;
			_taskPanel[_feedTaskContainer].visible = false;
			_taskPanel[_submit].visible = false;
			_taskPanel[_main].addEventListener(MouseEvent.CLICK, taskMouseEvent);
			_taskPanel[_daily].addEventListener(MouseEvent.CLICK, taskMouseEvent);
			_taskPanel[_feed].addEventListener(MouseEvent.CLICK, taskMouseEvent);
			// _taskPanel[_submit].addEventListener(MouseEvent.CLICK, taskMouseEvent);
			_taskPanel[_colse].addEventListener(MouseEvent.CLICK, taskMouseEvent);

			_taskPanel[_taskContent]["title"].text = "任务描述";
			_taskPanel[_taskContent]["langTitleA"].text = "任务目标";
			_taskPanel[_taskContent]["langTitleB"].text = "任务奖励";
			_taskPanel[_taskContent].removeChild(_taskPanel[_taskContent]["list"]);
			_taskPanel[_taskContent].removeChild(_taskPanel[_taskContent]["listNum"]);
		}
		private var _taskReceiveFlag:Boolean = false;
		public function get taskReceiveFlag():Boolean {
			
			return _taskReceiveFlag;
		}
		/**
		 * 显示任务面板
		 * @param	obj
		 */
		public function showTask(dataArr : Array = null) : void {
			if (!_taskPanel) viewTaskPanle();
//			return;
			_dataArr[0] = UICommand.t.userData[3][0];
			_dataArr[1] = UICommand.t.userData[3][1];
			_dataArr[2] = UICommand.t.userData[3][4];
			_taskInfoFlag = true;
			
			if (!_taskReceiveFlag) {
				
				
				if (_dataArr[1]) {
					
					for each (var objM:Object in _dataArr[1]) {
						
						if (!objM[1]) {
							showMainTask();
							showTaskCompleteMovie();
							return;
						}
					}
					
				}
				
				var _xmlList:XMLList = XMLSource.getXMLSource("MainTaskInfo.xml").childTask;
				if (_dataArr[0]) {
					
					for each (var objD:Object in _dataArr[0]) {
						
						if (!objD[1]) continue;
						if (objD[1] as int >= int(_xmlList.(@id == objD[0]).sum)) {
							showDailyTask();
							showTaskCompleteMovie();
							return;
						}
					}
				}
				
				if (_dataArr[2]) {
					
					for each (var objF:Object in _dataArr[2]) {
						
						if (!objF[1]) continue;
						if (objF[1] as int >= int(_xmlList.(@id == objF[0]).sum)) {
							showFeedTask();
							showTaskCompleteMovie();
							return;
						}
					}
				}
				
				
				showMainTask();
			}
			else {
				
				_taskReceiveFlag = false;
				
				switch(_taskType) {
					
					case _main:
						removeTask();
						var arr:Array = (_dataArr[1] as Array).concat();
						var newArr:Array = arr.pop();
						addMainTask(arr);
						_taskPanel[_submit].visible = false;
						addNewMainTask(newArr);
						break;
						
					case _daily:
						showDailyTask();
						break;
						
					case _feed:
						showFeedTask();
						break;
				}
			}
		}
		
		private var _taskCompleteMovie:MovieClip;
		private function showTaskCompleteMovie():void {
			
			if (!_taskCompleteMovie) {
				
				var _mClass:Class = UICommand.getClass(_taskMovieCompleteName);
				_taskCompleteMovie = new _mClass() as MovieClip;
				_taskCompleteMovie.addEventListener("taskMovieComplete", removeTaskCompleteMovie);
				addChild(_taskCompleteMovie);
				_taskCompleteMovie.x = GlobalVariable.STAGE_WIDTH / 2;
				_taskCompleteMovie.y = GlobalVariable.STAGE_HEIGHT / 2;
			}
		}
		
		private function removeTaskCompleteMovie(event:Event):void {
			
			if (_taskCompleteMovie) {
				
				removeChild(_taskCompleteMovie);
				_taskCompleteMovie = null;
			}
		}

		private var _taskButtonName : String;
		private var _taskID : int = 0;
		private var _taskInfoFlag : Boolean = true;

		/**
		 * 鼠标点击事件处理
		 * @param	event
		 */
		private function taskMouseEvent(event : MouseEvent) : void {
			//removeTaskTimer();
			_taskButtonName = event.currentTarget.typeName;
			_taskInfoFlag = true;
			switch(_taskButtonName) {
				case _main:
					_taskType = _main;
					showMainTask();
					_taskPanel[_main]["comp"]["enabled"] = false;
					_taskPanel[_daily]["comp"]["enabled"] = true;
					_taskPanel[_feed]["comp"]["enabled"] = true;
					
					break;
				case _daily:
					_taskType = _daily;
					showDailyTask();
					_taskPanel[_main]["comp"]["enabled"] = true;
					_taskPanel[_daily]["comp"]["enabled"] = false;
					_taskPanel[_feed]["comp"]["enabled"] = true;
					break;
				case _feed:
					_taskType = _feed;
					feedBtnClick();
					break;
				case _task:
					optionTask(event);
					break;
				case _submit:
					break;
				case _colse:
					_taskInfoFlag = true;
					break;
			}
		}
		
		

		/**
		 * feed 分享 任务按钮被点击
		 */
		private function feedBtnClick() : void {
			clear();
			_taskPanel[_main]["comp"]["enabled"] = true;
			_taskPanel[_daily]["comp"]["enabled"] = true;
			_taskPanel[_feed]["comp"]["enabled"] = false;
			_taskPanel[_taskContent].visible = false;
			_taskPanel[_feedTaskContainer].visible = true;
			_taskPanel[_feedTaskContainer]["txt"].text = String(XMLSource.getXMLSource("UISite.xml").task.info5);
			_taskPanel[_submit].visible = true;
			_taskPanel[_submit]["txt"].text = String(XMLSource.getXMLSource("UISite.xml").task.info6);
			if (_dataArr[2]) {
				
				var _tempArr:Array = _dataArr[2] as Array;
				var _tempFlag:Boolean = false;
				
				for each(var obj:Object in _tempArr) {
					
					if (obj[1]) {
						if (int(obj[1]) == -1)_tempFlag = true;
					}
				}
				
				if (_tempFlag) {
					
					_taskPanel[_taskContent].visible = false;
					_taskPanel[_feedTaskContainer].visible = true;
				}else {
					
					showFeedTask();
				}
				
			}
		}

		/**
		 * 领取按钮
		 */
		public function taskSubmit() : void {
			if (_taskType == _main) {
				if (_feedFlag && _taskPanel[_taskContent]["feedReward"]["checkBox"]["check"].visible && getMainChildArr(_taskID)[2] == null) {
					if (ExternalInterface.available) {
						UICommand.t.apiData = [UIName.JS_FEED, 100];
						ExternalInterface.call(UIName.JS_FEED, UICommand.getAPI().replace(UIName.API_TASK_NAME, String(XMLSource.getXMLSource("MainTaskInfo.xml").task.(@id == _taskID).taskName)), UICommand.getAPIRedirect());
					}
				} else {
					receiveRewards(false);
				}
			} else if (_taskType == _daily) {
				receiveRewards(false);
			} else if (_taskType == _feed) {
				if (_taskPanel[_submit]["txt"].text == String(XMLSource.getXMLSource("UISite.xml").task.info6)) {
					if (ExternalInterface.available) {
						
						var _tempArr:Array = _dataArr[2] as Array;
						var _tempObj:Object;
						for each(var obj:Object in _tempArr) {
							
							if (obj[1]) {
								if (int(obj[1]) == -1) {
									_tempObj = obj;
									break;
								}
							}
						}
						if (_tempObj) {
							
							UICommand.t.apiData = [UIName.JS_FEED, 101];
							ExternalInterface.call(UIName.JS_FEED, UICommand.getAPI().replace(UIName.API_TASK_NAME, String(XMLSource.getXMLSource("MainTaskInfo.xml").childTask.(@id == int(_tempObj[0])).taskName)), UICommand.getAPIRedirect());
						}
					}
				} else {
					receiveRewards(false);
				}
			}
		}

		/**
		 * 领取奖励
		 */
		public function receiveRewards(feedFlag : Boolean = true) : void {
			_taskReceiveFlag = true;
			if (_taskType == _main) {
				_feedFlag = feedFlag;
				if (getMainChildArr(_taskID)[2] == null) _taskInfoFlag = false;
				showTipBox(getMainChildArr(_taskID)[2], XMLSource.getXMLSource("MainTaskInfo.xml").task.(@id == _taskID), _taskID);
			} else if (_taskType == _daily) {
				_feedFlag = false;
				var _tArr : Array;
				for each (var arr:Array in _dataArr[0]) {
					if (arr[0] == _taskID) _tArr = arr;
				}

				if (_tArr) showTipBox(_tArr[2], XMLSource.getXMLSource("MainTaskInfo.xml").childTask.(@id == _taskID), _taskID);
			} else if (_taskType == _feed) {
				
				if (_taskPanel[_submit]["txt"].text == String(XMLSource.getXMLSource("UISite.xml").task.info6)) {
					if (ExternalInterface.available) {
						
						var _tempArr:Array = _dataArr[2] as Array;
						var _tempObj:Object;
						for each(var obj:Object in _tempArr) {
							
							if (obj[1]) {
								if (int(obj[1]) == -1) {
									_tempObj = obj;
									break;
								}
							}
						}
						if (_tempObj) {
							
							UICommand.t.apiData = [UIName.JS_FEED, 101];
							ExternalInterface.call(UIName.JS_FEED, UICommand.getAPI().replace(UIName.API_TASK_NAME, String(XMLSource.getXMLSource("MainTaskInfo.xml").childTask.(@id == int(_tempObj[0])).taskName)), UICommand.getAPIRedirect());
						}
					}
				} else {
					
					_feedFlag = false;
					var _fArr : Array;
					for each (var farr:Array in _dataArr[2]) {
						if (farr[0] == _taskID) _fArr = farr;
					}

					if (_fArr) showTipBox(_fArr[2], XMLSource.getXMLSource("MainTaskInfo.xml").childTask.(@id == _taskID), _taskID);
				}
				
			}
		}
		/**
		 * 
		 * @param	event
		 */
		private function optionTask(event:Object):void {
			var i : int = 0;
			if (event.currentTarget.dataState == 1) {
				_taskPanel[_submit].visible = true;
				_taskPanel[_submit]["txt"].text = String(XMLSource.getXMLSource("UISite.xml").phrase.lottery);
			} else {
				_taskPanel[_submit].visible = false;
			}
			if (event.currentTarget.dataState == 2) {
				_taskPanel[_taskContent]["complete"].visible = true;
			} else {
				_taskPanel[_taskContent]["complete"].visible = false;
			}
			event.currentTarget.comp.enabled = false;
			for each (var obj:* in _taskArr) {
				if (obj == event.currentTarget) continue;
				obj.comp.enabled = true;
			}
			_taskID = event.currentTarget.dataID;
			var _mainTaskXml : XML = XMLSource.getXMLSource("MainTaskInfo.xml");
			if (_taskType == _main) {
				var _info : String = "";
				var _infoNum : String = "";
				var _childArr : Array;

				if (event.currentTarget.dataState == 2) {
					_childArr = String(_mainTaskXml.task.(@id == event.currentTarget.dataID).childTask).split(",");

					for (i = 0; i < _childArr.length; i++ ) {
						if (!String(_mainTaskXml.childTask.(@id == _childArr[i]).info)) continue;
						_info += (String(_mainTaskXml.childTask.(@id == _childArr[i]).info) + UIName.CHAR_RETURN_WRAP);
						_infoNum += (String(_mainTaskXml.childTask.(@id == _childArr[i]).sum) + "/" + String(_mainTaskXml.childTask.(@id == _childArr[i]).sum) + UIName.CHAR_RETURN_WRAP);
					}
				} else {
					
					
					_childArr = getMainChildArr(event.currentTarget.dataID)[1];

					if (_childArr) {
						for (var j : int = 0; j < _childArr.length; j++ ) {
							if (!String(_mainTaskXml.childTask.(@id == _childArr[j][0]).info)) continue;
							_info += (String(_mainTaskXml.childTask.(@id == _childArr[j][0]).info) + UIName.CHAR_RETURN_WRAP);
							_infoNum += (String(_childArr[j][1]) + "/" + String(_mainTaskXml.childTask.(@id == _childArr[j][0]).sum) + UIName.CHAR_RETURN_WRAP);
						}
					}else {
						
						_childArr = String(_mainTaskXml.task.(@id == event.currentTarget.dataID).childTask).split(",");

						for ( i  = 0; i < _childArr.length; i++ ) {
							if (!String(_mainTaskXml.childTask.(@id == _childArr[i]).info)) continue;
							_info += (String(_mainTaskXml.childTask.(@id == _childArr[i]).info) + UIName.CHAR_RETURN_WRAP);
							_infoNum += (String(_mainTaskXml.childTask.(@id == _childArr[i]).sum) + "/" + String(_mainTaskXml.childTask.(@id == _childArr[i]).sum) + UIName.CHAR_RETURN_WRAP);
						}
					}
				}

				showTaskInfo(_mainTaskXml.task.(@id == event.currentTarget.dataID), _info, _infoNum, int(event.currentTarget.dataState));
			} else if (_taskType == _daily) {
				_info = String(_mainTaskXml.childTask.(@id == event.currentTarget.dataID).info);
				_infoNum = String(event.currentTarget.dataSum) + "/" + String(_mainTaskXml.childTask.(@id == event.currentTarget.dataID).sum);

				showTaskInfo(_mainTaskXml.childTask.(@id == event.currentTarget.dataID), _info, _infoNum);
			} else if (_taskType == _feed) {
				_info = String(_mainTaskXml.childTask.(@id == event.currentTarget.dataID).info);
				_infoNum = String(event.currentTarget.dataSum) + "/" + String(_mainTaskXml.childTask.(@id == event.currentTarget.dataID).sum);

				showTaskInfo(_mainTaskXml.childTask.(@id == event.currentTarget.dataID), _info, _infoNum);
			}
		}
		
		private function getMainChildArr(id:int):Array {
			
			for each (var arr:Array in _dataArr[1]) {
				
				if (arr[0] == id) return arr;
			}
			
			return null;
		}
		
		/**
		 * 点击领取后 弹出获得奖励提示框
		 * @param	itemsIDArr       背包已满无法在放入的物品
		 * @param	taskXmlList      当前点击的任务的信息
		 * @param	taskID           当前任务ＩＤ
		 */
		private function showTipBox(itemsIDArr : Array, taskXmlList : XMLList = null, taskID : int = 0) : void {
			var _popInfo : String = "";
			var _taskFlag : uint = 1;
			if (_taskType == _main) {
				_taskFlag = 2;
			} else if (_taskType == _daily) {
				_taskFlag = 1;
			} else {
				_taskFlag = 4;
			}
			if (itemsIDArr == null) {
				UICommand.t.capNum += int(taskXmlList.cap);
				UICommand.changeExperience(int(taskXmlList.experience));

				if (_taskType == _main) {
					UICommand.uiDataTransfer([{m:UIDataFunList.SAVE_TASK_END, a:[UICommand.t.userData[0], [taskID, _taskFlag, _feedFlag]]}], EventNameList.UI_SAVE_DATA);
				} else {
					UICommand.uiDataTransfer([{m:UIDataFunList.SAVE_TASK_END, a:[UICommand.t.userData[0], [taskID, _taskFlag, null]]}], EventNameList.UI_SAVE_DATA);
				}
				
				_popInfo += String(taskXmlList.cap);
				_popInfo += "瓶盖、";
				_popInfo += String(taskXmlList.experience);
				_popInfo += "经验、";

				var _gID : int = 0;
				_gID = int(taskXmlList.rewardpropID);
				if (_gID > 0) {
					_popInfo += String(taskXmlList.rewardpropSum);
					_popInfo += "个";
					_popInfo += String(XMLSource.getXMLSource("Props.xml").prop.(@id == _gID).langName);
					_popInfo += "、";
					_gID = 0;
				}

				_gID = int(taskXmlList.rewardequipID);
				if (_gID > 0) {
					_popInfo += String(taskXmlList.rewardequipSum);
					_popInfo += "个";
					_popInfo += String(XMLSource.getXMLSource("Equipment.xml").equipCategory.equip.(@id == _gID).langName);
					_popInfo += "、";
					_gID = 0;
				}

				_gID = int(taskXmlList.rewardmaterialID);
				if (_gID > 0) {
					_popInfo += String(taskXmlList.rewardmaterialSum);
					_popInfo += "个";
					_popInfo += String(XMLSource.getXMLSource("Materials.xml").material.(@id == _gID).langName);
					_gID = 0;
				}

				_popInfo += String(XMLSource.getXMLSource("UISite.xml").task.info2);

				if (_feedFlag) {
					_popInfo += "；"
					//_popInfo += String(XMLSource.getXMLSource("UISite.xml").task.info3);
					UICommand.t.capNum += int(taskXmlList.feed.cap);
					UICommand.changeExperience(int(taskXmlList.feed.experience));
					_popInfo += String(taskXmlList.feed.cap);
					_popInfo += "瓶盖、";
					_popInfo += String(taskXmlList.feed.experience);
					_popInfo += "经验、";

					_gID = int(taskXmlList.feed.propID);
					if (_gID > 0) {
						_popInfo += String(taskXmlList.feed.propSum);
						_popInfo += "个";
						_popInfo += String(XMLSource.getXMLSource("Props.xml").prop.(@id == _gID).langName);
						_popInfo += "、";
						_gID = 0;
					}

					_gID = int(taskXmlList.feed.equipID);
					if (_gID > 0) {
						_popInfo += String(taskXmlList.feed.equipSum);
						_popInfo += "个";
						_popInfo += String(XMLSource.getXMLSource("Equipment.xml").equipCategory.equip.(@id == _gID).langName);
						_popInfo += "、";
						_gID = 0;
					}

					_gID = int(taskXmlList.feed.materialID);
					if (_gID > 0) {
						_popInfo += String(taskXmlList.feed.materialSum);
						_popInfo += "个";
						_popInfo += String(XMLSource.getXMLSource("Materials.xml").material.(@id == _gID).langName);
						_gID = 0;
					}

					_popInfo += String(XMLSource.getXMLSource("UISite.xml").task.info2);
					
				}
			} else {
				for each (var itemsID:int in itemsIDArr) {
					var itemsType : int = int(String(itemsID).substr(0, 2));
					if (itemsType == 12 || itemsType == 13 || itemsType == 14 || itemsType == 15) {
						_popInfo += String(XMLSource.getXMLSource("Equipment.xml").equipCategory.equip.(@id == itemsID).langName);
						_popInfo += "、";
					} else if (itemsType == 16) {
						_popInfo += String(XMLSource.getXMLSource("Props.xml").prop.(@id == itemsID).langName);
						_popInfo += "、";
					} else {
						_popInfo += String(XMLSource.getXMLSource("Materials.xml").material.(@id == itemsID).langName);
					}
				}
				_popInfo += String(XMLSource.getXMLSource("UISite.xml").task.info1);
			}

			_popInfo += "。";
			_feedFlag = false;
			UICreate.popupPrompt(_popInfo,UIState.TASK);
			//UICommand.uiDataTransfer([{m:UIDataFunList.GET_TASK, a:[UICommand.t.userData[0]]}]);
		}

		/**
		 * 选定任务状态
		 * @param	id
		 */
		private function taskCompEnable(id : int) : void {
			for each (var obj:Object in _taskArr) {
				if (obj.dataID == id) {
					obj.comp.enabled = false;
					return;
				}
			}
		}

		private var _completeX : Number = 0;
		private var _completeY : Number = 0;

		/**
		 * 显示完成图标动画
		 */
		private function showCompleteMotion() : void {
			_taskPanel[_taskContent]["complete"].visible = true;

			_completeX = _taskPanel[_taskContent]["complete"].x;
			_completeY = _taskPanel[_taskContent]["complete"].y;

			_taskPanel[_taskContent]["complete"].scaleX = 5;
			_taskPanel[_taskContent]["complete"].scaleY = 5;
			_taskPanel[_taskContent]["complete"].x = -210;
			_taskPanel[_taskContent]["complete"].y = 50;

			TweenLite.to(_taskPanel[_taskContent]["complete"], 0.5, {x:_completeX, y:_completeY, scaleX:1, scaleY:1, ease:Back.easeIn});
		}

		/**
		 * 显示日常任务
		 */
		private function showDailyTask() : void {
			_taskPanel[_main]["comp"]["enabled"] = true;
			_taskPanel[_daily]["comp"]["enabled"] = false;
			_taskPanel[_feed]["comp"]["enabled"] = true;
			_taskPanel[_submit].visible = false;
			_taskPanel[_submit]["txt"].text = String(XMLSource.getXMLSource("UISite.xml").phrase.lottery);
			_taskType = _daily;
			removeTask();
			if (!_taskPanel || _dataArr.length <= 0 || _dataArr[0] == null) return;
			_taskPanel[_taskContent].visible = true;
			_taskPanel[_feedTaskContainer].visible = false;
			
			var _dailyArr : Array = sortArrState(_dataArr[0] as Array);
			var _numY : int = 0;
			var _childTaskXmlList : XMLList = XMLSource.getXMLSource("MainTaskInfo.xml").childTask;
			for each (var _childArr:Array in _dailyArr) {
				_taskID = _childArr[0] as int;
				var _taskState : int = 0;
				var _taskSum : int = int(_childTaskXmlList.(@id == _taskID).sum);
				if (_childArr[1] == null) {
					_taskState = 2;
				} else if (_childArr[1] >= _taskSum) {
					_taskState = 1;
				}

				var _mClass : Class = UICommand.getClass("com.paohui.ui.task.Nav");
				var obj : Object = new _mClass();
				_taskPanel["position"].addChild(obj as DisplayObject);
				obj.y = _numY;
				_numY += obj.height + 5;
				obj.dataSum = _childArr[1] != null ? _childArr[1] : _taskSum;
				obj.dataID = _taskID;
				obj.dataState = _taskState;
				obj.addEventListener(MouseEvent.CLICK, taskMouseEvent);
				obj.typeName = _task;
				if (_taskState == 0) {
					obj["taskComplete"].visible = false;
					obj["check"].visible = false;
					obj["exclamationA"].visible = false;
				} else if (_taskState == 1) {
					obj["taskComplete"].visible = false;
					obj["check"].visible = false;
					obj["exclamation"].visible = false;
					_taskPanel[_submit].visible = true;
				} else {
					obj["taskComplete"].visible = true;
					obj["check"].visible = true;
					obj["exclamation"].visible = false;
					obj["exclamationA"].visible = false;
				}
				obj["txt"].text = String(_childTaskXmlList.(@id == _taskID).taskName);
				_taskArr.push(obj);
				_mClass = null;
				obj = null;
			}
			
			for each(var taskObj:Object in _taskArr) {
				
				if (taskObj.dataState == 1) {
					
					taskObj.comp.enabled = false;

					showTaskInfo(_childTaskXmlList.(@id == taskObj.dataID), String(_childTaskXmlList.(@id == taskObj.dataID).info), String(taskObj.dataSum) + "/" + String(_childTaskXmlList.(@id == taskObj.dataID).sum));

					_taskID = int(taskObj.dataID);
					
					_taskPanel[_submit].visible = true;
					
					_taskPanel[_taskContent]["complete"].visible = false;
					
					return;
				}
			}
			
			_taskArr[0].comp.enabled = false;

			showTaskInfo(_childTaskXmlList.(@id == _taskArr[0].dataID), String(_childTaskXmlList.(@id == _taskArr[0].dataID).info), String(_taskArr[0].dataSum) + "/" + String(_childTaskXmlList.(@id == _taskArr[0].dataID).sum));

			_taskID = int(_taskArr[0].dataID);
			if (_taskArr[0].dataState != 1) {
				_taskPanel[_submit].visible = false;
			}
			if (_taskArr[0].dataState == 2) {
				_taskPanel[_taskContent]["complete"].visible = true;
			} else {
				_taskPanel[_taskContent]["complete"].visible = false;
			}
		}
		
		private function sortArrState(arr:Array):Array {
			
			var m:int = arr.length;
			if (m < 2) return arr;
			
			var tempArr:Array = [];
			
			for (var n:int = 0; n < m; n ++ ) {
				
				tempArr[n] = arr[n];
			}
			
			for (var i:int = 0; i < m; i ++ ) {
				
				for (var j:int = i; j < m; j ++ ) {
					
					var obj:Object = tempArr[i];
					if (tempArr[i][1] == null && tempArr[j][1] != null) {
						tempArr[i] = tempArr[j];
						tempArr[j] = obj;
					}
					obj = null;
				}
				
			}
			return tempArr;
		}
		private var _numY : int = 0;
		/**
		 * 显示主线任务
		 */
		private function showMainTask() : void {
			_taskPanel[_main]["comp"]["enabled"] = false;
			_taskPanel[_daily]["comp"]["enabled"] = true;
			_taskPanel[_feed]["comp"]["enabled"] = true;
			_taskPanel[_submit].visible = false;
			_taskPanel[_submit]["txt"].text = String(XMLSource.getXMLSource("UISite.xml").phrase.lottery);
			_taskPanel[_feedTaskContainer].visible = false;
			_taskPanel[_taskContent].visible = false;
			_taskType = _main;
			removeTask();
			if (!_taskPanel || _dataArr.length <= 0 || _dataArr[1] == null) return;
			_taskPanel[_taskContent].visible = true;
			_taskPanel[_feedTaskContainer].visible = false;
			
			if (addMainTask(_dataArr[1]) && _taskArr[0]) {
				
				optionTask( { currentTarget:_taskArr[0] } );
			}
		}
		/**
		 * 添加 主线 已完成任务
		 * @param	arr
		 * @param	taskID
		 * @param	state
		 */
		private function addMainTask(arr:Array = null):Boolean {
			
			var _mainTaskXml : XML = XMLSource.getXMLSource("MainTaskInfo.xml");
			var flag:Boolean = true;
			for each (var _mainArr:Array in arr) {
				var _runTaskID : int = _mainArr[0] as int;
				
				var _mClass : Class = UICommand.getClass("com.paohui.ui.task.Nav");
				var obj : Object = new _mClass();
				_taskPanel["position"].addChild(obj as DisplayObject);
				obj.y = _numY;
				_numY += obj.height + 5;
				obj.dataID = _runTaskID;
				obj["txt"].text = String(_mainTaskXml.task.(@id == _runTaskID).taskName);
				var _childArr : Array;
				var _info : String = "";
				var _infoNum : String = "";
				if (_mainArr[1] != null) {
					_childArr = _mainArr[1];
					
					for (var i : int = 0; i < _childArr.length; i++ ) {
						if (_childArr[i][0] == 8149 || _childArr[i][0] == 8150) continue;
						if (!String(_mainTaskXml.childTask.(@id == _childArr[i][0]).info)) continue;
						_info += (String(_mainTaskXml.childTask.(@id == _childArr[i][0]).info) + UIName.CHAR_RETURN_WRAP);
						_infoNum += (String(_childArr[i][1]) + "/" + String(_mainTaskXml.childTask.(@id == _childArr[i][0]).sum) + UIName.CHAR_RETURN_WRAP);
						
					}
					
					obj["taskComplete"].visible = false;
					obj["check"].visible = false;
					obj["exclamationA"].visible = false;
					obj.dataState = 0;
					
				} else {
					_childArr = String(_mainTaskXml.task.(@id == _taskID).childTask).split(",");
					for (var a : int = 0; a < _childArr.length; a++ ) {
						_info += (String(_mainTaskXml.childTask.(@id == _childArr[a]).info) + UIName.CHAR_RETURN_WRAP);
						_infoNum += (String(_mainTaskXml.childTask.(@id == _childArr[a]).sum) + "/" + String(_mainTaskXml.childTask.(@id == _childArr[a]).sum) + UIName.CHAR_RETURN_WRAP);
					}
					obj["taskComplete"].visible = false;
					obj.dataState = 1;
					obj["check"].visible = false;
					obj["exclamation"].visible = false;
					_taskPanel[_submit].visible = true;
				}
				obj.typeName = _task;
				obj.addEventListener(MouseEvent.CLICK, taskMouseEvent);
				_taskArr.push(obj);
				
				if (obj.dataState == 1) {
					flag = false;
					optionTask( { currentTarget:obj } );
				}
				obj = null;
				_mClass = null;
				
			}
			return flag;
		}
		/**
		 * 添加新主线任务动画
		 * @param	taskID
		 */
		private function addNewMainTask(arr:Array):void {
			
			for each (var oldObj:Object in _taskArr) {
				
				TweenLite.to(oldObj, 0.5, {y:(oldObj.y + oldObj.height + 5), ease:Cubic.easeOut});
			}
			
			_taskType = _main;
			_taskID = arr[0];
			var _mClass:Class = UICommand.getClass("com.paohui.ui.task.Nav");
			var obj:Object = new _mClass();
			_taskPanel["position"].addChild(obj as DisplayObject);
			obj.y = -obj.height;
			obj.dataID = arr[0];
			obj.dataState = 0;
			obj.typeName = _task;
			obj["txt"].text = String(XMLSource.getXMLSource("MainTaskInfo.xml").task.(@id == _taskID).taskName);
			obj["check"].visible = false;
			obj["exclamationA"].visible = false;
			obj["taskComplete"].visible = false;
			obj.addEventListener(MouseEvent.CLICK, taskMouseEvent);
			_taskArr.unshift(obj);
			_mClass = null;
			_taskObj = obj;
			TweenLite.to(obj, 1, { y:0, ease:Cubic.easeOut } );
			TweenLite.delayedCall(1, freshTaskInfo);
			TweenLite.to(_taskPanel[_taskContent], 1, {alpha:0} );
			
			
		}
		/**
		 * 新任务添加后 刷新任务信息
		 */
		private function freshTaskInfo():void {
			
			taskCompEnable(_taskID);
			if (_taskObj) {
				
				optionTask( { currentTarget:_taskObj } );
				_taskObj = null;
			}
			TweenLite.to(_taskPanel[_taskContent], 1, {alpha:1} );
		}
		
		private var _taskTimer:Timer;
		private var _taskObj:Object;
		private function flashingTask():void {
			
			_taskTimer = new Timer(1000);
			_taskTimer.addEventListener(TimerEvent.TIMER, taskTimerHandler);
			_taskTimer.start();
		}
		
		private function taskTimerHandler(event:TimerEvent):void {
			
			if (_taskObj) {
				
				_taskObj.filters == [] ? _taskObj.filters = [new ColorMatrixFilter([1, 0.2, 0.2, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 1, 0])] : _taskObj.filters = [];
			}
		}
		
		private function removeTaskTimer():void {
			
			if (_taskTimer) {
				
				_taskTimer.reset();
				_taskTimer.removeEventListener(TimerEvent.TIMER, taskTimerHandler);
				_taskTimer = null;
			}
			if (_taskObj) {
				_taskObj.filters = null;
				_taskObj = null;
			}
		}

		/**
		 * 显示feed 分享任务
		 */
		public function showFeedTask() : void {
			_taskPanel[_main]["comp"]["enabled"] = true;
			_taskPanel[_daily]["comp"]["enabled"] = true;
			_taskPanel[_feed]["comp"]["enabled"] = false;
			_taskPanel[_submit].visible = false;
			_taskPanel[_feedTaskContainer].visible = false;
			_taskPanel[_taskContent].visible = true;
			_taskType = _feed;
			if (!(!_taskPanel || _dataArr.length <= 0 || _dataArr[2] == null)) {
				removeTask();
				var _feedArr : Array = sortArrState(_dataArr[2] as Array);
				var _numY : int = 0;
				var _childTaskXmlList : XMLList = XMLSource.getXMLSource("MainTaskInfo.xml").childTask;
				for each (var _childArr:Array in _feedArr) {
					_taskID = _childArr[0] as int;
					if (_childArr[1]) {
						if (int(_childArr[1]) == -1) _childArr[1] = 0;
					}
					var _taskState : int = 0;
					var _taskSum : int = int(_childTaskXmlList.(@id == _taskID).sum);
					if (_childArr[1] == null) {
						_taskState = 2;
					} else if (_childArr[1] == _taskSum) {
						_taskState = 1;
					}

					var _mClass : Class = UICommand.getClass("com.paohui.ui.task.Nav");
					var obj : Object = new _mClass();
					_taskPanel["position"].addChild(obj as DisplayObject);
					obj.y = _numY;
					_numY += obj.height + 5;
					obj.dataSum = _childArr[1] != null ? _childArr[1] : _taskSum;
					obj.dataID = _taskID;
					obj.dataState = _taskState;
					obj.addEventListener(MouseEvent.CLICK, taskMouseEvent);
					obj.typeName = _task;
					if (_taskState == 0) {
						obj["taskComplete"].visible = false;
						obj["check"].visible = false;
						obj["exclamationA"].visible = false;
					} else if (_taskState == 1) {
						obj["taskComplete"].visible = false;
						obj["check"].visible = false;
						obj["exclamation"].visible = false;
						_taskPanel[_submit].visible = true;
						_taskPanel[_submit]["txt"].text = String(XMLSource.getXMLSource("UISite.xml").phrase.lottery);
					} else {
						obj["taskComplete"].visible = true;
						obj["check"].visible = true;
						obj["exclamation"].visible = false;
						obj["exclamationA"].visible = false;
					}
					obj["txt"].text = String(_childTaskXmlList.(@id == _taskID).taskName);
					_taskArr.push(obj);
					_mClass = null;
					obj = null;
				}
				
				for each(var taskObj:Object in _taskArr) {
					
					if (taskObj.dataState == 1) {
						
						taskObj.comp.enabled = false;

						showTaskInfo(_childTaskXmlList.(@id == taskObj.dataID), String(_childTaskXmlList.(@id == taskObj.dataID).info), String(taskObj.dataSum) + "/" + String(_childTaskXmlList.(@id == taskObj.dataID).sum));

						_taskID = int(taskObj.dataID);
						
						_taskPanel[_submit].visible = true;
						
						_taskPanel[_taskContent]["complete"].visible = false;
						
						return;
					}
				}

				_taskArr[0].comp.enabled = false;

				showTaskInfo(_childTaskXmlList.(@id == _taskArr[0].dataID), String(_childTaskXmlList.(@id == _taskArr[0].dataID).info), String(_taskArr[0].dataSum) + "/" + String(_childTaskXmlList.(@id == _taskArr[0].dataID).sum));

				_taskID = int(_taskArr[0].dataID);
				if (_taskArr[0].dataState != 1) {
					_taskPanel[_submit].visible = false;
				}
				if (_taskArr[0].dataState == 2) {
					_taskPanel[_taskContent]["complete"].visible = true;
				} else {
					_taskPanel[_taskContent]["complete"].visible = false;
				}
			}
		}

		private var _gAx : int = 30;
		private var _gBx : int = 70;
		private var _gCx : int = 105;
		private var _gDx : int = 145;
		private var _gEx : int = 180;
		private var _gy : int = 305;
		private var _gArr : Array = [];
		private var _gTxtArr : Array = [];
		private var _expAX : int = 35;
		private var _expAY : int = 260;
		private var _capAX : int = 140;
		private var _capAY : int = 260;
		private var _expBX : int = 33;
		private var _expBY : int = 257;
		private var _capBX : int = 34;
		private var _capBY : int = 280;
		private var _gAy : int = 305;
		private var _gBy : int = 305;
		private var _gAAx : int = 22;
		private var _gABx : int = 51;
		private var _gACx : int = 80;
		private var _gBAx : int = 152;
		private var _gBBx : int = 181;
		private var _gBCx : int = 210;
		private var _feedFlag : Boolean = false;

		/**
		 * 显示任务信息
		 * @param	taskXmlList
		 * @param	info
		 */
		private function showTaskInfo(taskXmlList : XMLList, info : String, infoSum : String = null, state : int = 0, feedPanel : Boolean = false) : void {
			_taskPanel[_taskContent]["title"].text = String(taskXmlList.taskName);
			_taskPanel[_taskContent]["info"].text = String(taskXmlList.describe);
			
			showListInfo(info, infoSum);
			_feedFlag = false;
			if (taskXmlList.feed.toString() ) {
				_feedFlag = true;
			}
			_taskPanel[_taskContent]["feedReward"].visible = _feedFlag;
			_taskPanel[_taskContent]["taskbg"].visible = _feedFlag;
			
			if (_taskType != _main) {
				_taskPanel[_taskContent]["taskbg"].visible = false;
				_taskPanel[_taskContent]["feedReward"].visible = false;
			}
			
			_taskPanel[_taskContent]["feedReward"]["langFeed"].visible = true;
			_taskPanel[_taskContent]["feedReward"]["checkBox"].visible = true;
			_taskPanel[_taskContent]["feedReward"].filters = [];
			if (_feedFlag) {
				_taskPanel[_taskContent][_experience].x = _expBX;
				_taskPanel[_taskContent][_experience].y = _expBY;
				_taskPanel[_taskContent][_cap].x = _capBX;
				_taskPanel[_taskContent][_cap].y = _capBY;

				_taskPanel[_taskContent]["feedReward"]["experience"]["num"].text = String(taskXmlList.feed.experience);
				_taskPanel[_taskContent]["feedReward"]["cap"]["num"].text = String(taskXmlList.feed.cap);
				if (state != 2) {
					_taskPanel[_taskContent]["feedReward"]["langFeed"].text = String(XMLSource.getXMLSource("UISite.xml").task.info4);
					if (!_taskPanel[_taskContent]["feedReward"]["checkBox"].hasEventListener(MouseEvent.CLICK)) _taskPanel[_taskContent]["feedReward"]["checkBox"].addEventListener(MouseEvent.CLICK, checkBoxHandler);
					_taskPanel[_taskContent]["feedReward"]["checkBox"]["check"].visible = true;
				} else {
					_taskPanel[_taskContent]["feedReward"]["langFeed"].visible = false;
					_taskPanel[_taskContent]["feedReward"]["checkBox"].visible = false;
					_taskPanel[_taskContent]["feedReward"].filters = [new ColorMatrixFilter([0.11, 0.59, 0.3, 0, 0, 0.11, 0.59, 0.3, 0, 0, 0.11, 0.59, 0.3, 0, 0, 0, 0, 0, 1, 0])];
				}
			} else {
				_taskPanel[_taskContent][_experience].x = _expAX;
				_taskPanel[_taskContent][_experience].y = _expAY;
				_taskPanel[_taskContent][_cap].x = _capAX;
				_taskPanel[_taskContent][_cap].y = _capAY;
			}

			_taskPanel[_taskContent][_experience]["num"].text = String(taskXmlList.experience);
			_taskPanel[_taskContent][_cap]["num"].text = String(taskXmlList.cap);

			removeGrid();
			var _gNameArr : Array = [];
			var _gSumArr : Array = [];
			var _gID : int = 0;
			var _gSum : int = 0;

			_gID = int(taskXmlList.rewardpropID);
			if (_gID > 0) {
				_gNameArr.push(String(XMLSource.getXMLSource("Props.xml").prop.(@id == _gID).name));
				_gSumArr.push(int(taskXmlList.rewardpropSum));
				_gID = 0;
			}

			_gID = int(taskXmlList.rewardequipID);
			if (_gID > 0) {
				_gNameArr.push(String(XMLSource.getXMLSource("Equipment.xml").equipCategory.equip.(@id == _gID).name));
				_gSumArr.push(int(taskXmlList.rewardequipSum));
				_gID = 0;
			}

			_gID = int(taskXmlList.rewardmaterialID);
			if (_gID > 0) {
				_gNameArr.push(String(XMLSource.getXMLSource("Materials.xml").material.(@id == _gID).name));
				_gSumArr.push(int(taskXmlList.rewardmaterialSum));
				_gID = 0;
			}

			if (_gNameArr.length == 1) {
				if (!_feedFlag) {
					showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gCx, _gy);
				} else {
					showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gABx, _gAy);
				}
			} else if (_gNameArr.length == 2) {
				if (!_feedFlag) {
					showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gBx, _gy);
					showGrid(String(_gNameArr[1]), int(_gSumArr[1]), _gDx, _gy);
				} else {
					showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gAAx, _gAy);
					showGrid(String(_gNameArr[1]), int(_gSumArr[1]), _gACx, _gAy);
				}
			} else if (_gNameArr.length == 3) {
				showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gAx, _gy);
				showGrid(String(_gNameArr[1]), int(_gSumArr[1]), _gCx, _gy);
				showGrid(String(_gNameArr[2]), int(_gSumArr[2]), _gEx, _gy);
			}
			_gNameArr = [];
			_gSumArr = [];

			if (_feedFlag) {
				_gID = int(taskXmlList.feed.propID);
				if (_gID > 0) {
					_gNameArr.push(String(XMLSource.getXMLSource("Props.xml").prop.(@id == _gID).name));
					_gSumArr.push(int(taskXmlList.feed.propSum));
					_gID = 0;
				}

				_gID = int(taskXmlList.feed.equipID);
				if (_gID > 0) {
					_gNameArr.push(String(XMLSource.getXMLSource("Equipment.xml").equipCategory.equip.(@id == _gID).name));
					_gSumArr.push(int(taskXmlList.feed.equipSum));
					_gID = 0;
				}

				_gID = int(taskXmlList.feed.materialID);
				if (_gID > 0) {
					_gNameArr.push(String(XMLSource.getXMLSource("Materials.xml").material.(@id == _gID).name));
					_gSumArr.push(int(taskXmlList.feed.materialSum));
					_gID = 0;
				}

				if (_gNameArr.length == 1) {
					showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gBBx, _gBy);
				} else if (_gNameArr.length == 2) {
					showGrid(String(_gNameArr[0]), int(_gSumArr[0]), _gBAx, _gBy);
					showGrid(String(_gNameArr[1]), int(_gSumArr[1]), _gBCx, _gBy);
				}
				_gNameArr = [];
				_gSumArr = [];
			}
		}
		
		private var _listInfoArr:Array = [];
		private function showListInfo(info:String, infoSum:String):void {
			
			removeListInfo();
			if (!info) return;
			var _infoArr:Array = info.split(UIName.CHAR_RETURN_WRAP);
			var _infoNumArr:Array = infoSum.split(UIName.CHAR_RETURN_WRAP);
			var _infoY:int = 0;
			
			for (var i:int = 0; i < _infoArr.length; i ++ ) {
				
				var _mClass:Class = UICommand.getClass("com.paohui.ui.task.ListInfo");
				var obj:Object = new _mClass();
				_taskPanel[_taskContent]["listPanel"].addChild(obj);
				obj.y = _infoY;
				obj["list"].htmlText = marker(String(_infoArr[i]));
				obj["listNum"].text = String(_infoNumArr[i]);
				
				obj["listNum"].width = obj["listNum"].textWidth + 5;
				obj["listNum"].x = obj["bg"].width - obj["listNum"].width;
				
				obj["list"].width = obj["listNum"].x - 5;
				obj["list"].height = obj["list"].textHeight + 5;
				_infoY += obj.height;
				_listInfoArr.push(obj);
				_mClass = null;
				obj = null;
			}
			
		}
		
		/**
		 * 自动给【】中的文字加颜色
		 */
		private function marker(_str:String):String
		{
			var pattern:RegExp;

			pattern = /【/g;
			_str = _str.replace(pattern,'<FONT COLOR="#D04000"><b>【');  
			pattern = /】/g;
			_str = _str.replace(pattern,"】</b></FONT>");  

			return _str;
		}
		
		private function removeListInfo():void {
			
			for each (var obj:Object in _listInfoArr) {
				
				_taskPanel[_taskContent]["listPanel"].removeChild(obj);
			}
			_listInfoArr = [];
		}

		private function checkBoxHandler(event : MouseEvent) : void {
			if (_taskPanel[_taskContent]["feedReward"]["checkBox"]["check"].visible) {
				_taskPanel[_taskContent]["feedReward"]["checkBox"]["check"].visible = false;
				_taskPanel[_taskContent]["feedReward"].filters = [new ColorMatrixFilter([0.11, 0.59, 0.3, 0, 0, 0.11, 0.59, 0.3, 0, 0, 0.11, 0.59, 0.3, 0, 0, 0, 0, 0, 1, 0])];
			} else {
				_taskPanel[_taskContent]["feedReward"]["checkBox"]["check"].visible = true;
				_taskPanel[_taskContent]["feedReward"].filters = [];
			}
		}

		/**
		 * 显示奖励物品
		 * @param	gName 物品类名
		 * @param	gSum  物品数量
		 * @param	gx    物品位置x
		 * @param	gy    物品位置y
		 */
		private function showGrid(gName : String, gSum : int, gx : int, gy : int) : void {
			var _mClass : Class;
			var _obj : Object;
			var numTxt : TextField;

			_mClass = UICommand.getClass(gName);
			_obj = new _mClass();
			_taskPanel[_taskContent].addChild(_obj as DisplayObject);
			_obj.x = gx;
			_obj.y = gy;

			numTxt = UICommand.createTF(TextFormatAlign.RIGHT, 0xffffff, 12, "X" + String(gSum), UIName.FONT_SHOW_CARD);
			numTxt.x = _obj.width - numTxt.width;
			numTxt.y = _obj.height - 16;
			_obj.addChild(numTxt);
			_gTxtArr.push(numTxt);
			_gArr.push(_obj);
			_mClass = null;
			_obj = null;
			numTxt = null;
		}

		/**
		 * 移除奖励图标
		 */
		private function removeGrid() : void {
			_gTxtArr = [];
			for each (var obj:Object in _gArr) {
				_taskPanel[_taskContent].removeChild(obj);
				obj = null;
			}
			_gArr = [];
		}

		/**
		 * 移除任务
		 */
		private function removeTask() : void {
			//removeTaskTimer();
			for each (var obj:Object in _taskArr) {
				obj.removeEventListener(MouseEvent.CLICK, taskMouseEvent);
				_taskPanel["position"].removeChild(obj);
				obj = null;
			}
			_taskArr = [];
			_numY = 0;
		}

		/**
		 * 清理显示任务面板
		 */
		public function clear() : void {
			removeTask();
			removeGrid();
		}
		
	}
	// end TaskLayer
}