// /////////////////////////////////////////////////////////
// ShowLoadOriginal.as
// Macromedia ActionScript Implementation of the Class ShowLoadOriginal
// Generated by Enterprise Architect
// Created on:      20-七月-2011 14:21:11
// Original author: LuXianli
// /////////////////////////////////////////////////////////
package com.raytoon.cannonfodder.tools.load {
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import flash.display.DisplayObject;

	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.SecurityErrorEvent;
	import flash.net.URLRequest;
	import flash.system.ApplicationDomain;
	import flash.system.LoaderContext;
	import flash.system.SecurityDomain;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 20-七月-2011 14:21:11
	 */
	public dynamic class ShowLoadOriginal extends Sprite {
		private var loadMovieClip : MovieClip;
		private var loadMovieClipClass : Class;
		private var load : Loader;
		public var loadName : String;
		public var num : int = 0;
		public var row : int = 0;
		public var mirrorRow : int;
		public var mirrorNum : int;
		public var minRange : Number;
		public var maxRange : Number;
		public var type : String = "";
		public var id : int = 0;
		public var level : int = 1;
		public var paper:int = 0;
		public var unitId : String = "";
		private var _frameNum : int = 1;
		private var _playFlag : Boolean = false;
		public var isNew : Boolean = false;
		public var isMove : Boolean = false;
		private var _buildFail:Object;
		private var _buildFlag:Boolean = false;
		private var _levelFlag:Boolean = false;
		private var _levelMax:int = 1;
		private var _levelPanel:Object;
		public function ShowLoadOriginal(className : String, playFlag : Boolean = false, buildFlag:Boolean = false, levelFlag:Boolean = false, levelMax:int = 1 ) {
			loadName = className;
			_playFlag = playFlag;
			_buildFlag = buildFlag;
			_levelFlag = levelFlag;
			_levelMax = levelMax;
			if (ApplicationDomain.currentDomain.hasDefinition(className)) {
				loadMovieClipClass = ApplicationDomain.currentDomain.getDefinition(className) as Class;
				loadMovieClip = new loadMovieClipClass() as MovieClip;
				// _frameNum = Math.random() * loadMovieClip.totalFrames + 1;
				if (!_playFlag) loadMovieClip.gotoAndStop(_frameNum);
				else loadMovieClip.addFrameScript(loadMovieClip.totalFrames - 1, function() : void {
						loadMovieClip.stop();
					});
				addChild(loadMovieClip);
				loadMovieClip.cacheAsBitmap = true;
				if (_buildFlag) {
					
					var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("BuildTowerFail") as Class;
					_buildFail = new _mClass();
					_mClass = null;
					addChild(_buildFail as DisplayObject);
					_buildFail.scaleX = 0.85;
					_buildFail.scaleY = 0.85;
					_buildFail.visible = false;
				}
				if (_levelFlag) {
					
					_mClass = ApplicationDomain.currentDomain.getDefinition("LevelPanel") as Class;
					_levelPanel = new _mClass();
					_mClass = null;
					addChild(_levelPanel as DisplayObject);
					_levelPanel["levelMax"].text = _levelMax.toString();
					_levelPanel["levelNum"].text = level.toString();
					_levelPanel["levelNum"].addEventListener(Event.CHANGE, levelNumChange);
				}
			} else {
				load = new Loader();
				load.contentLoaderInfo.addEventListener(Event.COMPLETE, loadComplete);
				load.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, loadIoError);
				load.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);

				// var loadUrl:String = ConstPath.SERVER_ROOT + ConstPath.SWF_PATH + className + ConstPath.SWF_SUFFIX;
				var loadUrl : String = ConstPath.MATERIAL_PATH + ConstPath.SWF_PATH + className + ConstPath.SWF_SUFFIX;

				var context : LoaderContext = new LoaderContext();
				// 加载到指定共享域
				context.applicationDomain = ApplicationDomain.currentDomain;
				// context.securityDomain = SecurityDomain.currentDomain;

				load.load(new URLRequest(loadUrl), context);
			}
		}
		
		private function levelNumChange(event:Event):void {
			
			if (!_levelPanel["levelNum"].text) return;
			if (int(_levelPanel["levelMax"].text) >= int(_levelPanel["levelNum"].text)) {
				level = int(_levelPanel["levelNum"].text);
			}
			else {
				_levelPanel["levelNum"].text = level.toString();
			}

		}

		private function loadComplete(event : Event) : void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
			loadMovieClipClass = ApplicationDomain.currentDomain.getDefinition(loadName) as Class;
			loadMovieClip = new loadMovieClipClass() as MovieClip;
			// _frameNum = Math.random() * loadMovieClip.totalFrames + 1;
			if (!_playFlag) loadMovieClip.gotoAndStop(_frameNum);
			else loadMovieClip.addFrameScript(loadMovieClip.totalFrames - 1, function() : void {
					loadMovieClip.stop();
				});
			addChild(loadMovieClip);
			loadMovieClip.cacheAsBitmap = true;
			if (_buildFlag) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("BuildTowerFail") as Class;
				_buildFail = new _mClass();
				_mClass = null;
				addChild(_buildFail as DisplayObject);
				_buildFail.scaleX = 0.85;
				_buildFail.scaleY = 0.85;
				_buildFail.visible = false;
			}
			if (_levelFlag) {
				
				_mClass = ApplicationDomain.currentDomain.getDefinition("LevelPanel") as Class;
				_levelPanel = new _mClass();
				_mClass = null;
				addChild(_levelPanel as DisplayObject);
				_levelPanel["levelMax"].text = _levelMax.toString();
				_levelPanel["levelNum"].text = level.toString();
				_levelPanel["levelNum"].addEventListener(Event.CHANGE, levelNumChange);
			}
		}

		private function loadIoError(event : IOErrorEvent) : void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
		}

		private function loadSecurityError(event : SecurityErrorEvent) : void {
			load.contentLoaderInfo.removeEventListener(Event.COMPLETE, loadComplete);
			load.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, loadIoError);
			load.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, loadSecurityError);
		}
		/**
		 * 隐藏显示叉叉
		 * @param	value
		 */
		public function viewBuildFlail(value:Boolean):void {
			
			if (_buildFail) {
				
				_buildFail.visible = value;
			}
		}
	}
	// end ShowLoadOriginal
}