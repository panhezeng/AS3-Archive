///////////////////////////////////////////////////////////
//  MapRectInfo.as
//  Macromedia ActionScript Implementation of the Class MapRectInfo
//  Generated by Enterprise Architect
//  Created on:      27-七月-2011 11:08:24
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.tools.utils
{
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Towers;
	import com.raytoon.cannonfodder.tools.aStar.Node;
	import com.raytoon.cannonfodder.tools.load.ShowLoadOriginal;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	import flash.geom.Rectangle;
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 27-七月-2011 11:08:24
	 */
	public class MapRectInfo
	{
		private static var _mapInfoArr:Array = new Array();
		private static var _mapRandomArr:Array = new Array();
		private static var _startX:int = 0;
		private static var _startY:int = 0;
		public static var numCols:int;
		public static var numRows:int;
		public static var attackRectangle:Rectangle = new Rectangle(100, 100, 450, 350);
		public static function get mapRectInfo():Array {
			
			return _mapInfoArr;
		}
		/**
		 * 创建 行走地图  无形走障碍
		 * @param	startNum  行走矩阵横向起始点
		 * @param	startRow   行走矩阵竖向起始点
		 * @param	row          行走矩阵竖向高度
		 * @param	num         行走矩阵横向宽度
		 * @return         _mapInfoArr 行走地图数据，无障碍点。
		 */
		public static function creatMapRectInfo(startNum:int, startRow:int, row:int, num:int):Array {
			_mapInfoArr = [];
			numCols = row;
			numRows = num;
			attackRectangle = new Rectangle(startNum, startRow, num * GlobalVariable.RECT_WIDTH, row * GlobalVariable.RECT_HEIGHT);
			_startY = startRow + GlobalVariable.RECT_HEIGHT / 2;
			for(var i:int = 0; i < row; i++)
			{
				_mapInfoArr[i] = new Array();
				_startX = startNum + GlobalVariable.RECT_WIDTH / 2;
				
				for(var j:int = 0; j < num; j++)
				{
					_mapInfoArr[i][j] = new Node(i, j, _startX, _startY);
					_startX += GlobalVariable.RECT_WIDTH;
				}
				
				_startY += GlobalVariable.RECT_HEIGHT;
			}
			
			return _mapInfoArr;
		}
		/**
		 * 创建障碍物随机数组
		 * @return
		 */
		public static  function createRandomArray(_startArr:Array,_endArr:Array):Array {
			
			_mapRandomArr = [];
			var m:int = 0;
			for (var i:int = 0; i < _mapInfoArr.length; i ++ ) {
				
				for (var j:int = 0; j < _mapInfoArr[i].length; j ++ ) {
					
					if ((i == _startArr[0] && j == _startArr[1]) || (i == _endArr[0] && j == _endArr[1]))
						continue;
					_mapRandomArr[m] = _mapInfoArr[i][j];
					m ++;
				}
			}
			
			return _mapRandomArr;
		}
		/**
		 * 行走标志位全部通行
		 * @return
		 */
		public static function backMapPoint():Boolean {
			
			for each(var mapI:Array in _mapInfoArr) {
				
				for each (var node:Node in mapI) {
					
					node.walkable = true;
					node.isAppear = true;
				}
			}
			return true;
		}
		/**
		 * 设定障碍物不可行走点
		 * @param	_obTowerArr 障碍物数组
		 */
		public static function optionObtacleTowerPoint(_obTowerArr:Array):Boolean {
			
			for each(var obTower:ShowLoadOriginal in _obTowerArr) {
				
				if (obTower.type != Towers.OBSTACLE_TOWER) {
					
					setFlaseIsAppearPoint(int(obTower.row), int(obTower.num));
					if (obTower.type == Towers.ORGAN_TOWER)
						continue;
					setFalseWalkablePoint(int(obTower.row), int(obTower.num));
				}else {
					
					var _rectArr:Array = String(XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == String(obTower.type)).tower.(@id == obTower.id).format).split(",");
					var m:int = (int(obTower.row) + int(_rectArr[0]) < numCols) ? (int(obTower.row) + int(_rectArr[0])) : numCols;
					var n:int = (int(obTower.num) + int(_rectArr[1]) < numRows) ? (int(obTower.num) + int(_rectArr[1])) : numRows;
					for (var i:int = int(obTower.row); i <  m; i++ ) {
						
						for (var j:int = int(obTower.num); j < n; j++ ) {
							setFlaseIsAppearPoint(i, j);
							setFalseWalkablePoint(i, j);
						}
					}
					
					_rectArr = null;
					m = 0;
					n = 0;
				}
				
			}
			
			return true;
		}
		/**
		 * 设置当前地图可行走点
		 * @param	_row   行走点一维坐标
		 * @param	_num  行走点二位坐标
		 */
		public static function setTureWalkablePonit(_row:int,_num:int):void {
			
			(_mapInfoArr[_row][_num] as Node).walkable = true;
		}
		/**
		 * 设置当前地图不可行走点
		 * @param	_row  不可行走点一维坐标
		 * @param	_num  不可行走点二维坐标
		 */
		public static function setFalseWalkablePoint(_row:int, _num:int):void {
			
			(_mapInfoArr[_row][_num] as Node).walkable = false;
		}
		/**
		 * 得到 指定点是否可行走
		 * @param	_row
		 * @param	_num
		 * @return
		 */
		public static function getWalkable(_row:int, _num:int):Boolean {
			
			return (_mapInfoArr[_row][_num] as Node).walkable;
		}
		/**
		 * 设置当前地图矿可出现点
		 * @param	_row  矿 出现点一维坐标
		 * @param	_num 矿 出现点二维坐标
		 */
		public static function setFlaseIsAppearPoint(_row:int, _num:int):void {
			
			(_mapInfoArr[_row][_num] as Node).isAppear = false;
		}
		/**
		 * 设置当前地图矿可出现点
		 * @param	_row  矿 出现点一维坐标
		 * @param	_num 矿 出现点二维坐标
		 */
		public static function setTrueIsAppearPoint(_row:int, _num:int):void {
			
			(_mapInfoArr[_row][_num] as Node).isAppear = true;
		}
		/**
		 * 得到当前地图指定点是否可出现矿
		 * @param	_row   矿 一维坐标
		 * @param	_num  矿 二维坐标
		 * @return
		 */
		public static function getTureIsAppearPoint(_row:int, _num:int):Boolean {
			
			return (_mapInfoArr[_row][_num] as Node).isAppear;
		}
		/**
		 *  操作指定地图箭塔数据,设置地图不可行走点
		 * @param	towerInfo
		 */
		public static function optionMapPoint(towerInfo:Array):void {
			
			if (_mapInfoArr) {
				
				for each(var obj:Object in towerInfo) {
					
					if (obj.type != Towers.OBSTACLE_TOWER) {
						
						setFlaseIsAppearPoint(int(obj.row), int(obj.num));
						if (obj.type == Towers.ORGAN_TOWER)
							continue;
						setFalseWalkablePoint(int(obj.row), int(obj.num));
					}else {
						
						var _rectArr:Array = String(XMLSource.getXMLSource("TowerInfo.xml").towerType.(@type == String(obj.type)).tower.(@id == obj.id).format).split(",");
						var m:int = (int(obj.row) + int(_rectArr[0]) < numCols) ? (int(obj.row) + int(_rectArr[0])) : numCols;
						var n:int = (int(obj.num) + int(_rectArr[1]) < numRows) ? (int(obj.num) + int(_rectArr[1])) : numRows;
						for (var i:int = int(obj.row); i <  m; i++ ) {
							
							for (var j:int = int(obj.num); j < n; j++ ) {
								setFlaseIsAppearPoint(i, j);
								setFalseWalkablePoint(i, j);
							}
						}
						
						_rectArr = null;
						m = 0;
						n = 0;
					}
				}
				_appearArray = [];
				createAppearArray();
			}
		}
		private static var _appearArray:Array = new Array();
		/**
		 * 创建 随机出现点数组
		 */
		private static function createAppearArray():void {
			
			for each (var nodeArr:Array in _mapInfoArr) {
				
				for each(var node:Node in nodeArr) {
					
					if (node.walkable || node.isAppear)
						_appearArray.push(node);
				}
			}
		}
		/**
		 * 取得 可出现点数组
		 */
		public static function get appearArray():Array {
			
			return _appearArray;
		}
	}//end MapRectInfo

}