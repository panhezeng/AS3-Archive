///////////////////////////////////////////////////////////
//  DynamicLoadOriginal.as
//  Macromedia ActionScript Implementation of the Class DynamicLoadOriginal
//  Generated by Enterprise Architect
//  Created on:      07-六月-2011 10:23:52
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.tools.load
{
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.OptionMainLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.tools.ArticleBlood;
	import com.raytoon.cannonfodder.tools.BaseSprite;
	import com.raytoon.cannonfodder.tools.EventBindingData;
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.IOErrorEvent;
	import flash.events.SecurityErrorEvent;
	import flash.events.TimerEvent;
	import flash.net.URLRequest;
	import flash.system.ApplicationDomain;
	import flash.system.LoaderContext;
	import flash.system.SecurityDomain;
	import flash.utils.Timer;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 07-六月-2011 10:23:52
	 */
	public dynamic class DynamicLoadOriginal extends BaseSprite
	{
		private var elementName:String;  //原件，共享域类名称
		private var elementMovieClip:MovieClip;  //原件，影片剪辑
		private var elementClass:Class;  //原件，共享域内类
		private var elementLoad:Loader; //原件，加载
		private var elementFlag:int = 0; //原件，添加到显示列表
		private var elementFrame:int = 1; // 原件，显示帧数
		private var elementUrl:String; // 原件，地址
		private var backShape:Shape;
		private var viewShape:Shape;
		private var _showFlag:Boolean;
		private var _id:int = 0;
		private var _article:ArticleBlood;
		private var _HP:int;
		private var _armor:int;
		private var _allHP:int;
		private var _allArmor:int;
		private var _showHPFunction:Function;
		private var _showHPY:int = 0;
		/**
		 * 通过链接类名，得到链接类实例
		 * @param	className  链接类名
		 */
		public function DynamicLoadOriginal(className:String,showFlag:Boolean = true,icon:String="",HP:int = 1,armor:int = 0,allHP:int = 1,allArmor:int = 1,showHPFunction:Function = null,showHPY:int = 0){
			super();
			elementName = icon?icon:className;
			_HP = HP;
			_armor = armor;
			_allHP = allHP;
			_allArmor = allArmor;
			_showHPFunction = showHPFunction;
			_showHPY = showHPY - 5;
			if (className == "QiangTa") {
				
				showFlag = false;
				var _obstacle:ShowLoadOriginal = new ShowLoadOriginal(className);
				addChild(_obstacle);
				return;
			}
			_showFlag = showFlag;
			if (ApplicationDomain.currentDomain.hasDefinition(elementName)) {//判断此共享域内 有无 此 链接类
				
				elementClass = ApplicationDomain.currentDomain.getDefinition(elementName) as Class;
				elementMovieClip = new elementClass() as MovieClip;
				addChild(elementMovieClip);
				elementClass = null;
				
				elementFlag = 1;
				if (_showHPFunction != null && _showFlag) {
					if (OptionMainLayer.viewArticleBloodFlag)
						_showHPFunction(_HP, _allHP, _armor, _allArmor, -elementMovieClip.height + _showHPY);
				}
			}else {//没有此 链接类， 开始加载
				
				elementLoad = new Loader();
				elementLoad.contentLoaderInfo.addEventListener(Event.COMPLETE, elementLoadComplete);
				elementLoad.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, elementLoadIoError);
				elementLoad.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, elementLoadSecurityError);
				
//				elementUrl = ConstPath.SERVER_ROOT + ConstPath.SWF_PATH + className + ConstPath.SWF_SUFFIX;
				elementUrl = ConstPath.MATERIAL_PATH + ConstPath.SWF_PATH + className + ConstPath.SWF_SUFFIX;
				
				var context:LoaderContext = new LoaderContext(); //加载到指定共享域
				context.applicationDomain = ApplicationDomain.currentDomain;
//				context.securityDomain = SecurityDomain.currentDomain;
				
				elementLoad.load(new URLRequest(elementUrl),context);
			}
		}
		/**
		 *素材库 加载完成
		 * @param	event
		 */
		private function elementLoadComplete(event:Event):void {
			
			elementLoad.contentLoaderInfo.removeEventListener(Event.COMPLETE, elementLoadComplete);
			elementLoad.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, elementLoadIoError);
			elementLoad.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, elementLoadSecurityError);
			
			elementClass = ApplicationDomain.currentDomain.getDefinition(elementName) as Class;
			elementMovieClip = new elementClass() as MovieClip;
			addChild(elementMovieClip);
			elementClass = null;	
			
			elementFlag = 1;
			if (_showHPFunction != null && _showFlag) {
				if (OptionMainLayer.viewArticleBloodFlag)
					_showHPFunction(_HP, _allHP, _armor, _allArmor, -elementMovieClip.height + _showHPY);
			}
		}
		/**
		 * 素材库 加载出错
		 * @param	event
		 */
		private function elementLoadIoError(event:IOErrorEvent):void {
			
			elementLoad.contentLoaderInfo.removeEventListener(Event.COMPLETE, elementLoadComplete);
			elementLoad.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, elementLoadIoError);
			elementLoad.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, elementLoadSecurityError);
		}
		/**
		 * 素材库 加载安全域出错
		 * @param	event
		 */
		private function elementLoadSecurityError(event:SecurityErrorEvent):void {
			
			elementLoad.contentLoaderInfo.removeEventListener(Event.COMPLETE, elementLoadComplete);
			elementLoad.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, elementLoadIoError);
			elementLoad.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, elementLoadSecurityError);
		}
		/**
		 * 指定当前影片剪辑，显示指定帧
		 * @param	frameI   帧数
		 */
		public function showFrame(frameI:int):void {
			
			elementFrame = frameI;
			
			if (elementFlag == 1) {
				
				elementMovieClip.gotoAndStop(elementFrame);
			}
		}
		/**
		 * 得到 当前影片剪辑，当前显示帧
		 * @return  帧数
		 */
		public function getFrame():int {
			
			if (elementFlag == 1)
				return elementMovieClip.currentFrame;
			return 0;
		}
		private var shapeWidth:Number = 0;
		/**
		 * 显示单位血条
		 * @param	nowHp 当前血量
		 * @param	totalHp 总生命值
		 */
		public function showHP(nowHp:int,totalHp:int,nowArmor:int,totalArmor:int):void {
			
		}
		
		public function set id(value:int):void {
			_id = value;
		}
		public function get id():int {
			return _id;
		}
		private var _childClassName:String;
		/**
		 * 箭塔发射子弹 
		 */
		public function shootBullet():void {
			
			if (elementFlag == 1) {
				
				_childClassName = "shoot_" + elementMovieClip.currentFrame.toString();
				if(elementMovieClip[_childClassName])
					(elementMovieClip[_childClassName] as MovieClip).gotoAndPlay(2);
			}
			
		}
		public var _kuangTimer:Timer;
		public static const KAIKUANG_COMPLETE:String = "kaiKuangComplete";
		private var _time:int = 120;
		/**
		 * 开矿时间
		 * @param	time
		 */
		public function createKuangGlod(time:int = 120):void {
			
			_time = time;
			if (elementFlag == 1) {
				elementMovieClip.gotoAndStop(2);
				(elementMovieClip["KuanMovie"] as MovieClip).addFrameScript(59, kuangMovieComplete);
			}
		}
		
		private function kuangMovieComplete():void {
			
			elementMovieClip.gotoAndStop(3);
			(elementMovieClip["ChuQian"] as MovieClip).addFrameScript(99, chuKaungComplete);
			_kuangTimer = new Timer(_time * 10);
			_kuangTimer.addEventListener(TimerEvent.TIMER, kuangTimerHandler);
			_kuangTimer.start();
		}
		
		private function kuangTimerHandler(event:TimerEvent):void {
			
			(elementMovieClip["ChuQian"] as MovieClip).nextFrame();
		}
		
		private function chuKaungComplete():void {
			
			showFrame(1);
			_kuangTimer.reset();
			_kuangTimer.removeEventListener(TimerEvent.TIMER, kuangTimerHandler);
			_kuangTimer = null;
			dispatchEvent(new Event(KAIKUANG_COMPLETE));
		}
		
		public function clear():void {
			
			if (_kuangTimer) {
				
				_kuangTimer.reset();
				_kuangTimer.removeEventListener(TimerEvent.TIMER, kuangTimerHandler);
				_kuangTimer = null;
				
			}
			
			if (elementFlag == 1) {
				elementFlag = 0;
				removeChild(elementMovieClip);
				elementMovieClip = null;
			}
		}
	}//end DynamicLoadOriginal

}