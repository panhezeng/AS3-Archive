///////////////////////////////////////////////////////////
//  DisplayEffect.as
//  Macromedia ActionScript Implementation of the Class DisplayEffect
//  Generated by Enterprise Architect
//  Created on:      21-九月-2011 16:06:29
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.tools.effects
{
	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 21-九月-2011 16:06:29
	 */
	import com.raytoon.cannonfodder.tools.effects.data.Map;
	import flash.display.*;
	import flash.filters.*;
	
	public class DisplayEffect extends Object
	{
		private var display:DisplayObject;
		private var _nGreen:Number = 0.6094;
		private var _nRed:Number = 0.3086;
		private var _nBlue:Number = 0.082;
		private var filters:Map;
		public static const DIRECTION_LEFT:String = "L";
		public static const DIRECTION_BOTTOM_RIGHT:String = "BR";
		public static const DIRECTION_BOTTOM:String = "B";
		public static const QUALITY_MEDIUM:uint = 2;
		public static const DIRECTION_TOP_LEFT:String = "TL";
		public static const DIRECTION_TOP_RIGHT:String = "TR";
		public static const QUALITY_LOW:uint = 1;
		public static const DIRECTION_TOP:String = "T";
		public static const QUALITY_HIGH:uint = 3;
		public static const DIRECTION_BOTTOM_LEFT:String = "BL";
		public static const DIRECTION_RIGHT:String = "R";
		
		public function DisplayEffect(param1:DisplayObject)
		{
			_nRed = 0.3086;
			_nGreen = 0.6094;
			_nBlue = 0.082;
			this.display = param1;
			filters = new Map();
			return;
		}// end function
		
		private function applyFilter(param1:String, param2:BitmapFilter) : void
		{
			filters.put(param1, param2);
			display.filters = filters.values();
			return;
		}// end function
		
		public function contrast(param1:Number) : void
		{
			var _loc_2:Number = NaN;
			var _loc_3:Number = NaN;
			var _loc_4:ColorMatrixFilter = null;
			if (param1 > 1)
			{
				param1 = 1;
			}
			if (param1 < 0)
			{
				param1 = 0;
			}
			_loc_2 = param1 * 11;
			_loc_3 = 63.5 - param1 * 698.5;
			_loc_4 = new ColorMatrixFilter();
			_loc_4.matrix = [_loc_2, 0, 0, 0, _loc_3, 0, _loc_2, 0, 0, _loc_3, 0, 0, _loc_2, 0, _loc_3, 0, 0, 0, 1, 0];
			applyFilter("contrast", _loc_4);
			return;
		}// end function
		
		public function clear() : void
		{
			filters.clear();
			display.filters = [];
			return;
		}// end function
		
		public function grayscale() : void
		{
			saturation(0);
			return;
		}// end function
		
		public function brightness(param1:int) : void
		{
			var _loc_2:ColorMatrixFilter = null;
			if (param1 > 255)
			{
				param1 = 255;
			}
			if (param1 < -255)
			{
				param1 = -255;
			}
			_loc_2 = new ColorMatrixFilter();
			_loc_2.matrix = [1, 0, 0, 0, param1, 0, 1, 0, 0, param1, 0, 0, 1, 0, param1, 0, 0, 0, 1, 0];
			applyFilter("brightness", _loc_2);
			return;
		}// end function
		
		public function sharpen(param1:uint = 3) : void
		{
			var _loc_2:ConvolutionFilter = null;
			var _loc_3:uint = 0;
			_loc_2 = new ConvolutionFilter();
			_loc_3 = 4 - param1;
			if (_loc_3 < 1)
			{
				_loc_3 = 1;
			}
			if (_loc_3 > 3)
			{
				_loc_3 = 3;
			}
			_loc_2.matrixX = 3;
			_loc_2.matrixY = 3;
			_loc_2.matrix = [0, -1, 0, -1, _loc_3 + 4, -1, 0, -1, 0];
			_loc_2.divisor = _loc_3;
			_loc_2.bias = 0;
			applyFilter("sharpen", _loc_2);
			return;
		}// end function
		
		public function emboss(param1:String = null) : void
		{
			var _loc_2:ConvolutionFilter = null;
			_loc_2 = new ConvolutionFilter();
			_loc_2.matrixX = 3;
			_loc_2.matrixY = 3;
			switch(param1)
			{
				case DIRECTION_BOTTOM:
				{
					_loc_2.matrix = [0, -2, 0, 0, 0, 0, 0, 2, 0];
					break;
				}
				case DIRECTION_BOTTOM_LEFT:
				{
					_loc_2.matrix = [0, 0, -2, 0, 0, 0, 2, 0, 0];
					break;
				}
				case DIRECTION_BOTTOM_RIGHT:
				{
					_loc_2.matrix = [-2, 0, 0, 0, 0, 0, 0, 0, 2];
					break;
				}
				case DIRECTION_LEFT:
				{
					_loc_2.matrix = [0, 0, 0, 2, 0, -2, 0, 0, 0];
					break;
				}
				case DIRECTION_RIGHT:
				{
					_loc_2.matrix = [0, 0, 0, -2, 0, 2, 0, 0, 0];
					break;
				}
				case DIRECTION_TOP:
				{
					_loc_2.matrix = [0, 2, 0, 0, 0, 0, 0, -2, 0];
					break;
				}
				case DIRECTION_TOP_RIGHT:
				{
					_loc_2.matrix = [0, 0, 2, 0, 0, 0, -2, 0, 0];
					break;
				}
				case DIRECTION_TOP_LEFT:
				{
				}
				default:
				{
					_loc_2.matrix = [2, 0, 0, 0, 0, 0, 0, 0, -2];
					break;
					break;
				}
			}
			_loc_2.bias = 128;
			_loc_2.divisor = 0;
			applyFilter("emboss", _loc_2);
			return;
		}// end function
		
		public function invert() : void
		{
			var _loc_1:ColorMatrixFilter = null;
			_loc_1 = new ColorMatrixFilter();
			_loc_1.matrix = [-1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0];
			applyFilter("invert", _loc_1);
			return;
		}// end function
		
		public function saturation(param1:Number) : void
		{
			var _loc_2:Number = NaN;
			var _loc_3:Number = NaN;
			var _loc_4:Number = NaN;
			var _loc_5:Number = NaN;
			var _loc_6:Number = NaN;
			var _loc_7:Number = NaN;
			var _loc_8:Number = NaN;
			var _loc_9:Number = NaN;
			var _loc_10:Number = NaN;
			var _loc_11:ColorMatrixFilter = null;
			if (param1 > 3)
			{
				param1 = 3;
			}
			if (param1 < 0)
			{
				param1 = 0;
			}
			_loc_2 = (1 - param1) * _nRed + param1;
			_loc_3 = (1 - param1) * _nGreen;
			_loc_4 = (1 - param1) * _nBlue;
			_loc_5 = (1 - param1) * _nRed;
			_loc_6 = (1 - param1) * _nGreen + param1;
			_loc_7 = (1 - param1) * _nBlue;
			_loc_8 = (1 - param1) * _nRed;
			_loc_9 = (1 - param1) * _nGreen;
			_loc_10 = (1 - param1) * _nBlue + param1;
			_loc_11 = new ColorMatrixFilter();
			_loc_11.matrix = [_loc_2, _loc_3, _loc_4, 0, 0, _loc_5, _loc_6, _loc_7, 0, 0, _loc_8, _loc_9, _loc_10, 0, 0, 0, 0, 0, 1, 0];
			applyFilter("saturation", _loc_11);
			return;
		}// end function
		
		private function toHEX(param1:uint, param2:uint, param3:uint) : Object
		{
			return (param1 << 16) + (param2 << 8) + param3;
		}// end function
		
		private function toRGB(param1:uint) : Object
		{
			var _loc_2:Object = null;
			_loc_2 = new Object();
			_loc_2.R = param1 >> 16;
			_loc_2.G = (param1 & 65280) >> 8;
			_loc_2.B = param1 & 255;
			return _loc_2;
		}// end function
		
		public function color(... args) : void
		{
			// args = 0;
			var _loc_3:ColorMatrixFilter = null;
			var _loc_4:Object = null;
			if (args.length != 1 && args.length != 3)
			{
				return;
			}
			// args = 0;
			//while (args < args.length)
			//{
			//
			//if (!(args[args] is uint))
			//{
			//return;
			//}
			//args = args + 1;
			//}
			_loc_3 = new ColorMatrixFilter();
			_loc_4 = new Object();
			if (args.length == 1)
			{
				_loc_4 = toRGB(args[0]);
			}
			else
			{
				_loc_4.R = args[0];
				_loc_4.G = args[1];
				_loc_4.B = args[2];
			}
			_loc_3.matrix = [1, 0, 0, _loc_4.R, 0, 0, 1, 0, _loc_4.G, 0, 0, 0, 1, _loc_4.B, 0, 0, 0, 0, 1, 0];
			applyFilter("color", _loc_3);
			return;
		}// end function
		
		public function blur(param1:uint = 4, param2:uint = 4) : void
		{
			var _loc_3:BlurFilter = null;
			_loc_3 = new BlurFilter();
			_loc_3.blurX = param1;
			_loc_3.blurY = param2;
			applyFilter("blur", _loc_3);
			return;
		}// end function
		
	}// end DisplayEffect
	
}