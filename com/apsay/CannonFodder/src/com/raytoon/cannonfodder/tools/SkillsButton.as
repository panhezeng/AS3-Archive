///////////////////////////////////////////////////////////
//  HeroSkills.as
//  Macromedia ActionScript Implementation of the Class HeroSkills
//  Generated by Enterprise Architect
//  Created on:      29-十一月-2011 14:53:06
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.tools
{
	import com.raytoon.cannonfodder.puremvc.view.mediator.optionMainLayerMediator.OptionMainLayerMediator;
	import com.raytoon.cannonfodder.puremvc.view.ui.UIMain;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.OptionMainLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.optionMainLayer.element.Element;
	import com.raytoon.cannonfodder.puremvc.view.ui.soundLayer.SoundLayer;
	import com.raytoon.cannonfodder.puremvc.view.ui.toolsLayer.ToolsLayer;
	import com.raytoon.cannonfodder.tools.utils.SoundName;
	import com.raytoon.cannonfodder.tools.utils.UIClass;
	import com.raytoon.cannonfodder.tools.utils.UICommand;
	import com.raytoon.cannonfodder.tools.utils.UICreate;
	import com.raytoon.cannonfodder.tools.utils.UIState;
	import com.raytoon.cannonfodder.tools.utils.UIXML;
	import com.raytoon.cannonfodder.tools.xml.XMLSource;
	
	import flash.display.DisplayObject;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.events.TimerEvent;
	import flash.filters.ColorMatrixFilter;
	import flash.system.ApplicationDomain;
	import flash.text.TextField;
	import flash.utils.Timer;
	import flash.utils.getQualifiedClassName;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 29-十一月-2011 14:53:06
	 */
	public class SkillsButton extends Sprite
	{
		private var _skillsFunction:Function;
		private var _skillsTime:Number;
		private var _cdTime:Number;
		private var _skillsButtonName:String;
		private var _skillsElement:Sprite;
		private var _skillsRing:int = 0;
		private var _skillsMirrorRing:int = 0;
		private var _skillsName:String;
		
		private var _skillsTipName:String;
		private var _skillsTipInfo:String;
		
		public function set skillsName(value:String):void
		{
			_skillsName = value;
		}
		
		public function get skillsName():String
		{
			return _skillsName;
		}
		/**
		 * 
		 * @param	skillsFunction 待调用函数，技能
		 * @param	cdTime         技能按钮cd时间
		 * @param	skillsTime     技能持续时间
		 * @param	skillsButtonName  技能按钮类名
		 * @param	skillsRing       使用此技能的价格
		 */
		public function SkillsButton(skillsFunction:Function, cdTime:Number, skillsTime:Number, skillsButtonName:String, skillsRing:int = 0,freeFlag:Boolean = false)
		{
			switch(skillsRing) {
				
				case 2:
					_skillsTipName = String(UIXML.uiXML.skillsButton.plusTime.title);//"加时间";
					_skillsTipInfo = String(UIXML.uiXML.skillsButton.plusTime.info);//"付费技能，延长一段游戏进攻时间";
					if (freeFlag) {
						_skillsMirrorRing = int(UIXML.uiXML.skillsButton.plusTime.money);
					}
					else {
						_skillsRing = _skillsMirrorRing = int(UIXML.uiXML.skillsButton.plusTime.money);
					}
					break;
					
				case 4:
					_skillsTipName = String(UIXML.uiXML.skillsButton.coverTower.title);//"盖帽垃圾桶";
					_skillsTipInfo = String(UIXML.uiXML.skillsButton.coverTower.info);//"付费技能，盖住全部垃圾桶，并使场内所有单位停止工作一段时间";
					if (freeFlag) {
						_skillsMirrorRing = int(UIXML.uiXML.skillsButton.coverTower.money);
					}
					else {
						_skillsRing = _skillsMirrorRing = int(UIXML.uiXML.skillsButton.coverTower.money);
					}
					break;
					
				case 8:
					_skillsTipName = String(UIXML.uiXML.skillsButton.lockTower.title);//"锁定垃圾桶";
					_skillsTipInfo = String(UIXML.uiXML.skillsButton.lockTower.info);//"付费技能，锁住全部垃圾桶，并使其停止工作一段时间";
					if (freeFlag) {
						_skillsMirrorRing = int(UIXML.uiXML.skillsButton.lockTower.money);
					}
					else {
						_skillsRing = _skillsMirrorRing = int(UIXML.uiXML.skillsButton.lockTower.money);
					}
					break;
			}
			_skillsFunction = skillsFunction;
			_skillsTime = skillsTime;
			_cdTime = cdTime;
			_skillsButtonName = skillsButtonName;
			
			var _mClass:Class = ApplicationDomain.currentDomain.getDefinition(skillsButtonName) as Class;
			_skillsElement = new _mClass() as Sprite;
			addChild(_skillsElement);
			_mClass = null;
			if (_skillsElement["waring"]) {
				
				_skillsElement["waring"].stop();
				_skillsElement["waring"].visible = false;
			}
			(_skillsElement["CDMovieLayer"] as MovieClip).visible = false;
			(_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).gotoAndStop(1);
			(_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).addFrameScript((_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).totalFrames - 1, skillsButtonEnable);
			(_skillsElement["ButtonLayer"] as MovieClip).addEventListener(MouseEvent.CLICK, skillsButtonClickHandler);
			if (_skillsElement["TextLayer"])
			{
				
				(_skillsElement["TextLayer"] as TextField).text = String(_skillsRing);
			}
			if (skillsRing > 0) {
				_skillsElement.addEventListener(MouseEvent.ROLL_OVER, mouseEventHandler);
				_skillsElement.addEventListener(MouseEvent.ROLL_OUT, mouseEventHandler);
			}
		}
		/**
		 * 是否停用技能按钮
		 * @param	value
		 */
		public function enableSkillsButton(value:Boolean):void {
			
			if (value && _skillsElement) {
				
				//if (!_skillsElement["ButtonLayer"].hasEventListener(MouseEvent.CLICK)) {
					_skillsElement["ButtonLayer"].addEventListener(MouseEvent.CLICK, skillsButtonClickHandler);
				//}
			}
			else if (!value && _skillsElement) {
				
				if (_skillsElement["ButtonLayer"].hasEventListener(MouseEvent.CLICK)) {
					_skillsElement["ButtonLayer"].removeEventListener(MouseEvent.CLICK, skillsButtonClickHandler);
				}
			}
		}
		
		private function mouseEventHandler(event:MouseEvent):void {
			
			switch(event.type) {
				
				case MouseEvent.ROLL_OVER:
					UICreate.createTooltips(_skillsTipName, _skillsTipInfo, this);
					UIMain.mouseCursor = UIMain.NEW_BUTTON;
					break;
					
				case MouseEvent.ROLL_OUT:
					var stageTop : DisplayObject = stage.getChildAt(this.stage.numChildren - 1);
					if (getQualifiedClassName(stageTop).indexOf(UIClass.TIP_PREFIX) != -1) UICommand.destroy(stageTop);
					UIMain.mouseCursor = UIMain.NEW_COMMON;
					break;
			}
			
		}
		
		private var _skillsTimer:Timer;
		
		private function skillsButtonClickHandler(event:MouseEvent):void
		{
			
			if (_skillsRing <= (UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).realMoney)
			{
				
				if (_cdTime > 0)
				{
					if (_skillsRing == 0) {
						
						if (_skillsFunction != null)
							_skillsFunction(_skillsTime);
						_skillsElement["ButtonLayer"]["comp"].enabled = false;
						(_skillsElement["CDMovieLayer"] as MovieClip).visible = true;
						_skillsTimer = new Timer(int(_cdTime * 1000 / 60), 60);
						_skillsTimer.addEventListener(TimerEvent.TIMER, skillsTimerHandler);
						_skillsTimer.start();
						noFreeSkills();
						if (_skillsName == "ringSkillsButon") SoundLayer.getInstance().playSound(SoundName.SOUND_RING_SKILLS);
					}
					else
					{
						showRingButton();
					}
				}
				
				if (_skillsElement["TextLayer"])
				{
					
					(_skillsElement["TextLayer"] as TextField).text = String(_skillsRing);
					
					var _arr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).skillsButtonArr;
					
					for each (var sBtn:SkillsButton in _arr) {
						
						if (sBtn.skillsName == "ringSkillsButon" && sBtn != this && !sBtn.cdMovieRunFlag) sBtn.visibleFlaseRingBtn();
					}
				}
				
				
			}
			else
			{
				//(UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).showRingBuGou();
				//_skillsElement["ButtonLayer"]["comp"].enabled = false;
				//_skillsElement.filters = [new ColorMatrixFilter([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0])]; //灰色
				UICommand.pauseProgress();
				
				UICreate.popupPrompt(String(XMLSource.getXMLSource("UISite.xml").notEnough.money[0]) + String(XMLSource.getXMLSource("UISite.xml").mark.comma[0]) + String(XMLSource.getXMLSource("UISite.xml").phrase.need[0]) + _skillsRing.toString() + String(XMLSource.getXMLSource("UISite.xml").phrase.money[0]) +"；"+ String(XMLSource.getXMLSource("UISite.xml").phrase.nin) + String(XMLSource.getXMLSource("UISite.xml").phrase.nowHave) + String(UICommand.t.realMoney) + String(XMLSource.getXMLSource("UISite.xml").phrase.money[0]), UIState.RECHARGE, true);
			}
		}
		
		private var _ringButton:MovieClip;
		
		private function showRingButton():void
		{
			
			_skillsElement["ButtonLayer"]["comp"].enabled = false;
			(_skillsElement["CDMovieLayer"] as MovieClip).visible = true;
			
			if (!_ringButton) {
				
				var _mClass:Class = ApplicationDomain.currentDomain.getDefinition("ScreenSkillsRingButton") as Class;
				_ringButton = new _mClass() as MovieClip;
				addChild(_ringButton);
				_ringButton.x = 25;
				_ringButton.y = -35;
				_ringButton.gotoAndStop(2);
				_ringButton.addFrameScript(0, stopShowSkillsButton);
				_ringButton.addFrameScript(_ringButton.totalFrames - 1, stopShowRingButton);
				_ringButton.gotoAndPlay(2);
				
			}else {
				_ringButton.visible = true;
				_ringButton.gotoAndPlay(2);
			}
			
		
		}
		
		private function stopShowRingButton():void
		{
			_ringButton.stop();
			(_ringButton["ButtonTrue"] as MovieClip).addEventListener(MouseEvent.CLICK, ringButtonTrueClick);
			(_ringButton["ButtonFalse"] as MovieClip).addEventListener(MouseEvent.CLICK, ringButtonFalseClick);
			
		}
		
		private function stopShowSkillsButton():void {
			
			removeEventListener(Event.ENTER_FRAME, backRingButton);
			_ringButton.gotoAndStop(1);
			_ringButton.visible = false;
		}
		public var cdMovieRunFlag:Boolean = false;
		private function ringButtonTrueClick(event:MouseEvent):void {
			
			
			(_ringButton["ButtonTrue"] as MovieClip).removeEventListener(MouseEvent.CLICK, ringButtonTrueClick);
			(_ringButton["ButtonFalse"] as MovieClip).removeEventListener(MouseEvent.CLICK, ringButtonFalseClick);
			addEventListener(Event.ENTER_FRAME, backRingButton);
			
			if (_skillsRing <= (UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).realMoney)
			{
				
				if (_cdTime > 0)
				{
					if (_skillsFunction != null)
						_skillsFunction(_skillsTime);
					_skillsTimer = new Timer(int(_cdTime * 1000 / 60), 60);
					_skillsTimer.addEventListener(TimerEvent.TIMER, skillsTimerHandler);
					_skillsTimer.start();
					cdMovieRunFlag = true;
				}
				
				
				UICommand.changeMoney( -1 * _skillsRing);
				_skillsRing += _skillsMirrorRing;
				if (_skillsElement["TextLayer"])
				{
					
					(_skillsElement["TextLayer"] as TextField).text = String(_skillsRing);
				}
				
				if (_skillsName == "ringSkillsButon") SoundLayer.getInstance().playSound(SoundName.SOUND_RING_SKILLS);
			}
			else
			{
				//_skillsElement["ButtonLayer"]["comp"].enabled = false;
				//_skillsElement.filters = [new ColorMatrixFilter([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0])]; //灰色
			}
		}
		
		public function visibleFlaseRingBtn():void {
			
			if (_ringButton) {
				
				if (hasEventListener(Event.ENTER_FRAME)) removeEventListener(Event.ENTER_FRAME, backRingButton);
				_ringButton.gotoAndStop(1);
				_ringButton.visible = false;
				skillsButtonEnable();
			}
		}
		
		private function ringButtonFalseClick(event:MouseEvent):void {
			
			(_ringButton["ButtonTrue"] as MovieClip).removeEventListener(MouseEvent.CLICK, ringButtonTrueClick);
			(_ringButton["ButtonFalse"] as MovieClip).removeEventListener(MouseEvent.CLICK, ringButtonFalseClick);
			addEventListener(Event.ENTER_FRAME, backRingButton);
			skillsButtonEnable();
		}
		
		private function backRingButton(event:Event):void {
			
			_ringButton.prevFrame();
		}
		
		private function skillsTimerHandler(event:TimerEvent):void
		{
			
			(_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).nextFrame();
			if ((_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).currentFrame == 60)
			{
				
				_skillsTimer.reset();
				_skillsTimer.removeEventListener(TimerEvent.TIMER, skillsTimerHandler);
				_skillsTimer = null;
				(_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).play();
				cdMovieRunFlag = false;
			}
		}
		
		public function skillsButtonEnable():void
		{
			
			if (_skillsRing <= (UIMain.getInstance(ToolsLayer.NAME) as ToolsLayer).realMoney)
			{
				if (_skillsElement) {
					
					_skillsElement.filters = [];
					(_skillsElement["CDMovieLayer"] as MovieClip).visible = false;
					(_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).gotoAndStop(1);
					_skillsElement["ButtonLayer"]["comp"].enabled = true;
				}
				
			}
			else
			{
				if (_skillsElement) {
					(_skillsElement["CDMovieLayer"] as MovieClip).visible = false;
					_skillsElement["ButtonLayer"]["comp"].enabled = true;
					(_skillsElement["CDMovieLayer"]["CDMovie"] as MovieClip).gotoAndStop(1);
					//_skillsElement.filters = [new ColorMatrixFilter([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0])]; //灰色
				}
			}
		
		}
		/**
		 * 技能cd 暂停
		 * @param	flag
		 */
		public function pauseAndStart(flag:Boolean):void {
			
			if (_skillsTimer) {
				
				if (flag) {
					_skillsTimer.start();
				}else {
					_skillsTimer.stop();
				}
			}
		}
		/**
		 * 将技能按钮重新改为收费
		 */
		private function noFreeSkills():void {
			
			var arr:Array = (UIMain.getInstance(OptionMainLayer.NAME) as OptionMainLayer).skillsButtonArr;
			
			for each (var obj:Object in arr) {
				
				obj.skillsMoney();
			}
			arr = null;
		}
		/**
		 * 技能重新付费
		 */
		public function skillsMoney():void {
			
			_skillsRing = _skillsMirrorRing;
			
			if (_skillsElement["TextLayer"])
			{
				
				(_skillsElement["TextLayer"] as TextField).text = String(_skillsRing);
			}
		}
		/**
		 * 技能按钮警示提醒动画
		 * @param	flag
		 */
		public function waring(flag:Boolean = true):void {
			
			if (flag) {
				
				if (_skillsElement &&_skillsElement["waring"]) {
					
					_skillsElement["waring"].play();
					_skillsElement["waring"].visible = true;
				}
			}
			else {
				
				if (_skillsElement &&_skillsElement["waring"]) {
					
					_skillsElement["waring"].stop();
					_skillsElement["waring"].visible = false;
				}
			}
		}
		
		public function clear():void
		{
			
			if (_skillsTimer)
			{
				_skillsTimer.reset();
				_skillsTimer.removeEventListener(TimerEvent.TIMER, skillsTimerHandler);
				_skillsTimer = null;
			}
			
			if ((_skillsElement["ButtonLayer"] as MovieClip).hasEventListener(MouseEvent.CLICK))
			{
				
				(_skillsElement["ButtonLayer"] as MovieClip).removeEventListener(MouseEvent.CLICK, skillsButtonClickHandler);
			}
			removeChild(_skillsElement);
			_skillsElement = null;
		}
	} //end HeroSkills

}