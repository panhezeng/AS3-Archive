///////////////////////////////////////////////////////////
//  LoadMainLibrary.as
//  Macromedia ActionScript Implementation of the Class LoadMainLibrary
//  Generated by Enterprise Architect
//  Created on:      09-六月-2011 13:59:43
//  Original author: LuXianli
///////////////////////////////////////////////////////////

package com.raytoon.cannonfodder.tools.load
{
	import com.raytoon.cannonfodder.tools.EventBindingData;
	import com.raytoon.cannonfodder.tools.net.ConstPath;
	import com.raytoon.cannonfodder.tools.utils.EventNameList;
	
	import flash.display.Loader;
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IOErrorEvent;
	import flash.events.ProgressEvent;
	import flash.events.SecurityErrorEvent;
	import flash.net.URLRequest;
	import flash.system.ApplicationDomain;
	import flash.system.LoaderContext;
	import flash.system.SecurityDomain;

	/**
	 * @author LuXianli
	 * @version 1.0
	 * @created 09-六月-2011 13:59:43
	 */
	public class LoadMainLibrary extends EventDispatcher
	{
		private var libraryList:XMLList;
		private var libraryLoad:Loader;
		private var progressHandler:Function;
		private var libUrl:String;
		//private var loadContext:LoaderContext;
		private var libSrcNum:int = 0;
		private var libSrcSum:int = 0;
		private var _loadEventName:String;
		
		public function LoadMainLibrary(){
			
		}
		/**
		 * 初始化加载库文件
		 * @param	libraryUrlList  库文件地址列表
		 * @param	progress        库文件加载进度函数
		 * @param	loadEventName   库文件加载完毕后发送事件名
		 */
		public function showMainLibrary(libraryUrlList:XMLList,progress:Function,loadEventName:String):void{
			
			libraryList = libraryUrlList;
			progressHandler = progress;
			_loadEventName = loadEventName;
			libSrcSum = libraryUrlList.libUrl.length();
			
			
			loadLibrary(libraryList.libUrl[libSrcNum]);
		}
		/**
		 * 单个加载 素材库  
		 * @param	libSrc  即将加载素材库 url
		 */
		private function loadLibrary(libSrc:String):void {
			
			libUrl = null;
			
//			libUrl = ConstPath.SERVER_ROOT + ConstPath.SWF_PATH + libSrc;
			libUrl = ConstPath.MATERIAL_PATH + ConstPath.SWF_PATH + libSrc;
			
			libraryLoad = new Loader();
			libraryLoad.contentLoaderInfo.addEventListener(Event.COMPLETE, libraryLoadHandler);
			libraryLoad.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR, libraryLoadIoError);
			libraryLoad.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR, libraryLoadSecurityError);
			libraryLoad.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,progressHandler);
			
			var loadContext:LoaderContext = new LoaderContext();
			loadContext.applicationDomain = ApplicationDomain.currentDomain;
//			loadContext.securityDomain = SecurityDomain.currentDomain;
//			loadContext.checkPolicyFile = true;
			
			libraryLoad.load(new URLRequest(libUrl),loadContext);
		}
		
		/**
		 * 当前正在加载 素材 加载完成；并开始加载下一个地址 指定素材
		 * @param	event
		 */
		private function libraryLoadHandler(event:Event):void {
			
			libraryLoad.contentLoaderInfo.removeEventListener(Event.COMPLETE, libraryLoadHandler);
			libraryLoad.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, libraryLoadIoError);
			libraryLoad.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, libraryLoadSecurityError);
			libraryLoad.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
			
			libSrcNum ++;
			
			if (libSrcNum < libSrcSum) {
				
				loadLibrary(libraryList.libUrl[libSrcNum]);
			}
			else {
				
				libSrcNum = 0;
				if (_loadEventName == EventNameList.NEW_USER_MOVIE_LOAD_COMPLETE){
					(libraryLoad.content as MovieClip).gotoAndStop(1);
					(libraryLoad.content as Object).Movie1.gotoAndStop(1);
					dispatchEvent(new EventBindingData(_loadEventName, libraryLoad.content));
				}
				else{
					dispatchEvent(new Event(_loadEventName));
				}
					
			}
			
		}
		
		private function libraryLoadIoError(event:IOErrorEvent):void {
			
			trace("主素材库加载流错误"+libraryList.libUrl[libSrcNum]);
			libraryLoad.contentLoaderInfo.removeEventListener(Event.COMPLETE, libraryLoadHandler);
			libraryLoad.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, libraryLoadIoError);
			libraryLoad.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, libraryLoadSecurityError);
			libraryLoad.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
		}
		
		private function libraryLoadSecurityError(event:SecurityErrorEvent):void {
			
			trace("主素材加载 安全沙箱 错误");
			libraryLoad.contentLoaderInfo.removeEventListener(Event.COMPLETE, libraryLoadHandler);
			libraryLoad.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR, libraryLoadIoError);
			libraryLoad.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, libraryLoadSecurityError);
			libraryLoad.contentLoaderInfo.removeEventListener(ProgressEvent.PROGRESS, progressHandler);
		}
		
		public function clear():void{
			
			if(libraryLoad){
				libraryLoad.close();
			}
		}

	}//end LoadMainLibrary

}